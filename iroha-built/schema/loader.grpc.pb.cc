// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: loader.proto

#include "loader.pb.h"
#include "loader.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace iroha {
namespace network {
namespace proto {

static const char* Loader_method_names[] = {
  "/iroha.network.proto.Loader/retrieveBlocks",
  "/iroha.network.proto.Loader/retrieveBlock",
};

std::unique_ptr< Loader::Stub> Loader::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Loader::Stub> stub(new Loader::Stub(channel));
  return stub;
}

Loader::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_retrieveBlocks_(Loader_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_retrieveBlock_(Loader_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::iroha::protocol::Block>* Loader::Stub::retrieveBlocksRaw(::grpc::ClientContext* context, const ::iroha::network::proto::BlockRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::iroha::protocol::Block>::Create(channel_.get(), rpcmethod_retrieveBlocks_, context, request);
}

void Loader::Stub::experimental_async::retrieveBlocks(::grpc::ClientContext* context, const ::iroha::network::proto::BlockRequest* request, ::grpc::experimental::ClientReadReactor< ::iroha::protocol::Block>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::iroha::protocol::Block>::Create(stub_->channel_.get(), stub_->rpcmethod_retrieveBlocks_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::iroha::protocol::Block>* Loader::Stub::AsyncretrieveBlocksRaw(::grpc::ClientContext* context, const ::iroha::network::proto::BlockRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::iroha::protocol::Block>::Create(channel_.get(), cq, rpcmethod_retrieveBlocks_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::iroha::protocol::Block>* Loader::Stub::PrepareAsyncretrieveBlocksRaw(::grpc::ClientContext* context, const ::iroha::network::proto::BlockRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::iroha::protocol::Block>::Create(channel_.get(), cq, rpcmethod_retrieveBlocks_, context, request, false, nullptr);
}

::grpc::Status Loader::Stub::retrieveBlock(::grpc::ClientContext* context, const ::iroha::network::proto::BlockRequest& request, ::iroha::protocol::Block* response) {
  return ::grpc::internal::BlockingUnaryCall< ::iroha::network::proto::BlockRequest, ::iroha::protocol::Block, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_retrieveBlock_, context, request, response);
}

void Loader::Stub::experimental_async::retrieveBlock(::grpc::ClientContext* context, const ::iroha::network::proto::BlockRequest* request, ::iroha::protocol::Block* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::iroha::network::proto::BlockRequest, ::iroha::protocol::Block, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_retrieveBlock_, context, request, response, std::move(f));
}

void Loader::Stub::experimental_async::retrieveBlock(::grpc::ClientContext* context, const ::iroha::network::proto::BlockRequest* request, ::iroha::protocol::Block* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_retrieveBlock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::iroha::protocol::Block>* Loader::Stub::PrepareAsyncretrieveBlockRaw(::grpc::ClientContext* context, const ::iroha::network::proto::BlockRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::iroha::protocol::Block, ::iroha::network::proto::BlockRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_retrieveBlock_, context, request);
}

::grpc::ClientAsyncResponseReader< ::iroha::protocol::Block>* Loader::Stub::AsyncretrieveBlockRaw(::grpc::ClientContext* context, const ::iroha::network::proto::BlockRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncretrieveBlockRaw(context, request, cq);
  result->StartCall();
  return result;
}

Loader::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Loader_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Loader::Service, ::iroha::network::proto::BlockRequest, ::iroha::protocol::Block>(
          [](Loader::Service* service,
             ::grpc::ServerContext* ctx,
             const ::iroha::network::proto::BlockRequest* req,
             ::grpc::ServerWriter<::iroha::protocol::Block>* writer) {
               return service->retrieveBlocks(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Loader_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Loader::Service, ::iroha::network::proto::BlockRequest, ::iroha::protocol::Block, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Loader::Service* service,
             ::grpc::ServerContext* ctx,
             const ::iroha::network::proto::BlockRequest* req,
             ::iroha::protocol::Block* resp) {
               return service->retrieveBlock(ctx, req, resp);
             }, this)));
}

Loader::Service::~Service() {
}

::grpc::Status Loader::Service::retrieveBlocks(::grpc::ServerContext* context, const ::iroha::network::proto::BlockRequest* request, ::grpc::ServerWriter< ::iroha::protocol::Block>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Loader::Service::retrieveBlock(::grpc::ServerContext* context, const ::iroha::network::proto::BlockRequest* request, ::iroha::protocol::Block* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace iroha
}  // namespace network
}  // namespace proto

