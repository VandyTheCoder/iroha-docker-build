// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: queries.proto

#include "queries.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace iroha {
namespace protocol {
constexpr Ordering_FieldOrdering::Ordering_FieldOrdering(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : field_(0)

  , direction_(0)
{}
struct Ordering_FieldOrderingDefaultTypeInternal {
  constexpr Ordering_FieldOrderingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Ordering_FieldOrderingDefaultTypeInternal() {}
  union {
    Ordering_FieldOrdering _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Ordering_FieldOrderingDefaultTypeInternal _Ordering_FieldOrdering_default_instance_;
constexpr Ordering::Ordering(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sequence_(){}
struct OrderingDefaultTypeInternal {
  constexpr OrderingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OrderingDefaultTypeInternal() {}
  union {
    Ordering _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OrderingDefaultTypeInternal _Ordering_default_instance_;
constexpr TxPaginationMeta::TxPaginationMeta(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ordering_(nullptr)
  , page_size_(0u)
  , _oneof_case_{}{}
struct TxPaginationMetaDefaultTypeInternal {
  constexpr TxPaginationMetaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TxPaginationMetaDefaultTypeInternal() {}
  union {
    TxPaginationMeta _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TxPaginationMetaDefaultTypeInternal _TxPaginationMeta_default_instance_;
constexpr AssetPaginationMeta::AssetPaginationMeta(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : page_size_(0u)
  , _oneof_case_{}{}
struct AssetPaginationMetaDefaultTypeInternal {
  constexpr AssetPaginationMetaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AssetPaginationMetaDefaultTypeInternal() {}
  union {
    AssetPaginationMeta _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AssetPaginationMetaDefaultTypeInternal _AssetPaginationMeta_default_instance_;
constexpr GetAccount::GetAccount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetAccountDefaultTypeInternal {
  constexpr GetAccountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetAccountDefaultTypeInternal() {}
  union {
    GetAccount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetAccountDefaultTypeInternal _GetAccount_default_instance_;
constexpr GetBlock::GetBlock(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : height_(PROTOBUF_ULONGLONG(0)){}
struct GetBlockDefaultTypeInternal {
  constexpr GetBlockDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetBlockDefaultTypeInternal() {}
  union {
    GetBlock _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetBlockDefaultTypeInternal _GetBlock_default_instance_;
constexpr GetSignatories::GetSignatories(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetSignatoriesDefaultTypeInternal {
  constexpr GetSignatoriesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetSignatoriesDefaultTypeInternal() {}
  union {
    GetSignatories _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetSignatoriesDefaultTypeInternal _GetSignatories_default_instance_;
constexpr GetAccountTransactions::GetAccountTransactions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pagination_meta_(nullptr){}
struct GetAccountTransactionsDefaultTypeInternal {
  constexpr GetAccountTransactionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetAccountTransactionsDefaultTypeInternal() {}
  union {
    GetAccountTransactions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetAccountTransactionsDefaultTypeInternal _GetAccountTransactions_default_instance_;
constexpr GetAccountAssetTransactions::GetAccountAssetTransactions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , asset_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pagination_meta_(nullptr){}
struct GetAccountAssetTransactionsDefaultTypeInternal {
  constexpr GetAccountAssetTransactionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetAccountAssetTransactionsDefaultTypeInternal() {}
  union {
    GetAccountAssetTransactions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetAccountAssetTransactionsDefaultTypeInternal _GetAccountAssetTransactions_default_instance_;
constexpr GetTransactions::GetTransactions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tx_hashes_(){}
struct GetTransactionsDefaultTypeInternal {
  constexpr GetTransactionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetTransactionsDefaultTypeInternal() {}
  union {
    GetTransactions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetTransactionsDefaultTypeInternal _GetTransactions_default_instance_;
constexpr GetAccountAssets::GetAccountAssets(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pagination_meta_(nullptr){}
struct GetAccountAssetsDefaultTypeInternal {
  constexpr GetAccountAssetsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetAccountAssetsDefaultTypeInternal() {}
  union {
    GetAccountAssets _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetAccountAssetsDefaultTypeInternal _GetAccountAssets_default_instance_;
constexpr AccountDetailPaginationMeta::AccountDetailPaginationMeta(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : first_record_id_(nullptr)
  , page_size_(0u){}
struct AccountDetailPaginationMetaDefaultTypeInternal {
  constexpr AccountDetailPaginationMetaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccountDetailPaginationMetaDefaultTypeInternal() {}
  union {
    AccountDetailPaginationMeta _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccountDetailPaginationMetaDefaultTypeInternal _AccountDetailPaginationMeta_default_instance_;
constexpr GetAccountDetail::GetAccountDetail(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pagination_meta_(nullptr)
  , _oneof_case_{}{}
struct GetAccountDetailDefaultTypeInternal {
  constexpr GetAccountDetailDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetAccountDetailDefaultTypeInternal() {}
  union {
    GetAccountDetail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetAccountDetailDefaultTypeInternal _GetAccountDetail_default_instance_;
constexpr GetAssetInfo::GetAssetInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : asset_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetAssetInfoDefaultTypeInternal {
  constexpr GetAssetInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetAssetInfoDefaultTypeInternal() {}
  union {
    GetAssetInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetAssetInfoDefaultTypeInternal _GetAssetInfo_default_instance_;
constexpr GetRoles::GetRoles(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetRolesDefaultTypeInternal {
  constexpr GetRolesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetRolesDefaultTypeInternal() {}
  union {
    GetRoles _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetRolesDefaultTypeInternal _GetRoles_default_instance_;
constexpr GetRolePermissions::GetRolePermissions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : role_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetRolePermissionsDefaultTypeInternal {
  constexpr GetRolePermissionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetRolePermissionsDefaultTypeInternal() {}
  union {
    GetRolePermissions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetRolePermissionsDefaultTypeInternal _GetRolePermissions_default_instance_;
constexpr GetPendingTransactions::GetPendingTransactions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pagination_meta_(nullptr){}
struct GetPendingTransactionsDefaultTypeInternal {
  constexpr GetPendingTransactionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetPendingTransactionsDefaultTypeInternal() {}
  union {
    GetPendingTransactions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetPendingTransactionsDefaultTypeInternal _GetPendingTransactions_default_instance_;
constexpr GetPeers::GetPeers(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetPeersDefaultTypeInternal {
  constexpr GetPeersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetPeersDefaultTypeInternal() {}
  union {
    GetPeers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetPeersDefaultTypeInternal _GetPeers_default_instance_;
constexpr QueryPayloadMeta::QueryPayloadMeta(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : creator_account_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , created_time_(PROTOBUF_ULONGLONG(0))
  , query_counter_(PROTOBUF_ULONGLONG(0)){}
struct QueryPayloadMetaDefaultTypeInternal {
  constexpr QueryPayloadMetaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QueryPayloadMetaDefaultTypeInternal() {}
  union {
    QueryPayloadMeta _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QueryPayloadMetaDefaultTypeInternal _QueryPayloadMeta_default_instance_;
constexpr GetEngineReceipts::GetEngineReceipts(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tx_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetEngineReceiptsDefaultTypeInternal {
  constexpr GetEngineReceiptsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetEngineReceiptsDefaultTypeInternal() {}
  union {
    GetEngineReceipts _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetEngineReceiptsDefaultTypeInternal _GetEngineReceipts_default_instance_;
constexpr Query_Payload::Query_Payload(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : meta_(nullptr)
  , _oneof_case_{}{}
struct Query_PayloadDefaultTypeInternal {
  constexpr Query_PayloadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Query_PayloadDefaultTypeInternal() {}
  union {
    Query_Payload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Query_PayloadDefaultTypeInternal _Query_Payload_default_instance_;
constexpr Query::Query(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : payload_(nullptr)
  , signature_(nullptr){}
struct QueryDefaultTypeInternal {
  constexpr QueryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QueryDefaultTypeInternal() {}
  union {
    Query _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QueryDefaultTypeInternal _Query_default_instance_;
constexpr BlocksQuery::BlocksQuery(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : meta_(nullptr)
  , signature_(nullptr){}
struct BlocksQueryDefaultTypeInternal {
  constexpr BlocksQueryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlocksQueryDefaultTypeInternal() {}
  union {
    BlocksQuery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlocksQueryDefaultTypeInternal _BlocksQuery_default_instance_;
}  // namespace protocol
}  // namespace iroha
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_queries_2eproto[23];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_queries_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_queries_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_queries_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Ordering_FieldOrdering, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Ordering_FieldOrdering, field_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Ordering_FieldOrdering, direction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Ordering, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Ordering, sequence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::TxPaginationMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::TxPaginationMeta, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::TxPaginationMeta, page_size_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::TxPaginationMeta, ordering_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::TxPaginationMeta, opt_first_tx_hash_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::TxPaginationMeta, opt_first_tx_time_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::TxPaginationMeta, opt_last_tx_time_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::TxPaginationMeta, opt_first_tx_height_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::TxPaginationMeta, opt_last_tx_height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::AssetPaginationMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::AssetPaginationMeta, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::AssetPaginationMeta, page_size_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::AssetPaginationMeta, opt_first_asset_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetAccount, account_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetBlock, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetSignatories, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetSignatories, account_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetAccountTransactions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetAccountTransactions, account_id_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetAccountTransactions, pagination_meta_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetAccountAssetTransactions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetAccountAssetTransactions, account_id_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetAccountAssetTransactions, asset_id_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetAccountAssetTransactions, pagination_meta_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetTransactions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetTransactions, tx_hashes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetAccountAssets, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetAccountAssets, account_id_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetAccountAssets, pagination_meta_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::AccountDetailPaginationMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::AccountDetailPaginationMeta, page_size_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::AccountDetailPaginationMeta, first_record_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetAccountDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetAccountDetail, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetAccountDetail, pagination_meta_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetAccountDetail, opt_account_id_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetAccountDetail, opt_key_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetAccountDetail, opt_writer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetAssetInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetAssetInfo, asset_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetRoles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetRolePermissions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetRolePermissions, role_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetPendingTransactions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetPendingTransactions, pagination_meta_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetPeers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::QueryPayloadMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::QueryPayloadMeta, created_time_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::QueryPayloadMeta, creator_account_id_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::QueryPayloadMeta, query_counter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetEngineReceipts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GetEngineReceipts, tx_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Query_Payload, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Query_Payload, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Query_Payload, meta_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Query_Payload, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Query, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Query, payload_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Query, signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::BlocksQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::BlocksQuery, meta_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::BlocksQuery, signature_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::iroha::protocol::Ordering_FieldOrdering)},
  { 7, -1, sizeof(::iroha::protocol::Ordering)},
  { 13, -1, sizeof(::iroha::protocol::TxPaginationMeta)},
  { 30, -1, sizeof(::iroha::protocol::AssetPaginationMeta)},
  { 38, -1, sizeof(::iroha::protocol::GetAccount)},
  { 44, -1, sizeof(::iroha::protocol::GetBlock)},
  { 50, -1, sizeof(::iroha::protocol::GetSignatories)},
  { 56, -1, sizeof(::iroha::protocol::GetAccountTransactions)},
  { 63, -1, sizeof(::iroha::protocol::GetAccountAssetTransactions)},
  { 71, -1, sizeof(::iroha::protocol::GetTransactions)},
  { 77, -1, sizeof(::iroha::protocol::GetAccountAssets)},
  { 84, -1, sizeof(::iroha::protocol::AccountDetailPaginationMeta)},
  { 91, -1, sizeof(::iroha::protocol::GetAccountDetail)},
  { 103, -1, sizeof(::iroha::protocol::GetAssetInfo)},
  { 109, -1, sizeof(::iroha::protocol::GetRoles)},
  { 114, -1, sizeof(::iroha::protocol::GetRolePermissions)},
  { 120, -1, sizeof(::iroha::protocol::GetPendingTransactions)},
  { 126, -1, sizeof(::iroha::protocol::GetPeers)},
  { 131, -1, sizeof(::iroha::protocol::QueryPayloadMeta)},
  { 139, -1, sizeof(::iroha::protocol::GetEngineReceipts)},
  { 145, -1, sizeof(::iroha::protocol::Query_Payload)},
  { 166, -1, sizeof(::iroha::protocol::Query)},
  { 173, -1, sizeof(::iroha::protocol::BlocksQuery)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_Ordering_FieldOrdering_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_Ordering_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_TxPaginationMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_AssetPaginationMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_GetAccount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_GetBlock_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_GetSignatories_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_GetAccountTransactions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_GetAccountAssetTransactions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_GetTransactions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_GetAccountAssets_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_AccountDetailPaginationMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_GetAccountDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_GetAssetInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_GetRoles_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_GetRolePermissions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_GetPendingTransactions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_GetPeers_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_QueryPayloadMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_GetEngineReceipts_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_Query_Payload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_Query_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_BlocksQuery_default_instance_),
};

const char descriptor_table_protodef_queries_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rqueries.proto\022\016iroha.protocol\032\017primiti"
  "ve.proto\032\037google/protobuf/timestamp.prot"
  "o\"\251\001\n\010Ordering\0228\n\010sequence\030\001 \003(\0132&.iroha"
  ".protocol.Ordering.FieldOrdering\032c\n\rFiel"
  "dOrdering\022$\n\005field\030\001 \001(\0162\025.iroha.protoco"
  "l.Field\022,\n\tdirection\030\002 \001(\0162\031.iroha.proto"
  "col.Direction\"\363\002\n\020TxPaginationMeta\022\021\n\tpa"
  "ge_size\030\001 \001(\r\022\027\n\rfirst_tx_hash\030\002 \001(\tH\000\022*"
  "\n\010ordering\030\003 \001(\0132\030.iroha.protocol.Orderi"
  "ng\0223\n\rfirst_tx_time\030\004 \001(\0132\032.google.proto"
  "buf.TimestampH\001\0222\n\014last_tx_time\030\005 \001(\0132\032."
  "google.protobuf.TimestampH\002\022\031\n\017first_tx_"
  "height\030\006 \001(\004H\003\022\030\n\016last_tx_height\030\007 \001(\004H\004"
  "B\023\n\021opt_first_tx_hashB\023\n\021opt_first_tx_ti"
  "meB\022\n\020opt_last_tx_timeB\025\n\023opt_first_tx_h"
  "eightB\024\n\022opt_last_tx_height\"X\n\023AssetPagi"
  "nationMeta\022\021\n\tpage_size\030\001 \001(\r\022\030\n\016first_a"
  "sset_id\030\002 \001(\tH\000B\024\n\022opt_first_asset_id\" \n"
  "\nGetAccount\022\022\n\naccount_id\030\001 \001(\t\"\032\n\010GetBl"
  "ock\022\016\n\006height\030\001 \001(\004\"$\n\016GetSignatories\022\022\n"
  "\naccount_id\030\001 \001(\t\"g\n\026GetAccountTransacti"
  "ons\022\022\n\naccount_id\030\001 \001(\t\0229\n\017pagination_me"
  "ta\030\002 \001(\0132 .iroha.protocol.TxPaginationMe"
  "ta\"~\n\033GetAccountAssetTransactions\022\022\n\nacc"
  "ount_id\030\001 \001(\t\022\020\n\010asset_id\030\002 \001(\t\0229\n\017pagin"
  "ation_meta\030\003 \001(\0132 .iroha.protocol.TxPagi"
  "nationMeta\"$\n\017GetTransactions\022\021\n\ttx_hash"
  "es\030\001 \003(\t\"d\n\020GetAccountAssets\022\022\n\naccount_"
  "id\030\001 \001(\t\022<\n\017pagination_meta\030\002 \001(\0132#.iroh"
  "a.protocol.AssetPaginationMeta\"p\n\033Accoun"
  "tDetailPaginationMeta\022\021\n\tpage_size\030\001 \001(\r"
  "\022>\n\017first_record_id\030\002 \001(\0132%.iroha.protoc"
  "ol.AccountDetailRecordId\"\272\001\n\020GetAccountD"
  "etail\022\024\n\naccount_id\030\001 \001(\tH\000\022\r\n\003key\030\002 \001(\t"
  "H\001\022\020\n\006writer\030\003 \001(\tH\002\022D\n\017pagination_meta\030"
  "\004 \001(\0132+.iroha.protocol.AccountDetailPagi"
  "nationMetaB\020\n\016opt_account_idB\t\n\007opt_keyB"
  "\014\n\nopt_writer\" \n\014GetAssetInfo\022\020\n\010asset_i"
  "d\030\001 \001(\t\"\n\n\010GetRoles\"%\n\022GetRolePermission"
  "s\022\017\n\007role_id\030\001 \001(\t\"S\n\026GetPendingTransact"
  "ions\0229\n\017pagination_meta\030\001 \001(\0132 .iroha.pr"
  "otocol.TxPaginationMeta\"\n\n\010GetPeers\"[\n\020Q"
  "ueryPayloadMeta\022\024\n\014created_time\030\001 \001(\004\022\032\n"
  "\022creator_account_id\030\002 \001(\t\022\025\n\rquery_count"
  "er\030\003 \001(\004\"$\n\021GetEngineReceipts\022\017\n\007tx_hash"
  "\030\001 \001(\t\"\217\010\n\005Query\022.\n\007payload\030\001 \001(\0132\035.iroh"
  "a.protocol.Query.Payload\022,\n\tsignature\030\002 "
  "\001(\0132\031.iroha.protocol.Signature\032\247\007\n\007Paylo"
  "ad\022.\n\004meta\030\001 \001(\0132 .iroha.protocol.QueryP"
  "ayloadMeta\0221\n\013get_account\030\003 \001(\0132\032.iroha."
  "protocol.GetAccountH\000\0229\n\017get_signatories"
  "\030\004 \001(\0132\036.iroha.protocol.GetSignatoriesH\000"
  "\022J\n\030get_account_transactions\030\005 \001(\0132&.iro"
  "ha.protocol.GetAccountTransactionsH\000\022U\n\036"
  "get_account_asset_transactions\030\006 \001(\0132+.i"
  "roha.protocol.GetAccountAssetTransaction"
  "sH\000\022;\n\020get_transactions\030\007 \001(\0132\037.iroha.pr"
  "otocol.GetTransactionsH\000\022>\n\022get_account_"
  "assets\030\010 \001(\0132 .iroha.protocol.GetAccount"
  "AssetsH\000\022>\n\022get_account_detail\030\t \001(\0132 .i"
  "roha.protocol.GetAccountDetailH\000\022-\n\tget_"
  "roles\030\n \001(\0132\030.iroha.protocol.GetRolesH\000\022"
  "B\n\024get_role_permissions\030\013 \001(\0132\".iroha.pr"
  "otocol.GetRolePermissionsH\000\0226\n\016get_asset"
  "_info\030\014 \001(\0132\034.iroha.protocol.GetAssetInf"
  "oH\000\022J\n\030get_pending_transactions\030\r \001(\0132&."
  "iroha.protocol.GetPendingTransactionsH\000\022"
  "-\n\tget_block\030\016 \001(\0132\030.iroha.protocol.GetB"
  "lockH\000\022-\n\tget_peers\030\017 \001(\0132\030.iroha.protoc"
  "ol.GetPeersH\000\022@\n\023get_engine_receipts\030\020 \001"
  "(\0132!.iroha.protocol.GetEngineReceiptsH\000B"
  "\007\n\005query\"k\n\013BlocksQuery\022.\n\004meta\030\001 \001(\0132 ."
  "iroha.protocol.QueryPayloadMeta\022,\n\tsigna"
  "ture\030\002 \001(\0132\031.iroha.protocol.Signature*(\n"
  "\005Field\022\020\n\014kCreatedTime\020\000\022\r\n\tkPosition\020\001*"
  ",\n\tDirection\022\016\n\nkAscending\020\000\022\017\n\013kDescend"
  "ing\020\001B\032Z\030iroha.generated/protocolb\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_queries_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_primitive_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_queries_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_queries_2eproto = {
  false, false, 3081, descriptor_table_protodef_queries_2eproto, "queries.proto", 
  &descriptor_table_queries_2eproto_once, descriptor_table_queries_2eproto_deps, 2, 23,
  schemas, file_default_instances, TableStruct_queries_2eproto::offsets,
  file_level_metadata_queries_2eproto, file_level_enum_descriptors_queries_2eproto, file_level_service_descriptors_queries_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_queries_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_queries_2eproto);
  return descriptor_table_queries_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_queries_2eproto(&descriptor_table_queries_2eproto);
namespace iroha {
namespace protocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Field_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_queries_2eproto);
  return file_level_enum_descriptors_queries_2eproto[0];
}
bool Field_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Direction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_queries_2eproto);
  return file_level_enum_descriptors_queries_2eproto[1];
}
bool Direction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Ordering_FieldOrdering::_Internal {
 public:
};

Ordering_FieldOrdering::Ordering_FieldOrdering(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.Ordering.FieldOrdering)
}
Ordering_FieldOrdering::Ordering_FieldOrdering(const Ordering_FieldOrdering& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&field_, &from.field_,
    static_cast<size_t>(reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&field_)) + sizeof(direction_));
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.Ordering.FieldOrdering)
}

void Ordering_FieldOrdering::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&field_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&field_)) + sizeof(direction_));
}

Ordering_FieldOrdering::~Ordering_FieldOrdering() {
  // @@protoc_insertion_point(destructor:iroha.protocol.Ordering.FieldOrdering)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Ordering_FieldOrdering::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Ordering_FieldOrdering::ArenaDtor(void* object) {
  Ordering_FieldOrdering* _this = reinterpret_cast< Ordering_FieldOrdering* >(object);
  (void)_this;
}
void Ordering_FieldOrdering::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Ordering_FieldOrdering::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Ordering_FieldOrdering::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.Ordering.FieldOrdering)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&field_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&field_)) + sizeof(direction_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ordering_FieldOrdering::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .iroha.protocol.Field field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_field(static_cast<::iroha::protocol::Field>(val));
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.Direction direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_direction(static_cast<::iroha::protocol::Direction>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ordering_FieldOrdering::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.Ordering.FieldOrdering)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .iroha.protocol.Field field = 1;
  if (this->field() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_field(), target);
  }

  // .iroha.protocol.Direction direction = 2;
  if (this->direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_direction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.Ordering.FieldOrdering)
  return target;
}

size_t Ordering_FieldOrdering::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.Ordering.FieldOrdering)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .iroha.protocol.Field field = 1;
  if (this->field() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_field());
  }

  // .iroha.protocol.Direction direction = 2;
  if (this->direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_direction());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ordering_FieldOrdering::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.Ordering.FieldOrdering)
  GOOGLE_DCHECK_NE(&from, this);
  const Ordering_FieldOrdering* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Ordering_FieldOrdering>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.Ordering.FieldOrdering)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.Ordering.FieldOrdering)
    MergeFrom(*source);
  }
}

void Ordering_FieldOrdering::MergeFrom(const Ordering_FieldOrdering& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.Ordering.FieldOrdering)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.field() != 0) {
    _internal_set_field(from._internal_field());
  }
  if (from.direction() != 0) {
    _internal_set_direction(from._internal_direction());
  }
}

void Ordering_FieldOrdering::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.Ordering.FieldOrdering)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ordering_FieldOrdering::CopyFrom(const Ordering_FieldOrdering& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.Ordering.FieldOrdering)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ordering_FieldOrdering::IsInitialized() const {
  return true;
}

void Ordering_FieldOrdering::InternalSwap(Ordering_FieldOrdering* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ordering_FieldOrdering, direction_)
      + sizeof(Ordering_FieldOrdering::direction_)
      - PROTOBUF_FIELD_OFFSET(Ordering_FieldOrdering, field_)>(
          reinterpret_cast<char*>(&field_),
          reinterpret_cast<char*>(&other->field_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Ordering_FieldOrdering::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Ordering::_Internal {
 public:
};

Ordering::Ordering(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sequence_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.Ordering)
}
Ordering::Ordering(const Ordering& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sequence_(from.sequence_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.Ordering)
}

void Ordering::SharedCtor() {
}

Ordering::~Ordering() {
  // @@protoc_insertion_point(destructor:iroha.protocol.Ordering)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Ordering::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Ordering::ArenaDtor(void* object) {
  Ordering* _this = reinterpret_cast< Ordering* >(object);
  (void)_this;
}
void Ordering::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Ordering::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Ordering::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.Ordering)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sequence_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ordering::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .iroha.protocol.Ordering.FieldOrdering sequence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sequence(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ordering::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.Ordering)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .iroha.protocol.Ordering.FieldOrdering sequence = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sequence_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_sequence(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.Ordering)
  return target;
}

size_t Ordering::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.Ordering)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iroha.protocol.Ordering.FieldOrdering sequence = 1;
  total_size += 1UL * this->_internal_sequence_size();
  for (const auto& msg : this->sequence_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ordering::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.Ordering)
  GOOGLE_DCHECK_NE(&from, this);
  const Ordering* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Ordering>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.Ordering)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.Ordering)
    MergeFrom(*source);
  }
}

void Ordering::MergeFrom(const Ordering& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.Ordering)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sequence_.MergeFrom(from.sequence_);
}

void Ordering::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.Ordering)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ordering::CopyFrom(const Ordering& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.Ordering)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ordering::IsInitialized() const {
  return true;
}

void Ordering::InternalSwap(Ordering* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sequence_.InternalSwap(&other->sequence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Ordering::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TxPaginationMeta::_Internal {
 public:
  static const ::iroha::protocol::Ordering& ordering(const TxPaginationMeta* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& first_tx_time(const TxPaginationMeta* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& last_tx_time(const TxPaginationMeta* msg);
};

const ::iroha::protocol::Ordering&
TxPaginationMeta::_Internal::ordering(const TxPaginationMeta* msg) {
  return *msg->ordering_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
TxPaginationMeta::_Internal::first_tx_time(const TxPaginationMeta* msg) {
  return *msg->opt_first_tx_time_.first_tx_time_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
TxPaginationMeta::_Internal::last_tx_time(const TxPaginationMeta* msg) {
  return *msg->opt_last_tx_time_.last_tx_time_;
}
void TxPaginationMeta::set_allocated_first_tx_time(PROTOBUF_NAMESPACE_ID::Timestamp* first_tx_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_opt_first_tx_time();
  if (first_tx_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(first_tx_time)->GetArena();
    if (message_arena != submessage_arena) {
      first_tx_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, first_tx_time, submessage_arena);
    }
    set_has_first_tx_time();
    opt_first_tx_time_.first_tx_time_ = first_tx_time;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.TxPaginationMeta.first_tx_time)
}
void TxPaginationMeta::clear_first_tx_time() {
  if (_internal_has_first_tx_time()) {
    if (GetArena() == nullptr) {
      delete opt_first_tx_time_.first_tx_time_;
    }
    clear_has_opt_first_tx_time();
  }
}
void TxPaginationMeta::set_allocated_last_tx_time(PROTOBUF_NAMESPACE_ID::Timestamp* last_tx_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_opt_last_tx_time();
  if (last_tx_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_tx_time)->GetArena();
    if (message_arena != submessage_arena) {
      last_tx_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_tx_time, submessage_arena);
    }
    set_has_last_tx_time();
    opt_last_tx_time_.last_tx_time_ = last_tx_time;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.TxPaginationMeta.last_tx_time)
}
void TxPaginationMeta::clear_last_tx_time() {
  if (_internal_has_last_tx_time()) {
    if (GetArena() == nullptr) {
      delete opt_last_tx_time_.last_tx_time_;
    }
    clear_has_opt_last_tx_time();
  }
}
TxPaginationMeta::TxPaginationMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.TxPaginationMeta)
}
TxPaginationMeta::TxPaginationMeta(const TxPaginationMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ordering()) {
    ordering_ = new ::iroha::protocol::Ordering(*from.ordering_);
  } else {
    ordering_ = nullptr;
  }
  page_size_ = from.page_size_;
  clear_has_opt_first_tx_hash();
  switch (from.opt_first_tx_hash_case()) {
    case kFirstTxHash: {
      _internal_set_first_tx_hash(from._internal_first_tx_hash());
      break;
    }
    case OPT_FIRST_TX_HASH_NOT_SET: {
      break;
    }
  }
  clear_has_opt_first_tx_time();
  switch (from.opt_first_tx_time_case()) {
    case kFirstTxTime: {
      _internal_mutable_first_tx_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_first_tx_time());
      break;
    }
    case OPT_FIRST_TX_TIME_NOT_SET: {
      break;
    }
  }
  clear_has_opt_last_tx_time();
  switch (from.opt_last_tx_time_case()) {
    case kLastTxTime: {
      _internal_mutable_last_tx_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_last_tx_time());
      break;
    }
    case OPT_LAST_TX_TIME_NOT_SET: {
      break;
    }
  }
  clear_has_opt_first_tx_height();
  switch (from.opt_first_tx_height_case()) {
    case kFirstTxHeight: {
      _internal_set_first_tx_height(from._internal_first_tx_height());
      break;
    }
    case OPT_FIRST_TX_HEIGHT_NOT_SET: {
      break;
    }
  }
  clear_has_opt_last_tx_height();
  switch (from.opt_last_tx_height_case()) {
    case kLastTxHeight: {
      _internal_set_last_tx_height(from._internal_last_tx_height());
      break;
    }
    case OPT_LAST_TX_HEIGHT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.TxPaginationMeta)
}

void TxPaginationMeta::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ordering_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&page_size_) -
    reinterpret_cast<char*>(&ordering_)) + sizeof(page_size_));
clear_has_opt_first_tx_hash();
clear_has_opt_first_tx_time();
clear_has_opt_last_tx_time();
clear_has_opt_first_tx_height();
clear_has_opt_last_tx_height();
}

TxPaginationMeta::~TxPaginationMeta() {
  // @@protoc_insertion_point(destructor:iroha.protocol.TxPaginationMeta)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TxPaginationMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ordering_;
  if (has_opt_first_tx_hash()) {
    clear_opt_first_tx_hash();
  }
  if (has_opt_first_tx_time()) {
    clear_opt_first_tx_time();
  }
  if (has_opt_last_tx_time()) {
    clear_opt_last_tx_time();
  }
  if (has_opt_first_tx_height()) {
    clear_opt_first_tx_height();
  }
  if (has_opt_last_tx_height()) {
    clear_opt_last_tx_height();
  }
}

void TxPaginationMeta::ArenaDtor(void* object) {
  TxPaginationMeta* _this = reinterpret_cast< TxPaginationMeta* >(object);
  (void)_this;
}
void TxPaginationMeta::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TxPaginationMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TxPaginationMeta::clear_opt_first_tx_hash() {
// @@protoc_insertion_point(one_of_clear_start:iroha.protocol.TxPaginationMeta)
  switch (opt_first_tx_hash_case()) {
    case kFirstTxHash: {
      opt_first_tx_hash_.first_tx_hash_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case OPT_FIRST_TX_HASH_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPT_FIRST_TX_HASH_NOT_SET;
}

void TxPaginationMeta::clear_opt_first_tx_time() {
// @@protoc_insertion_point(one_of_clear_start:iroha.protocol.TxPaginationMeta)
  switch (opt_first_tx_time_case()) {
    case kFirstTxTime: {
      if (GetArena() == nullptr) {
        delete opt_first_tx_time_.first_tx_time_;
      }
      break;
    }
    case OPT_FIRST_TX_TIME_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = OPT_FIRST_TX_TIME_NOT_SET;
}

void TxPaginationMeta::clear_opt_last_tx_time() {
// @@protoc_insertion_point(one_of_clear_start:iroha.protocol.TxPaginationMeta)
  switch (opt_last_tx_time_case()) {
    case kLastTxTime: {
      if (GetArena() == nullptr) {
        delete opt_last_tx_time_.last_tx_time_;
      }
      break;
    }
    case OPT_LAST_TX_TIME_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = OPT_LAST_TX_TIME_NOT_SET;
}

void TxPaginationMeta::clear_opt_first_tx_height() {
// @@protoc_insertion_point(one_of_clear_start:iroha.protocol.TxPaginationMeta)
  switch (opt_first_tx_height_case()) {
    case kFirstTxHeight: {
      // No need to clear
      break;
    }
    case OPT_FIRST_TX_HEIGHT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[3] = OPT_FIRST_TX_HEIGHT_NOT_SET;
}

void TxPaginationMeta::clear_opt_last_tx_height() {
// @@protoc_insertion_point(one_of_clear_start:iroha.protocol.TxPaginationMeta)
  switch (opt_last_tx_height_case()) {
    case kLastTxHeight: {
      // No need to clear
      break;
    }
    case OPT_LAST_TX_HEIGHT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[4] = OPT_LAST_TX_HEIGHT_NOT_SET;
}


void TxPaginationMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.TxPaginationMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && ordering_ != nullptr) {
    delete ordering_;
  }
  ordering_ = nullptr;
  page_size_ = 0u;
  clear_opt_first_tx_hash();
  clear_opt_first_tx_time();
  clear_opt_last_tx_time();
  clear_opt_first_tx_height();
  clear_opt_last_tx_height();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxPaginationMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 page_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string first_tx_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_first_tx_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.TxPaginationMeta.first_tx_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.Ordering ordering = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ordering(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp first_tx_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_first_tx_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_tx_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_tx_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 first_tx_height = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _internal_set_first_tx_height(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 last_tx_height = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _internal_set_last_tx_height(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TxPaginationMeta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.TxPaginationMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 page_size = 1;
  if (this->page_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_page_size(), target);
  }

  // string first_tx_hash = 2;
  if (_internal_has_first_tx_hash()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_first_tx_hash().data(), static_cast<int>(this->_internal_first_tx_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.TxPaginationMeta.first_tx_hash");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_first_tx_hash(), target);
  }

  // .iroha.protocol.Ordering ordering = 3;
  if (this->has_ordering()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ordering(this), target, stream);
  }

  // .google.protobuf.Timestamp first_tx_time = 4;
  if (_internal_has_first_tx_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::first_tx_time(this), target, stream);
  }

  // .google.protobuf.Timestamp last_tx_time = 5;
  if (_internal_has_last_tx_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::last_tx_time(this), target, stream);
  }

  // uint64 first_tx_height = 6;
  if (_internal_has_first_tx_height()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_first_tx_height(), target);
  }

  // uint64 last_tx_height = 7;
  if (_internal_has_last_tx_height()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_last_tx_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.TxPaginationMeta)
  return target;
}

size_t TxPaginationMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.TxPaginationMeta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .iroha.protocol.Ordering ordering = 3;
  if (this->has_ordering()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ordering_);
  }

  // uint32 page_size = 1;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page_size());
  }

  switch (opt_first_tx_hash_case()) {
    // string first_tx_hash = 2;
    case kFirstTxHash: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_first_tx_hash());
      break;
    }
    case OPT_FIRST_TX_HASH_NOT_SET: {
      break;
    }
  }
  switch (opt_first_tx_time_case()) {
    // .google.protobuf.Timestamp first_tx_time = 4;
    case kFirstTxTime: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *opt_first_tx_time_.first_tx_time_);
      break;
    }
    case OPT_FIRST_TX_TIME_NOT_SET: {
      break;
    }
  }
  switch (opt_last_tx_time_case()) {
    // .google.protobuf.Timestamp last_tx_time = 5;
    case kLastTxTime: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *opt_last_tx_time_.last_tx_time_);
      break;
    }
    case OPT_LAST_TX_TIME_NOT_SET: {
      break;
    }
  }
  switch (opt_first_tx_height_case()) {
    // uint64 first_tx_height = 6;
    case kFirstTxHeight: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_first_tx_height());
      break;
    }
    case OPT_FIRST_TX_HEIGHT_NOT_SET: {
      break;
    }
  }
  switch (opt_last_tx_height_case()) {
    // uint64 last_tx_height = 7;
    case kLastTxHeight: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_last_tx_height());
      break;
    }
    case OPT_LAST_TX_HEIGHT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TxPaginationMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.TxPaginationMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const TxPaginationMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TxPaginationMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.TxPaginationMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.TxPaginationMeta)
    MergeFrom(*source);
  }
}

void TxPaginationMeta::MergeFrom(const TxPaginationMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.TxPaginationMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ordering()) {
    _internal_mutable_ordering()->::iroha::protocol::Ordering::MergeFrom(from._internal_ordering());
  }
  if (from.page_size() != 0) {
    _internal_set_page_size(from._internal_page_size());
  }
  switch (from.opt_first_tx_hash_case()) {
    case kFirstTxHash: {
      _internal_set_first_tx_hash(from._internal_first_tx_hash());
      break;
    }
    case OPT_FIRST_TX_HASH_NOT_SET: {
      break;
    }
  }
  switch (from.opt_first_tx_time_case()) {
    case kFirstTxTime: {
      _internal_mutable_first_tx_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_first_tx_time());
      break;
    }
    case OPT_FIRST_TX_TIME_NOT_SET: {
      break;
    }
  }
  switch (from.opt_last_tx_time_case()) {
    case kLastTxTime: {
      _internal_mutable_last_tx_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_last_tx_time());
      break;
    }
    case OPT_LAST_TX_TIME_NOT_SET: {
      break;
    }
  }
  switch (from.opt_first_tx_height_case()) {
    case kFirstTxHeight: {
      _internal_set_first_tx_height(from._internal_first_tx_height());
      break;
    }
    case OPT_FIRST_TX_HEIGHT_NOT_SET: {
      break;
    }
  }
  switch (from.opt_last_tx_height_case()) {
    case kLastTxHeight: {
      _internal_set_last_tx_height(from._internal_last_tx_height());
      break;
    }
    case OPT_LAST_TX_HEIGHT_NOT_SET: {
      break;
    }
  }
}

void TxPaginationMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.TxPaginationMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxPaginationMeta::CopyFrom(const TxPaginationMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.TxPaginationMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxPaginationMeta::IsInitialized() const {
  return true;
}

void TxPaginationMeta::InternalSwap(TxPaginationMeta* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TxPaginationMeta, page_size_)
      + sizeof(TxPaginationMeta::page_size_)
      - PROTOBUF_FIELD_OFFSET(TxPaginationMeta, ordering_)>(
          reinterpret_cast<char*>(&ordering_),
          reinterpret_cast<char*>(&other->ordering_));
  swap(opt_first_tx_hash_, other->opt_first_tx_hash_);
  swap(opt_first_tx_time_, other->opt_first_tx_time_);
  swap(opt_last_tx_time_, other->opt_last_tx_time_);
  swap(opt_first_tx_height_, other->opt_first_tx_height_);
  swap(opt_last_tx_height_, other->opt_last_tx_height_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  swap(_oneof_case_[2], other->_oneof_case_[2]);
  swap(_oneof_case_[3], other->_oneof_case_[3]);
  swap(_oneof_case_[4], other->_oneof_case_[4]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TxPaginationMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AssetPaginationMeta::_Internal {
 public:
};

AssetPaginationMeta::AssetPaginationMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.AssetPaginationMeta)
}
AssetPaginationMeta::AssetPaginationMeta(const AssetPaginationMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  page_size_ = from.page_size_;
  clear_has_opt_first_asset_id();
  switch (from.opt_first_asset_id_case()) {
    case kFirstAssetId: {
      _internal_set_first_asset_id(from._internal_first_asset_id());
      break;
    }
    case OPT_FIRST_ASSET_ID_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.AssetPaginationMeta)
}

void AssetPaginationMeta::SharedCtor() {
page_size_ = 0u;
clear_has_opt_first_asset_id();
}

AssetPaginationMeta::~AssetPaginationMeta() {
  // @@protoc_insertion_point(destructor:iroha.protocol.AssetPaginationMeta)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AssetPaginationMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_opt_first_asset_id()) {
    clear_opt_first_asset_id();
  }
}

void AssetPaginationMeta::ArenaDtor(void* object) {
  AssetPaginationMeta* _this = reinterpret_cast< AssetPaginationMeta* >(object);
  (void)_this;
}
void AssetPaginationMeta::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AssetPaginationMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AssetPaginationMeta::clear_opt_first_asset_id() {
// @@protoc_insertion_point(one_of_clear_start:iroha.protocol.AssetPaginationMeta)
  switch (opt_first_asset_id_case()) {
    case kFirstAssetId: {
      opt_first_asset_id_.first_asset_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case OPT_FIRST_ASSET_ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPT_FIRST_ASSET_ID_NOT_SET;
}


void AssetPaginationMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.AssetPaginationMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  page_size_ = 0u;
  clear_opt_first_asset_id();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssetPaginationMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 page_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string first_asset_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_first_asset_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.AssetPaginationMeta.first_asset_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AssetPaginationMeta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.AssetPaginationMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 page_size = 1;
  if (this->page_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_page_size(), target);
  }

  // string first_asset_id = 2;
  if (_internal_has_first_asset_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_first_asset_id().data(), static_cast<int>(this->_internal_first_asset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.AssetPaginationMeta.first_asset_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_first_asset_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.AssetPaginationMeta)
  return target;
}

size_t AssetPaginationMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.AssetPaginationMeta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 page_size = 1;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page_size());
  }

  switch (opt_first_asset_id_case()) {
    // string first_asset_id = 2;
    case kFirstAssetId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_first_asset_id());
      break;
    }
    case OPT_FIRST_ASSET_ID_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AssetPaginationMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.AssetPaginationMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const AssetPaginationMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AssetPaginationMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.AssetPaginationMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.AssetPaginationMeta)
    MergeFrom(*source);
  }
}

void AssetPaginationMeta::MergeFrom(const AssetPaginationMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.AssetPaginationMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.page_size() != 0) {
    _internal_set_page_size(from._internal_page_size());
  }
  switch (from.opt_first_asset_id_case()) {
    case kFirstAssetId: {
      _internal_set_first_asset_id(from._internal_first_asset_id());
      break;
    }
    case OPT_FIRST_ASSET_ID_NOT_SET: {
      break;
    }
  }
}

void AssetPaginationMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.AssetPaginationMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssetPaginationMeta::CopyFrom(const AssetPaginationMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.AssetPaginationMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetPaginationMeta::IsInitialized() const {
  return true;
}

void AssetPaginationMeta::InternalSwap(AssetPaginationMeta* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(page_size_, other->page_size_);
  swap(opt_first_asset_id_, other->opt_first_asset_id_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AssetPaginationMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetAccount::_Internal {
 public:
};

GetAccount::GetAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.GetAccount)
}
GetAccount::GetAccount(const GetAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account_id().empty()) {
    account_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.GetAccount)
}

void GetAccount::SharedCtor() {
account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetAccount::~GetAccount() {
  // @@protoc_insertion_point(destructor:iroha.protocol.GetAccount)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetAccount::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  account_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetAccount::ArenaDtor(void* object) {
  GetAccount* _this = reinterpret_cast< GetAccount* >(object);
  (void)_this;
}
void GetAccount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.GetAccount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAccount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.GetAccount.account_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAccount::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.GetAccount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.GetAccount.account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.GetAccount)
  return target;
}

size_t GetAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.GetAccount)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAccount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.GetAccount)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAccount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAccount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.GetAccount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.GetAccount)
    MergeFrom(*source);
  }
}

void GetAccount::MergeFrom(const GetAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.GetAccount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account_id().size() > 0) {
    _internal_set_account_id(from._internal_account_id());
  }
}

void GetAccount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.GetAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAccount::CopyFrom(const GetAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.GetAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccount::IsInitialized() const {
  return true;
}

void GetAccount::InternalSwap(GetAccount* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  account_id_.Swap(&other->account_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAccount::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetBlock::_Internal {
 public:
};

GetBlock::GetBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.GetBlock)
}
GetBlock::GetBlock(const GetBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.GetBlock)
}

void GetBlock::SharedCtor() {
height_ = PROTOBUF_ULONGLONG(0);
}

GetBlock::~GetBlock() {
  // @@protoc_insertion_point(destructor:iroha.protocol.GetBlock)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetBlock::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetBlock::ArenaDtor(void* object) {
  GetBlock* _this = reinterpret_cast< GetBlock* >(object);
  (void)_this;
}
void GetBlock::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.GetBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  height_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBlock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBlock::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.GetBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 height = 1;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.GetBlock)
  return target;
}

size_t GetBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.GetBlock)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 height = 1;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBlock::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.GetBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBlock* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBlock>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.GetBlock)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.GetBlock)
    MergeFrom(*source);
  }
}

void GetBlock::MergeFrom(const GetBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.GetBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
}

void GetBlock::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.GetBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBlock::CopyFrom(const GetBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.GetBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlock::IsInitialized() const {
  return true;
}

void GetBlock::InternalSwap(GetBlock* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlock::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetSignatories::_Internal {
 public:
};

GetSignatories::GetSignatories(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.GetSignatories)
}
GetSignatories::GetSignatories(const GetSignatories& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account_id().empty()) {
    account_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.GetSignatories)
}

void GetSignatories::SharedCtor() {
account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetSignatories::~GetSignatories() {
  // @@protoc_insertion_point(destructor:iroha.protocol.GetSignatories)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetSignatories::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  account_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetSignatories::ArenaDtor(void* object) {
  GetSignatories* _this = reinterpret_cast< GetSignatories* >(object);
  (void)_this;
}
void GetSignatories::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSignatories::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetSignatories::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.GetSignatories)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSignatories::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.GetSignatories.account_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSignatories::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.GetSignatories)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.GetSignatories.account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.GetSignatories)
  return target;
}

size_t GetSignatories::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.GetSignatories)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSignatories::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.GetSignatories)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSignatories* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetSignatories>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.GetSignatories)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.GetSignatories)
    MergeFrom(*source);
  }
}

void GetSignatories::MergeFrom(const GetSignatories& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.GetSignatories)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account_id().size() > 0) {
    _internal_set_account_id(from._internal_account_id());
  }
}

void GetSignatories::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.GetSignatories)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSignatories::CopyFrom(const GetSignatories& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.GetSignatories)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSignatories::IsInitialized() const {
  return true;
}

void GetSignatories::InternalSwap(GetSignatories* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  account_id_.Swap(&other->account_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSignatories::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetAccountTransactions::_Internal {
 public:
  static const ::iroha::protocol::TxPaginationMeta& pagination_meta(const GetAccountTransactions* msg);
};

const ::iroha::protocol::TxPaginationMeta&
GetAccountTransactions::_Internal::pagination_meta(const GetAccountTransactions* msg) {
  return *msg->pagination_meta_;
}
GetAccountTransactions::GetAccountTransactions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.GetAccountTransactions)
}
GetAccountTransactions::GetAccountTransactions(const GetAccountTransactions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account_id().empty()) {
    account_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account_id(), 
      GetArena());
  }
  if (from._internal_has_pagination_meta()) {
    pagination_meta_ = new ::iroha::protocol::TxPaginationMeta(*from.pagination_meta_);
  } else {
    pagination_meta_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.GetAccountTransactions)
}

void GetAccountTransactions::SharedCtor() {
account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pagination_meta_ = nullptr;
}

GetAccountTransactions::~GetAccountTransactions() {
  // @@protoc_insertion_point(destructor:iroha.protocol.GetAccountTransactions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetAccountTransactions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  account_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pagination_meta_;
}

void GetAccountTransactions::ArenaDtor(void* object) {
  GetAccountTransactions* _this = reinterpret_cast< GetAccountTransactions* >(object);
  (void)_this;
}
void GetAccountTransactions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAccountTransactions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetAccountTransactions::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.GetAccountTransactions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_.ClearToEmpty();
  if (GetArena() == nullptr && pagination_meta_ != nullptr) {
    delete pagination_meta_;
  }
  pagination_meta_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAccountTransactions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.GetAccountTransactions.account_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.TxPaginationMeta pagination_meta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAccountTransactions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.GetAccountTransactions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.GetAccountTransactions.account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_id(), target);
  }

  // .iroha.protocol.TxPaginationMeta pagination_meta = 2;
  if (this->has_pagination_meta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pagination_meta(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.GetAccountTransactions)
  return target;
}

size_t GetAccountTransactions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.GetAccountTransactions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  // .iroha.protocol.TxPaginationMeta pagination_meta = 2;
  if (this->has_pagination_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pagination_meta_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAccountTransactions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.GetAccountTransactions)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAccountTransactions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAccountTransactions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.GetAccountTransactions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.GetAccountTransactions)
    MergeFrom(*source);
  }
}

void GetAccountTransactions::MergeFrom(const GetAccountTransactions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.GetAccountTransactions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account_id().size() > 0) {
    _internal_set_account_id(from._internal_account_id());
  }
  if (from.has_pagination_meta()) {
    _internal_mutable_pagination_meta()->::iroha::protocol::TxPaginationMeta::MergeFrom(from._internal_pagination_meta());
  }
}

void GetAccountTransactions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.GetAccountTransactions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAccountTransactions::CopyFrom(const GetAccountTransactions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.GetAccountTransactions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountTransactions::IsInitialized() const {
  return true;
}

void GetAccountTransactions::InternalSwap(GetAccountTransactions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  account_id_.Swap(&other->account_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(pagination_meta_, other->pagination_meta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAccountTransactions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetAccountAssetTransactions::_Internal {
 public:
  static const ::iroha::protocol::TxPaginationMeta& pagination_meta(const GetAccountAssetTransactions* msg);
};

const ::iroha::protocol::TxPaginationMeta&
GetAccountAssetTransactions::_Internal::pagination_meta(const GetAccountAssetTransactions* msg) {
  return *msg->pagination_meta_;
}
GetAccountAssetTransactions::GetAccountAssetTransactions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.GetAccountAssetTransactions)
}
GetAccountAssetTransactions::GetAccountAssetTransactions(const GetAccountAssetTransactions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account_id().empty()) {
    account_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account_id(), 
      GetArena());
  }
  asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset_id().empty()) {
    asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset_id(), 
      GetArena());
  }
  if (from._internal_has_pagination_meta()) {
    pagination_meta_ = new ::iroha::protocol::TxPaginationMeta(*from.pagination_meta_);
  } else {
    pagination_meta_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.GetAccountAssetTransactions)
}

void GetAccountAssetTransactions::SharedCtor() {
account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pagination_meta_ = nullptr;
}

GetAccountAssetTransactions::~GetAccountAssetTransactions() {
  // @@protoc_insertion_point(destructor:iroha.protocol.GetAccountAssetTransactions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetAccountAssetTransactions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  account_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pagination_meta_;
}

void GetAccountAssetTransactions::ArenaDtor(void* object) {
  GetAccountAssetTransactions* _this = reinterpret_cast< GetAccountAssetTransactions* >(object);
  (void)_this;
}
void GetAccountAssetTransactions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAccountAssetTransactions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetAccountAssetTransactions::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.GetAccountAssetTransactions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_.ClearToEmpty();
  asset_id_.ClearToEmpty();
  if (GetArena() == nullptr && pagination_meta_ != nullptr) {
    delete pagination_meta_;
  }
  pagination_meta_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAccountAssetTransactions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.GetAccountAssetTransactions.account_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string asset_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_asset_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.GetAccountAssetTransactions.asset_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.TxPaginationMeta pagination_meta = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAccountAssetTransactions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.GetAccountAssetTransactions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.GetAccountAssetTransactions.account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_id(), target);
  }

  // string asset_id = 2;
  if (this->asset_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset_id().data(), static_cast<int>(this->_internal_asset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.GetAccountAssetTransactions.asset_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_asset_id(), target);
  }

  // .iroha.protocol.TxPaginationMeta pagination_meta = 3;
  if (this->has_pagination_meta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pagination_meta(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.GetAccountAssetTransactions)
  return target;
}

size_t GetAccountAssetTransactions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.GetAccountAssetTransactions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  // string asset_id = 2;
  if (this->asset_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset_id());
  }

  // .iroha.protocol.TxPaginationMeta pagination_meta = 3;
  if (this->has_pagination_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pagination_meta_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAccountAssetTransactions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.GetAccountAssetTransactions)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAccountAssetTransactions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAccountAssetTransactions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.GetAccountAssetTransactions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.GetAccountAssetTransactions)
    MergeFrom(*source);
  }
}

void GetAccountAssetTransactions::MergeFrom(const GetAccountAssetTransactions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.GetAccountAssetTransactions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account_id().size() > 0) {
    _internal_set_account_id(from._internal_account_id());
  }
  if (from.asset_id().size() > 0) {
    _internal_set_asset_id(from._internal_asset_id());
  }
  if (from.has_pagination_meta()) {
    _internal_mutable_pagination_meta()->::iroha::protocol::TxPaginationMeta::MergeFrom(from._internal_pagination_meta());
  }
}

void GetAccountAssetTransactions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.GetAccountAssetTransactions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAccountAssetTransactions::CopyFrom(const GetAccountAssetTransactions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.GetAccountAssetTransactions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountAssetTransactions::IsInitialized() const {
  return true;
}

void GetAccountAssetTransactions::InternalSwap(GetAccountAssetTransactions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  account_id_.Swap(&other->account_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  asset_id_.Swap(&other->asset_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(pagination_meta_, other->pagination_meta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAccountAssetTransactions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetTransactions::_Internal {
 public:
};

GetTransactions::GetTransactions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tx_hashes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.GetTransactions)
}
GetTransactions::GetTransactions(const GetTransactions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tx_hashes_(from.tx_hashes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.GetTransactions)
}

void GetTransactions::SharedCtor() {
}

GetTransactions::~GetTransactions() {
  // @@protoc_insertion_point(destructor:iroha.protocol.GetTransactions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetTransactions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetTransactions::ArenaDtor(void* object) {
  GetTransactions* _this = reinterpret_cast< GetTransactions* >(object);
  (void)_this;
}
void GetTransactions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTransactions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetTransactions::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.GetTransactions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tx_hashes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTransactions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string tx_hashes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tx_hashes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.GetTransactions.tx_hashes"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTransactions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.GetTransactions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string tx_hashes = 1;
  for (int i = 0, n = this->_internal_tx_hashes_size(); i < n; i++) {
    const auto& s = this->_internal_tx_hashes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.GetTransactions.tx_hashes");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.GetTransactions)
  return target;
}

size_t GetTransactions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.GetTransactions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tx_hashes = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tx_hashes_.size());
  for (int i = 0, n = tx_hashes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tx_hashes_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTransactions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.GetTransactions)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTransactions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTransactions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.GetTransactions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.GetTransactions)
    MergeFrom(*source);
  }
}

void GetTransactions::MergeFrom(const GetTransactions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.GetTransactions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tx_hashes_.MergeFrom(from.tx_hashes_);
}

void GetTransactions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.GetTransactions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTransactions::CopyFrom(const GetTransactions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.GetTransactions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTransactions::IsInitialized() const {
  return true;
}

void GetTransactions::InternalSwap(GetTransactions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tx_hashes_.InternalSwap(&other->tx_hashes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTransactions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetAccountAssets::_Internal {
 public:
  static const ::iroha::protocol::AssetPaginationMeta& pagination_meta(const GetAccountAssets* msg);
};

const ::iroha::protocol::AssetPaginationMeta&
GetAccountAssets::_Internal::pagination_meta(const GetAccountAssets* msg) {
  return *msg->pagination_meta_;
}
GetAccountAssets::GetAccountAssets(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.GetAccountAssets)
}
GetAccountAssets::GetAccountAssets(const GetAccountAssets& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account_id().empty()) {
    account_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account_id(), 
      GetArena());
  }
  if (from._internal_has_pagination_meta()) {
    pagination_meta_ = new ::iroha::protocol::AssetPaginationMeta(*from.pagination_meta_);
  } else {
    pagination_meta_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.GetAccountAssets)
}

void GetAccountAssets::SharedCtor() {
account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pagination_meta_ = nullptr;
}

GetAccountAssets::~GetAccountAssets() {
  // @@protoc_insertion_point(destructor:iroha.protocol.GetAccountAssets)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetAccountAssets::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  account_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pagination_meta_;
}

void GetAccountAssets::ArenaDtor(void* object) {
  GetAccountAssets* _this = reinterpret_cast< GetAccountAssets* >(object);
  (void)_this;
}
void GetAccountAssets::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAccountAssets::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetAccountAssets::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.GetAccountAssets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_.ClearToEmpty();
  if (GetArena() == nullptr && pagination_meta_ != nullptr) {
    delete pagination_meta_;
  }
  pagination_meta_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAccountAssets::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.GetAccountAssets.account_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.AssetPaginationMeta pagination_meta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAccountAssets::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.GetAccountAssets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.GetAccountAssets.account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_id(), target);
  }

  // .iroha.protocol.AssetPaginationMeta pagination_meta = 2;
  if (this->has_pagination_meta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pagination_meta(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.GetAccountAssets)
  return target;
}

size_t GetAccountAssets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.GetAccountAssets)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  // .iroha.protocol.AssetPaginationMeta pagination_meta = 2;
  if (this->has_pagination_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pagination_meta_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAccountAssets::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.GetAccountAssets)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAccountAssets* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAccountAssets>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.GetAccountAssets)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.GetAccountAssets)
    MergeFrom(*source);
  }
}

void GetAccountAssets::MergeFrom(const GetAccountAssets& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.GetAccountAssets)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account_id().size() > 0) {
    _internal_set_account_id(from._internal_account_id());
  }
  if (from.has_pagination_meta()) {
    _internal_mutable_pagination_meta()->::iroha::protocol::AssetPaginationMeta::MergeFrom(from._internal_pagination_meta());
  }
}

void GetAccountAssets::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.GetAccountAssets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAccountAssets::CopyFrom(const GetAccountAssets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.GetAccountAssets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountAssets::IsInitialized() const {
  return true;
}

void GetAccountAssets::InternalSwap(GetAccountAssets* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  account_id_.Swap(&other->account_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(pagination_meta_, other->pagination_meta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAccountAssets::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AccountDetailPaginationMeta::_Internal {
 public:
  static const ::iroha::protocol::AccountDetailRecordId& first_record_id(const AccountDetailPaginationMeta* msg);
};

const ::iroha::protocol::AccountDetailRecordId&
AccountDetailPaginationMeta::_Internal::first_record_id(const AccountDetailPaginationMeta* msg) {
  return *msg->first_record_id_;
}
void AccountDetailPaginationMeta::clear_first_record_id() {
  if (GetArena() == nullptr && first_record_id_ != nullptr) {
    delete first_record_id_;
  }
  first_record_id_ = nullptr;
}
AccountDetailPaginationMeta::AccountDetailPaginationMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.AccountDetailPaginationMeta)
}
AccountDetailPaginationMeta::AccountDetailPaginationMeta(const AccountDetailPaginationMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_first_record_id()) {
    first_record_id_ = new ::iroha::protocol::AccountDetailRecordId(*from.first_record_id_);
  } else {
    first_record_id_ = nullptr;
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.AccountDetailPaginationMeta)
}

void AccountDetailPaginationMeta::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&first_record_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&page_size_) -
    reinterpret_cast<char*>(&first_record_id_)) + sizeof(page_size_));
}

AccountDetailPaginationMeta::~AccountDetailPaginationMeta() {
  // @@protoc_insertion_point(destructor:iroha.protocol.AccountDetailPaginationMeta)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AccountDetailPaginationMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete first_record_id_;
}

void AccountDetailPaginationMeta::ArenaDtor(void* object) {
  AccountDetailPaginationMeta* _this = reinterpret_cast< AccountDetailPaginationMeta* >(object);
  (void)_this;
}
void AccountDetailPaginationMeta::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountDetailPaginationMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AccountDetailPaginationMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.AccountDetailPaginationMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && first_record_id_ != nullptr) {
    delete first_record_id_;
  }
  first_record_id_ = nullptr;
  page_size_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountDetailPaginationMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 page_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.AccountDetailRecordId first_record_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_first_record_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountDetailPaginationMeta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.AccountDetailPaginationMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 page_size = 1;
  if (this->page_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_page_size(), target);
  }

  // .iroha.protocol.AccountDetailRecordId first_record_id = 2;
  if (this->has_first_record_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::first_record_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.AccountDetailPaginationMeta)
  return target;
}

size_t AccountDetailPaginationMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.AccountDetailPaginationMeta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .iroha.protocol.AccountDetailRecordId first_record_id = 2;
  if (this->has_first_record_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *first_record_id_);
  }

  // uint32 page_size = 1;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountDetailPaginationMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.AccountDetailPaginationMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountDetailPaginationMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountDetailPaginationMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.AccountDetailPaginationMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.AccountDetailPaginationMeta)
    MergeFrom(*source);
  }
}

void AccountDetailPaginationMeta::MergeFrom(const AccountDetailPaginationMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.AccountDetailPaginationMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_first_record_id()) {
    _internal_mutable_first_record_id()->::iroha::protocol::AccountDetailRecordId::MergeFrom(from._internal_first_record_id());
  }
  if (from.page_size() != 0) {
    _internal_set_page_size(from._internal_page_size());
  }
}

void AccountDetailPaginationMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.AccountDetailPaginationMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountDetailPaginationMeta::CopyFrom(const AccountDetailPaginationMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.AccountDetailPaginationMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountDetailPaginationMeta::IsInitialized() const {
  return true;
}

void AccountDetailPaginationMeta::InternalSwap(AccountDetailPaginationMeta* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccountDetailPaginationMeta, page_size_)
      + sizeof(AccountDetailPaginationMeta::page_size_)
      - PROTOBUF_FIELD_OFFSET(AccountDetailPaginationMeta, first_record_id_)>(
          reinterpret_cast<char*>(&first_record_id_),
          reinterpret_cast<char*>(&other->first_record_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountDetailPaginationMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetAccountDetail::_Internal {
 public:
  static const ::iroha::protocol::AccountDetailPaginationMeta& pagination_meta(const GetAccountDetail* msg);
};

const ::iroha::protocol::AccountDetailPaginationMeta&
GetAccountDetail::_Internal::pagination_meta(const GetAccountDetail* msg) {
  return *msg->pagination_meta_;
}
GetAccountDetail::GetAccountDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.GetAccountDetail)
}
GetAccountDetail::GetAccountDetail(const GetAccountDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pagination_meta()) {
    pagination_meta_ = new ::iroha::protocol::AccountDetailPaginationMeta(*from.pagination_meta_);
  } else {
    pagination_meta_ = nullptr;
  }
  clear_has_opt_account_id();
  switch (from.opt_account_id_case()) {
    case kAccountId: {
      _internal_set_account_id(from._internal_account_id());
      break;
    }
    case OPT_ACCOUNT_ID_NOT_SET: {
      break;
    }
  }
  clear_has_opt_key();
  switch (from.opt_key_case()) {
    case kKey: {
      _internal_set_key(from._internal_key());
      break;
    }
    case OPT_KEY_NOT_SET: {
      break;
    }
  }
  clear_has_opt_writer();
  switch (from.opt_writer_case()) {
    case kWriter: {
      _internal_set_writer(from._internal_writer());
      break;
    }
    case OPT_WRITER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.GetAccountDetail)
}

void GetAccountDetail::SharedCtor() {
pagination_meta_ = nullptr;
clear_has_opt_account_id();
clear_has_opt_key();
clear_has_opt_writer();
}

GetAccountDetail::~GetAccountDetail() {
  // @@protoc_insertion_point(destructor:iroha.protocol.GetAccountDetail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetAccountDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pagination_meta_;
  if (has_opt_account_id()) {
    clear_opt_account_id();
  }
  if (has_opt_key()) {
    clear_opt_key();
  }
  if (has_opt_writer()) {
    clear_opt_writer();
  }
}

void GetAccountDetail::ArenaDtor(void* object) {
  GetAccountDetail* _this = reinterpret_cast< GetAccountDetail* >(object);
  (void)_this;
}
void GetAccountDetail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAccountDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetAccountDetail::clear_opt_account_id() {
// @@protoc_insertion_point(one_of_clear_start:iroha.protocol.GetAccountDetail)
  switch (opt_account_id_case()) {
    case kAccountId: {
      opt_account_id_.account_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case OPT_ACCOUNT_ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPT_ACCOUNT_ID_NOT_SET;
}

void GetAccountDetail::clear_opt_key() {
// @@protoc_insertion_point(one_of_clear_start:iroha.protocol.GetAccountDetail)
  switch (opt_key_case()) {
    case kKey: {
      opt_key_.key_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case OPT_KEY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = OPT_KEY_NOT_SET;
}

void GetAccountDetail::clear_opt_writer() {
// @@protoc_insertion_point(one_of_clear_start:iroha.protocol.GetAccountDetail)
  switch (opt_writer_case()) {
    case kWriter: {
      opt_writer_.writer_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case OPT_WRITER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = OPT_WRITER_NOT_SET;
}


void GetAccountDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.GetAccountDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && pagination_meta_ != nullptr) {
    delete pagination_meta_;
  }
  pagination_meta_ = nullptr;
  clear_opt_account_id();
  clear_opt_key();
  clear_opt_writer();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAccountDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.GetAccountDetail.account_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.GetAccountDetail.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string writer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_writer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.GetAccountDetail.writer"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.AccountDetailPaginationMeta pagination_meta = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAccountDetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.GetAccountDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1;
  if (_internal_has_account_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.GetAccountDetail.account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_id(), target);
  }

  // string key = 2;
  if (_internal_has_key()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.GetAccountDetail.key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  // string writer = 3;
  if (_internal_has_writer()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_writer().data(), static_cast<int>(this->_internal_writer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.GetAccountDetail.writer");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_writer(), target);
  }

  // .iroha.protocol.AccountDetailPaginationMeta pagination_meta = 4;
  if (this->has_pagination_meta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::pagination_meta(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.GetAccountDetail)
  return target;
}

size_t GetAccountDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.GetAccountDetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .iroha.protocol.AccountDetailPaginationMeta pagination_meta = 4;
  if (this->has_pagination_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pagination_meta_);
  }

  switch (opt_account_id_case()) {
    // string account_id = 1;
    case kAccountId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_account_id());
      break;
    }
    case OPT_ACCOUNT_ID_NOT_SET: {
      break;
    }
  }
  switch (opt_key_case()) {
    // string key = 2;
    case kKey: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
      break;
    }
    case OPT_KEY_NOT_SET: {
      break;
    }
  }
  switch (opt_writer_case()) {
    // string writer = 3;
    case kWriter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_writer());
      break;
    }
    case OPT_WRITER_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAccountDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.GetAccountDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAccountDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAccountDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.GetAccountDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.GetAccountDetail)
    MergeFrom(*source);
  }
}

void GetAccountDetail::MergeFrom(const GetAccountDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.GetAccountDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pagination_meta()) {
    _internal_mutable_pagination_meta()->::iroha::protocol::AccountDetailPaginationMeta::MergeFrom(from._internal_pagination_meta());
  }
  switch (from.opt_account_id_case()) {
    case kAccountId: {
      _internal_set_account_id(from._internal_account_id());
      break;
    }
    case OPT_ACCOUNT_ID_NOT_SET: {
      break;
    }
  }
  switch (from.opt_key_case()) {
    case kKey: {
      _internal_set_key(from._internal_key());
      break;
    }
    case OPT_KEY_NOT_SET: {
      break;
    }
  }
  switch (from.opt_writer_case()) {
    case kWriter: {
      _internal_set_writer(from._internal_writer());
      break;
    }
    case OPT_WRITER_NOT_SET: {
      break;
    }
  }
}

void GetAccountDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.GetAccountDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAccountDetail::CopyFrom(const GetAccountDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.GetAccountDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountDetail::IsInitialized() const {
  return true;
}

void GetAccountDetail::InternalSwap(GetAccountDetail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(pagination_meta_, other->pagination_meta_);
  swap(opt_account_id_, other->opt_account_id_);
  swap(opt_key_, other->opt_key_);
  swap(opt_writer_, other->opt_writer_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  swap(_oneof_case_[2], other->_oneof_case_[2]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAccountDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetAssetInfo::_Internal {
 public:
};

GetAssetInfo::GetAssetInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.GetAssetInfo)
}
GetAssetInfo::GetAssetInfo(const GetAssetInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset_id().empty()) {
    asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.GetAssetInfo)
}

void GetAssetInfo::SharedCtor() {
asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetAssetInfo::~GetAssetInfo() {
  // @@protoc_insertion_point(destructor:iroha.protocol.GetAssetInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetAssetInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  asset_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetAssetInfo::ArenaDtor(void* object) {
  GetAssetInfo* _this = reinterpret_cast< GetAssetInfo* >(object);
  (void)_this;
}
void GetAssetInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAssetInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetAssetInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.GetAssetInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  asset_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAssetInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string asset_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_asset_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.GetAssetInfo.asset_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAssetInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.GetAssetInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string asset_id = 1;
  if (this->asset_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset_id().data(), static_cast<int>(this->_internal_asset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.GetAssetInfo.asset_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_asset_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.GetAssetInfo)
  return target;
}

size_t GetAssetInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.GetAssetInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string asset_id = 1;
  if (this->asset_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAssetInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.GetAssetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAssetInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAssetInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.GetAssetInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.GetAssetInfo)
    MergeFrom(*source);
  }
}

void GetAssetInfo::MergeFrom(const GetAssetInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.GetAssetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.asset_id().size() > 0) {
    _internal_set_asset_id(from._internal_asset_id());
  }
}

void GetAssetInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.GetAssetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAssetInfo::CopyFrom(const GetAssetInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.GetAssetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAssetInfo::IsInitialized() const {
  return true;
}

void GetAssetInfo::InternalSwap(GetAssetInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  asset_id_.Swap(&other->asset_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAssetInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetRoles::_Internal {
 public:
};

GetRoles::GetRoles(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.GetRoles)
}
GetRoles::GetRoles(const GetRoles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.GetRoles)
}

void GetRoles::SharedCtor() {
}

GetRoles::~GetRoles() {
  // @@protoc_insertion_point(destructor:iroha.protocol.GetRoles)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetRoles::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetRoles::ArenaDtor(void* object) {
  GetRoles* _this = reinterpret_cast< GetRoles* >(object);
  (void)_this;
}
void GetRoles::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetRoles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetRoles::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.GetRoles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRoles::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRoles::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.GetRoles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.GetRoles)
  return target;
}

size_t GetRoles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.GetRoles)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRoles::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.GetRoles)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRoles* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetRoles>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.GetRoles)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.GetRoles)
    MergeFrom(*source);
  }
}

void GetRoles::MergeFrom(const GetRoles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.GetRoles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetRoles::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.GetRoles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRoles::CopyFrom(const GetRoles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.GetRoles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRoles::IsInitialized() const {
  return true;
}

void GetRoles::InternalSwap(GetRoles* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRoles::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetRolePermissions::_Internal {
 public:
};

GetRolePermissions::GetRolePermissions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.GetRolePermissions)
}
GetRolePermissions::GetRolePermissions(const GetRolePermissions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  role_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_role_id().empty()) {
    role_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_role_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.GetRolePermissions)
}

void GetRolePermissions::SharedCtor() {
role_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetRolePermissions::~GetRolePermissions() {
  // @@protoc_insertion_point(destructor:iroha.protocol.GetRolePermissions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetRolePermissions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  role_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetRolePermissions::ArenaDtor(void* object) {
  GetRolePermissions* _this = reinterpret_cast< GetRolePermissions* >(object);
  (void)_this;
}
void GetRolePermissions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetRolePermissions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetRolePermissions::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.GetRolePermissions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRolePermissions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string role_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_role_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.GetRolePermissions.role_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRolePermissions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.GetRolePermissions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string role_id = 1;
  if (this->role_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role_id().data(), static_cast<int>(this->_internal_role_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.GetRolePermissions.role_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_role_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.GetRolePermissions)
  return target;
}

size_t GetRolePermissions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.GetRolePermissions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string role_id = 1;
  if (this->role_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_role_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRolePermissions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.GetRolePermissions)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRolePermissions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetRolePermissions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.GetRolePermissions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.GetRolePermissions)
    MergeFrom(*source);
  }
}

void GetRolePermissions::MergeFrom(const GetRolePermissions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.GetRolePermissions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.role_id().size() > 0) {
    _internal_set_role_id(from._internal_role_id());
  }
}

void GetRolePermissions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.GetRolePermissions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRolePermissions::CopyFrom(const GetRolePermissions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.GetRolePermissions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRolePermissions::IsInitialized() const {
  return true;
}

void GetRolePermissions::InternalSwap(GetRolePermissions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  role_id_.Swap(&other->role_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRolePermissions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetPendingTransactions::_Internal {
 public:
  static const ::iroha::protocol::TxPaginationMeta& pagination_meta(const GetPendingTransactions* msg);
};

const ::iroha::protocol::TxPaginationMeta&
GetPendingTransactions::_Internal::pagination_meta(const GetPendingTransactions* msg) {
  return *msg->pagination_meta_;
}
GetPendingTransactions::GetPendingTransactions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.GetPendingTransactions)
}
GetPendingTransactions::GetPendingTransactions(const GetPendingTransactions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pagination_meta()) {
    pagination_meta_ = new ::iroha::protocol::TxPaginationMeta(*from.pagination_meta_);
  } else {
    pagination_meta_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.GetPendingTransactions)
}

void GetPendingTransactions::SharedCtor() {
pagination_meta_ = nullptr;
}

GetPendingTransactions::~GetPendingTransactions() {
  // @@protoc_insertion_point(destructor:iroha.protocol.GetPendingTransactions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetPendingTransactions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pagination_meta_;
}

void GetPendingTransactions::ArenaDtor(void* object) {
  GetPendingTransactions* _this = reinterpret_cast< GetPendingTransactions* >(object);
  (void)_this;
}
void GetPendingTransactions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPendingTransactions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetPendingTransactions::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.GetPendingTransactions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && pagination_meta_ != nullptr) {
    delete pagination_meta_;
  }
  pagination_meta_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPendingTransactions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .iroha.protocol.TxPaginationMeta pagination_meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPendingTransactions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.GetPendingTransactions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .iroha.protocol.TxPaginationMeta pagination_meta = 1;
  if (this->has_pagination_meta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pagination_meta(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.GetPendingTransactions)
  return target;
}

size_t GetPendingTransactions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.GetPendingTransactions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .iroha.protocol.TxPaginationMeta pagination_meta = 1;
  if (this->has_pagination_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pagination_meta_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPendingTransactions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.GetPendingTransactions)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPendingTransactions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPendingTransactions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.GetPendingTransactions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.GetPendingTransactions)
    MergeFrom(*source);
  }
}

void GetPendingTransactions::MergeFrom(const GetPendingTransactions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.GetPendingTransactions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pagination_meta()) {
    _internal_mutable_pagination_meta()->::iroha::protocol::TxPaginationMeta::MergeFrom(from._internal_pagination_meta());
  }
}

void GetPendingTransactions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.GetPendingTransactions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPendingTransactions::CopyFrom(const GetPendingTransactions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.GetPendingTransactions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPendingTransactions::IsInitialized() const {
  return true;
}

void GetPendingTransactions::InternalSwap(GetPendingTransactions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(pagination_meta_, other->pagination_meta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPendingTransactions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetPeers::_Internal {
 public:
};

GetPeers::GetPeers(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.GetPeers)
}
GetPeers::GetPeers(const GetPeers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.GetPeers)
}

void GetPeers::SharedCtor() {
}

GetPeers::~GetPeers() {
  // @@protoc_insertion_point(destructor:iroha.protocol.GetPeers)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetPeers::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetPeers::ArenaDtor(void* object) {
  GetPeers* _this = reinterpret_cast< GetPeers* >(object);
  (void)_this;
}
void GetPeers::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPeers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetPeers::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.GetPeers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPeers::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPeers::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.GetPeers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.GetPeers)
  return target;
}

size_t GetPeers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.GetPeers)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPeers::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.GetPeers)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPeers* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPeers>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.GetPeers)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.GetPeers)
    MergeFrom(*source);
  }
}

void GetPeers::MergeFrom(const GetPeers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.GetPeers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetPeers::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.GetPeers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPeers::CopyFrom(const GetPeers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.GetPeers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPeers::IsInitialized() const {
  return true;
}

void GetPeers::InternalSwap(GetPeers* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPeers::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class QueryPayloadMeta::_Internal {
 public:
};

QueryPayloadMeta::QueryPayloadMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.QueryPayloadMeta)
}
QueryPayloadMeta::QueryPayloadMeta(const QueryPayloadMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  creator_account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_creator_account_id().empty()) {
    creator_account_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_creator_account_id(), 
      GetArena());
  }
  ::memcpy(&created_time_, &from.created_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&query_counter_) -
    reinterpret_cast<char*>(&created_time_)) + sizeof(query_counter_));
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.QueryPayloadMeta)
}

void QueryPayloadMeta::SharedCtor() {
creator_account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&created_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&query_counter_) -
    reinterpret_cast<char*>(&created_time_)) + sizeof(query_counter_));
}

QueryPayloadMeta::~QueryPayloadMeta() {
  // @@protoc_insertion_point(destructor:iroha.protocol.QueryPayloadMeta)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QueryPayloadMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  creator_account_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void QueryPayloadMeta::ArenaDtor(void* object) {
  QueryPayloadMeta* _this = reinterpret_cast< QueryPayloadMeta* >(object);
  (void)_this;
}
void QueryPayloadMeta::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryPayloadMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QueryPayloadMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.QueryPayloadMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  creator_account_id_.ClearToEmpty();
  ::memset(&created_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&query_counter_) -
      reinterpret_cast<char*>(&created_time_)) + sizeof(query_counter_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryPayloadMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 created_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          created_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string creator_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_creator_account_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.QueryPayloadMeta.creator_account_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 query_counter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          query_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryPayloadMeta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.QueryPayloadMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 created_time = 1;
  if (this->created_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_created_time(), target);
  }

  // string creator_account_id = 2;
  if (this->creator_account_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_creator_account_id().data(), static_cast<int>(this->_internal_creator_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.QueryPayloadMeta.creator_account_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_creator_account_id(), target);
  }

  // uint64 query_counter = 3;
  if (this->query_counter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_query_counter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.QueryPayloadMeta)
  return target;
}

size_t QueryPayloadMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.QueryPayloadMeta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string creator_account_id = 2;
  if (this->creator_account_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_creator_account_id());
  }

  // uint64 created_time = 1;
  if (this->created_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_created_time());
  }

  // uint64 query_counter = 3;
  if (this->query_counter() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_query_counter());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryPayloadMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.QueryPayloadMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryPayloadMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryPayloadMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.QueryPayloadMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.QueryPayloadMeta)
    MergeFrom(*source);
  }
}

void QueryPayloadMeta::MergeFrom(const QueryPayloadMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.QueryPayloadMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.creator_account_id().size() > 0) {
    _internal_set_creator_account_id(from._internal_creator_account_id());
  }
  if (from.created_time() != 0) {
    _internal_set_created_time(from._internal_created_time());
  }
  if (from.query_counter() != 0) {
    _internal_set_query_counter(from._internal_query_counter());
  }
}

void QueryPayloadMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.QueryPayloadMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryPayloadMeta::CopyFrom(const QueryPayloadMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.QueryPayloadMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPayloadMeta::IsInitialized() const {
  return true;
}

void QueryPayloadMeta::InternalSwap(QueryPayloadMeta* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  creator_account_id_.Swap(&other->creator_account_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryPayloadMeta, query_counter_)
      + sizeof(QueryPayloadMeta::query_counter_)
      - PROTOBUF_FIELD_OFFSET(QueryPayloadMeta, created_time_)>(
          reinterpret_cast<char*>(&created_time_),
          reinterpret_cast<char*>(&other->created_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryPayloadMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetEngineReceipts::_Internal {
 public:
};

GetEngineReceipts::GetEngineReceipts(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.GetEngineReceipts)
}
GetEngineReceipts::GetEngineReceipts(const GetEngineReceipts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tx_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tx_hash().empty()) {
    tx_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tx_hash(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.GetEngineReceipts)
}

void GetEngineReceipts::SharedCtor() {
tx_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetEngineReceipts::~GetEngineReceipts() {
  // @@protoc_insertion_point(destructor:iroha.protocol.GetEngineReceipts)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetEngineReceipts::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tx_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetEngineReceipts::ArenaDtor(void* object) {
  GetEngineReceipts* _this = reinterpret_cast< GetEngineReceipts* >(object);
  (void)_this;
}
void GetEngineReceipts::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetEngineReceipts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetEngineReceipts::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.GetEngineReceipts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tx_hash_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetEngineReceipts::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tx_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tx_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.GetEngineReceipts.tx_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetEngineReceipts::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.GetEngineReceipts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tx_hash = 1;
  if (this->tx_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tx_hash().data(), static_cast<int>(this->_internal_tx_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.GetEngineReceipts.tx_hash");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tx_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.GetEngineReceipts)
  return target;
}

size_t GetEngineReceipts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.GetEngineReceipts)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tx_hash = 1;
  if (this->tx_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tx_hash());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetEngineReceipts::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.GetEngineReceipts)
  GOOGLE_DCHECK_NE(&from, this);
  const GetEngineReceipts* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetEngineReceipts>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.GetEngineReceipts)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.GetEngineReceipts)
    MergeFrom(*source);
  }
}

void GetEngineReceipts::MergeFrom(const GetEngineReceipts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.GetEngineReceipts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tx_hash().size() > 0) {
    _internal_set_tx_hash(from._internal_tx_hash());
  }
}

void GetEngineReceipts::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.GetEngineReceipts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEngineReceipts::CopyFrom(const GetEngineReceipts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.GetEngineReceipts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEngineReceipts::IsInitialized() const {
  return true;
}

void GetEngineReceipts::InternalSwap(GetEngineReceipts* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tx_hash_.Swap(&other->tx_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEngineReceipts::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Query_Payload::_Internal {
 public:
  static const ::iroha::protocol::QueryPayloadMeta& meta(const Query_Payload* msg);
  static const ::iroha::protocol::GetAccount& get_account(const Query_Payload* msg);
  static const ::iroha::protocol::GetSignatories& get_signatories(const Query_Payload* msg);
  static const ::iroha::protocol::GetAccountTransactions& get_account_transactions(const Query_Payload* msg);
  static const ::iroha::protocol::GetAccountAssetTransactions& get_account_asset_transactions(const Query_Payload* msg);
  static const ::iroha::protocol::GetTransactions& get_transactions(const Query_Payload* msg);
  static const ::iroha::protocol::GetAccountAssets& get_account_assets(const Query_Payload* msg);
  static const ::iroha::protocol::GetAccountDetail& get_account_detail(const Query_Payload* msg);
  static const ::iroha::protocol::GetRoles& get_roles(const Query_Payload* msg);
  static const ::iroha::protocol::GetRolePermissions& get_role_permissions(const Query_Payload* msg);
  static const ::iroha::protocol::GetAssetInfo& get_asset_info(const Query_Payload* msg);
  static const ::iroha::protocol::GetPendingTransactions& get_pending_transactions(const Query_Payload* msg);
  static const ::iroha::protocol::GetBlock& get_block(const Query_Payload* msg);
  static const ::iroha::protocol::GetPeers& get_peers(const Query_Payload* msg);
  static const ::iroha::protocol::GetEngineReceipts& get_engine_receipts(const Query_Payload* msg);
};

const ::iroha::protocol::QueryPayloadMeta&
Query_Payload::_Internal::meta(const Query_Payload* msg) {
  return *msg->meta_;
}
const ::iroha::protocol::GetAccount&
Query_Payload::_Internal::get_account(const Query_Payload* msg) {
  return *msg->query_.get_account_;
}
const ::iroha::protocol::GetSignatories&
Query_Payload::_Internal::get_signatories(const Query_Payload* msg) {
  return *msg->query_.get_signatories_;
}
const ::iroha::protocol::GetAccountTransactions&
Query_Payload::_Internal::get_account_transactions(const Query_Payload* msg) {
  return *msg->query_.get_account_transactions_;
}
const ::iroha::protocol::GetAccountAssetTransactions&
Query_Payload::_Internal::get_account_asset_transactions(const Query_Payload* msg) {
  return *msg->query_.get_account_asset_transactions_;
}
const ::iroha::protocol::GetTransactions&
Query_Payload::_Internal::get_transactions(const Query_Payload* msg) {
  return *msg->query_.get_transactions_;
}
const ::iroha::protocol::GetAccountAssets&
Query_Payload::_Internal::get_account_assets(const Query_Payload* msg) {
  return *msg->query_.get_account_assets_;
}
const ::iroha::protocol::GetAccountDetail&
Query_Payload::_Internal::get_account_detail(const Query_Payload* msg) {
  return *msg->query_.get_account_detail_;
}
const ::iroha::protocol::GetRoles&
Query_Payload::_Internal::get_roles(const Query_Payload* msg) {
  return *msg->query_.get_roles_;
}
const ::iroha::protocol::GetRolePermissions&
Query_Payload::_Internal::get_role_permissions(const Query_Payload* msg) {
  return *msg->query_.get_role_permissions_;
}
const ::iroha::protocol::GetAssetInfo&
Query_Payload::_Internal::get_asset_info(const Query_Payload* msg) {
  return *msg->query_.get_asset_info_;
}
const ::iroha::protocol::GetPendingTransactions&
Query_Payload::_Internal::get_pending_transactions(const Query_Payload* msg) {
  return *msg->query_.get_pending_transactions_;
}
const ::iroha::protocol::GetBlock&
Query_Payload::_Internal::get_block(const Query_Payload* msg) {
  return *msg->query_.get_block_;
}
const ::iroha::protocol::GetPeers&
Query_Payload::_Internal::get_peers(const Query_Payload* msg) {
  return *msg->query_.get_peers_;
}
const ::iroha::protocol::GetEngineReceipts&
Query_Payload::_Internal::get_engine_receipts(const Query_Payload* msg) {
  return *msg->query_.get_engine_receipts_;
}
void Query_Payload::set_allocated_get_account(::iroha::protocol::GetAccount* get_account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_query();
  if (get_account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_account);
    if (message_arena != submessage_arena) {
      get_account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_account, submessage_arena);
    }
    set_has_get_account();
    query_.get_account_ = get_account;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Query.Payload.get_account)
}
void Query_Payload::set_allocated_get_signatories(::iroha::protocol::GetSignatories* get_signatories) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_query();
  if (get_signatories) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_signatories);
    if (message_arena != submessage_arena) {
      get_signatories = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_signatories, submessage_arena);
    }
    set_has_get_signatories();
    query_.get_signatories_ = get_signatories;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Query.Payload.get_signatories)
}
void Query_Payload::set_allocated_get_account_transactions(::iroha::protocol::GetAccountTransactions* get_account_transactions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_query();
  if (get_account_transactions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_account_transactions);
    if (message_arena != submessage_arena) {
      get_account_transactions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_account_transactions, submessage_arena);
    }
    set_has_get_account_transactions();
    query_.get_account_transactions_ = get_account_transactions;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Query.Payload.get_account_transactions)
}
void Query_Payload::set_allocated_get_account_asset_transactions(::iroha::protocol::GetAccountAssetTransactions* get_account_asset_transactions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_query();
  if (get_account_asset_transactions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_account_asset_transactions);
    if (message_arena != submessage_arena) {
      get_account_asset_transactions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_account_asset_transactions, submessage_arena);
    }
    set_has_get_account_asset_transactions();
    query_.get_account_asset_transactions_ = get_account_asset_transactions;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Query.Payload.get_account_asset_transactions)
}
void Query_Payload::set_allocated_get_transactions(::iroha::protocol::GetTransactions* get_transactions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_query();
  if (get_transactions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_transactions);
    if (message_arena != submessage_arena) {
      get_transactions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_transactions, submessage_arena);
    }
    set_has_get_transactions();
    query_.get_transactions_ = get_transactions;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Query.Payload.get_transactions)
}
void Query_Payload::set_allocated_get_account_assets(::iroha::protocol::GetAccountAssets* get_account_assets) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_query();
  if (get_account_assets) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_account_assets);
    if (message_arena != submessage_arena) {
      get_account_assets = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_account_assets, submessage_arena);
    }
    set_has_get_account_assets();
    query_.get_account_assets_ = get_account_assets;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Query.Payload.get_account_assets)
}
void Query_Payload::set_allocated_get_account_detail(::iroha::protocol::GetAccountDetail* get_account_detail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_query();
  if (get_account_detail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_account_detail);
    if (message_arena != submessage_arena) {
      get_account_detail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_account_detail, submessage_arena);
    }
    set_has_get_account_detail();
    query_.get_account_detail_ = get_account_detail;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Query.Payload.get_account_detail)
}
void Query_Payload::set_allocated_get_roles(::iroha::protocol::GetRoles* get_roles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_query();
  if (get_roles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_roles);
    if (message_arena != submessage_arena) {
      get_roles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_roles, submessage_arena);
    }
    set_has_get_roles();
    query_.get_roles_ = get_roles;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Query.Payload.get_roles)
}
void Query_Payload::set_allocated_get_role_permissions(::iroha::protocol::GetRolePermissions* get_role_permissions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_query();
  if (get_role_permissions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_role_permissions);
    if (message_arena != submessage_arena) {
      get_role_permissions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_role_permissions, submessage_arena);
    }
    set_has_get_role_permissions();
    query_.get_role_permissions_ = get_role_permissions;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Query.Payload.get_role_permissions)
}
void Query_Payload::set_allocated_get_asset_info(::iroha::protocol::GetAssetInfo* get_asset_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_query();
  if (get_asset_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_asset_info);
    if (message_arena != submessage_arena) {
      get_asset_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_asset_info, submessage_arena);
    }
    set_has_get_asset_info();
    query_.get_asset_info_ = get_asset_info;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Query.Payload.get_asset_info)
}
void Query_Payload::set_allocated_get_pending_transactions(::iroha::protocol::GetPendingTransactions* get_pending_transactions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_query();
  if (get_pending_transactions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_pending_transactions);
    if (message_arena != submessage_arena) {
      get_pending_transactions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_pending_transactions, submessage_arena);
    }
    set_has_get_pending_transactions();
    query_.get_pending_transactions_ = get_pending_transactions;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Query.Payload.get_pending_transactions)
}
void Query_Payload::set_allocated_get_block(::iroha::protocol::GetBlock* get_block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_query();
  if (get_block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_block);
    if (message_arena != submessage_arena) {
      get_block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_block, submessage_arena);
    }
    set_has_get_block();
    query_.get_block_ = get_block;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Query.Payload.get_block)
}
void Query_Payload::set_allocated_get_peers(::iroha::protocol::GetPeers* get_peers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_query();
  if (get_peers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_peers);
    if (message_arena != submessage_arena) {
      get_peers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_peers, submessage_arena);
    }
    set_has_get_peers();
    query_.get_peers_ = get_peers;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Query.Payload.get_peers)
}
void Query_Payload::set_allocated_get_engine_receipts(::iroha::protocol::GetEngineReceipts* get_engine_receipts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_query();
  if (get_engine_receipts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_engine_receipts);
    if (message_arena != submessage_arena) {
      get_engine_receipts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_engine_receipts, submessage_arena);
    }
    set_has_get_engine_receipts();
    query_.get_engine_receipts_ = get_engine_receipts;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Query.Payload.get_engine_receipts)
}
Query_Payload::Query_Payload(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.Query.Payload)
}
Query_Payload::Query_Payload(const Query_Payload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_meta()) {
    meta_ = new ::iroha::protocol::QueryPayloadMeta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  clear_has_query();
  switch (from.query_case()) {
    case kGetAccount: {
      _internal_mutable_get_account()->::iroha::protocol::GetAccount::MergeFrom(from._internal_get_account());
      break;
    }
    case kGetSignatories: {
      _internal_mutable_get_signatories()->::iroha::protocol::GetSignatories::MergeFrom(from._internal_get_signatories());
      break;
    }
    case kGetAccountTransactions: {
      _internal_mutable_get_account_transactions()->::iroha::protocol::GetAccountTransactions::MergeFrom(from._internal_get_account_transactions());
      break;
    }
    case kGetAccountAssetTransactions: {
      _internal_mutable_get_account_asset_transactions()->::iroha::protocol::GetAccountAssetTransactions::MergeFrom(from._internal_get_account_asset_transactions());
      break;
    }
    case kGetTransactions: {
      _internal_mutable_get_transactions()->::iroha::protocol::GetTransactions::MergeFrom(from._internal_get_transactions());
      break;
    }
    case kGetAccountAssets: {
      _internal_mutable_get_account_assets()->::iroha::protocol::GetAccountAssets::MergeFrom(from._internal_get_account_assets());
      break;
    }
    case kGetAccountDetail: {
      _internal_mutable_get_account_detail()->::iroha::protocol::GetAccountDetail::MergeFrom(from._internal_get_account_detail());
      break;
    }
    case kGetRoles: {
      _internal_mutable_get_roles()->::iroha::protocol::GetRoles::MergeFrom(from._internal_get_roles());
      break;
    }
    case kGetRolePermissions: {
      _internal_mutable_get_role_permissions()->::iroha::protocol::GetRolePermissions::MergeFrom(from._internal_get_role_permissions());
      break;
    }
    case kGetAssetInfo: {
      _internal_mutable_get_asset_info()->::iroha::protocol::GetAssetInfo::MergeFrom(from._internal_get_asset_info());
      break;
    }
    case kGetPendingTransactions: {
      _internal_mutable_get_pending_transactions()->::iroha::protocol::GetPendingTransactions::MergeFrom(from._internal_get_pending_transactions());
      break;
    }
    case kGetBlock: {
      _internal_mutable_get_block()->::iroha::protocol::GetBlock::MergeFrom(from._internal_get_block());
      break;
    }
    case kGetPeers: {
      _internal_mutable_get_peers()->::iroha::protocol::GetPeers::MergeFrom(from._internal_get_peers());
      break;
    }
    case kGetEngineReceipts: {
      _internal_mutable_get_engine_receipts()->::iroha::protocol::GetEngineReceipts::MergeFrom(from._internal_get_engine_receipts());
      break;
    }
    case QUERY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.Query.Payload)
}

void Query_Payload::SharedCtor() {
meta_ = nullptr;
clear_has_query();
}

Query_Payload::~Query_Payload() {
  // @@protoc_insertion_point(destructor:iroha.protocol.Query.Payload)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Query_Payload::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete meta_;
  if (has_query()) {
    clear_query();
  }
}

void Query_Payload::ArenaDtor(void* object) {
  Query_Payload* _this = reinterpret_cast< Query_Payload* >(object);
  (void)_this;
}
void Query_Payload::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Query_Payload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Query_Payload::clear_query() {
// @@protoc_insertion_point(one_of_clear_start:iroha.protocol.Query.Payload)
  switch (query_case()) {
    case kGetAccount: {
      if (GetArena() == nullptr) {
        delete query_.get_account_;
      }
      break;
    }
    case kGetSignatories: {
      if (GetArena() == nullptr) {
        delete query_.get_signatories_;
      }
      break;
    }
    case kGetAccountTransactions: {
      if (GetArena() == nullptr) {
        delete query_.get_account_transactions_;
      }
      break;
    }
    case kGetAccountAssetTransactions: {
      if (GetArena() == nullptr) {
        delete query_.get_account_asset_transactions_;
      }
      break;
    }
    case kGetTransactions: {
      if (GetArena() == nullptr) {
        delete query_.get_transactions_;
      }
      break;
    }
    case kGetAccountAssets: {
      if (GetArena() == nullptr) {
        delete query_.get_account_assets_;
      }
      break;
    }
    case kGetAccountDetail: {
      if (GetArena() == nullptr) {
        delete query_.get_account_detail_;
      }
      break;
    }
    case kGetRoles: {
      if (GetArena() == nullptr) {
        delete query_.get_roles_;
      }
      break;
    }
    case kGetRolePermissions: {
      if (GetArena() == nullptr) {
        delete query_.get_role_permissions_;
      }
      break;
    }
    case kGetAssetInfo: {
      if (GetArena() == nullptr) {
        delete query_.get_asset_info_;
      }
      break;
    }
    case kGetPendingTransactions: {
      if (GetArena() == nullptr) {
        delete query_.get_pending_transactions_;
      }
      break;
    }
    case kGetBlock: {
      if (GetArena() == nullptr) {
        delete query_.get_block_;
      }
      break;
    }
    case kGetPeers: {
      if (GetArena() == nullptr) {
        delete query_.get_peers_;
      }
      break;
    }
    case kGetEngineReceipts: {
      if (GetArena() == nullptr) {
        delete query_.get_engine_receipts_;
      }
      break;
    }
    case QUERY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = QUERY_NOT_SET;
}


void Query_Payload::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.Query.Payload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  clear_query();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Query_Payload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .iroha.protocol.QueryPayloadMeta meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.GetAccount get_account = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.GetSignatories get_signatories = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_signatories(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.GetAccountTransactions get_account_transactions = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_account_transactions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.GetAccountAssetTransactions get_account_asset_transactions = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_account_asset_transactions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.GetTransactions get_transactions = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_transactions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.GetAccountAssets get_account_assets = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_account_assets(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.GetAccountDetail get_account_detail = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_account_detail(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.GetRoles get_roles = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_roles(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.GetRolePermissions get_role_permissions = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_role_permissions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.GetAssetInfo get_asset_info = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_asset_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.GetPendingTransactions get_pending_transactions = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_pending_transactions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.GetBlock get_block = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.GetPeers get_peers = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_peers(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.GetEngineReceipts get_engine_receipts = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_engine_receipts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Query_Payload::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.Query.Payload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .iroha.protocol.QueryPayloadMeta meta = 1;
  if (this->has_meta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::meta(this), target, stream);
  }

  // .iroha.protocol.GetAccount get_account = 3;
  if (_internal_has_get_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::get_account(this), target, stream);
  }

  // .iroha.protocol.GetSignatories get_signatories = 4;
  if (_internal_has_get_signatories()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::get_signatories(this), target, stream);
  }

  // .iroha.protocol.GetAccountTransactions get_account_transactions = 5;
  if (_internal_has_get_account_transactions()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::get_account_transactions(this), target, stream);
  }

  // .iroha.protocol.GetAccountAssetTransactions get_account_asset_transactions = 6;
  if (_internal_has_get_account_asset_transactions()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::get_account_asset_transactions(this), target, stream);
  }

  // .iroha.protocol.GetTransactions get_transactions = 7;
  if (_internal_has_get_transactions()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::get_transactions(this), target, stream);
  }

  // .iroha.protocol.GetAccountAssets get_account_assets = 8;
  if (_internal_has_get_account_assets()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::get_account_assets(this), target, stream);
  }

  // .iroha.protocol.GetAccountDetail get_account_detail = 9;
  if (_internal_has_get_account_detail()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::get_account_detail(this), target, stream);
  }

  // .iroha.protocol.GetRoles get_roles = 10;
  if (_internal_has_get_roles()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::get_roles(this), target, stream);
  }

  // .iroha.protocol.GetRolePermissions get_role_permissions = 11;
  if (_internal_has_get_role_permissions()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::get_role_permissions(this), target, stream);
  }

  // .iroha.protocol.GetAssetInfo get_asset_info = 12;
  if (_internal_has_get_asset_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::get_asset_info(this), target, stream);
  }

  // .iroha.protocol.GetPendingTransactions get_pending_transactions = 13;
  if (_internal_has_get_pending_transactions()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::get_pending_transactions(this), target, stream);
  }

  // .iroha.protocol.GetBlock get_block = 14;
  if (_internal_has_get_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::get_block(this), target, stream);
  }

  // .iroha.protocol.GetPeers get_peers = 15;
  if (_internal_has_get_peers()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::get_peers(this), target, stream);
  }

  // .iroha.protocol.GetEngineReceipts get_engine_receipts = 16;
  if (_internal_has_get_engine_receipts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::get_engine_receipts(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.Query.Payload)
  return target;
}

size_t Query_Payload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.Query.Payload)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .iroha.protocol.QueryPayloadMeta meta = 1;
  if (this->has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  switch (query_case()) {
    // .iroha.protocol.GetAccount get_account = 3;
    case kGetAccount: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *query_.get_account_);
      break;
    }
    // .iroha.protocol.GetSignatories get_signatories = 4;
    case kGetSignatories: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *query_.get_signatories_);
      break;
    }
    // .iroha.protocol.GetAccountTransactions get_account_transactions = 5;
    case kGetAccountTransactions: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *query_.get_account_transactions_);
      break;
    }
    // .iroha.protocol.GetAccountAssetTransactions get_account_asset_transactions = 6;
    case kGetAccountAssetTransactions: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *query_.get_account_asset_transactions_);
      break;
    }
    // .iroha.protocol.GetTransactions get_transactions = 7;
    case kGetTransactions: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *query_.get_transactions_);
      break;
    }
    // .iroha.protocol.GetAccountAssets get_account_assets = 8;
    case kGetAccountAssets: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *query_.get_account_assets_);
      break;
    }
    // .iroha.protocol.GetAccountDetail get_account_detail = 9;
    case kGetAccountDetail: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *query_.get_account_detail_);
      break;
    }
    // .iroha.protocol.GetRoles get_roles = 10;
    case kGetRoles: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *query_.get_roles_);
      break;
    }
    // .iroha.protocol.GetRolePermissions get_role_permissions = 11;
    case kGetRolePermissions: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *query_.get_role_permissions_);
      break;
    }
    // .iroha.protocol.GetAssetInfo get_asset_info = 12;
    case kGetAssetInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *query_.get_asset_info_);
      break;
    }
    // .iroha.protocol.GetPendingTransactions get_pending_transactions = 13;
    case kGetPendingTransactions: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *query_.get_pending_transactions_);
      break;
    }
    // .iroha.protocol.GetBlock get_block = 14;
    case kGetBlock: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *query_.get_block_);
      break;
    }
    // .iroha.protocol.GetPeers get_peers = 15;
    case kGetPeers: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *query_.get_peers_);
      break;
    }
    // .iroha.protocol.GetEngineReceipts get_engine_receipts = 16;
    case kGetEngineReceipts: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *query_.get_engine_receipts_);
      break;
    }
    case QUERY_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Query_Payload::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.Query.Payload)
  GOOGLE_DCHECK_NE(&from, this);
  const Query_Payload* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Query_Payload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.Query.Payload)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.Query.Payload)
    MergeFrom(*source);
  }
}

void Query_Payload::MergeFrom(const Query_Payload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.Query.Payload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_meta()) {
    _internal_mutable_meta()->::iroha::protocol::QueryPayloadMeta::MergeFrom(from._internal_meta());
  }
  switch (from.query_case()) {
    case kGetAccount: {
      _internal_mutable_get_account()->::iroha::protocol::GetAccount::MergeFrom(from._internal_get_account());
      break;
    }
    case kGetSignatories: {
      _internal_mutable_get_signatories()->::iroha::protocol::GetSignatories::MergeFrom(from._internal_get_signatories());
      break;
    }
    case kGetAccountTransactions: {
      _internal_mutable_get_account_transactions()->::iroha::protocol::GetAccountTransactions::MergeFrom(from._internal_get_account_transactions());
      break;
    }
    case kGetAccountAssetTransactions: {
      _internal_mutable_get_account_asset_transactions()->::iroha::protocol::GetAccountAssetTransactions::MergeFrom(from._internal_get_account_asset_transactions());
      break;
    }
    case kGetTransactions: {
      _internal_mutable_get_transactions()->::iroha::protocol::GetTransactions::MergeFrom(from._internal_get_transactions());
      break;
    }
    case kGetAccountAssets: {
      _internal_mutable_get_account_assets()->::iroha::protocol::GetAccountAssets::MergeFrom(from._internal_get_account_assets());
      break;
    }
    case kGetAccountDetail: {
      _internal_mutable_get_account_detail()->::iroha::protocol::GetAccountDetail::MergeFrom(from._internal_get_account_detail());
      break;
    }
    case kGetRoles: {
      _internal_mutable_get_roles()->::iroha::protocol::GetRoles::MergeFrom(from._internal_get_roles());
      break;
    }
    case kGetRolePermissions: {
      _internal_mutable_get_role_permissions()->::iroha::protocol::GetRolePermissions::MergeFrom(from._internal_get_role_permissions());
      break;
    }
    case kGetAssetInfo: {
      _internal_mutable_get_asset_info()->::iroha::protocol::GetAssetInfo::MergeFrom(from._internal_get_asset_info());
      break;
    }
    case kGetPendingTransactions: {
      _internal_mutable_get_pending_transactions()->::iroha::protocol::GetPendingTransactions::MergeFrom(from._internal_get_pending_transactions());
      break;
    }
    case kGetBlock: {
      _internal_mutable_get_block()->::iroha::protocol::GetBlock::MergeFrom(from._internal_get_block());
      break;
    }
    case kGetPeers: {
      _internal_mutable_get_peers()->::iroha::protocol::GetPeers::MergeFrom(from._internal_get_peers());
      break;
    }
    case kGetEngineReceipts: {
      _internal_mutable_get_engine_receipts()->::iroha::protocol::GetEngineReceipts::MergeFrom(from._internal_get_engine_receipts());
      break;
    }
    case QUERY_NOT_SET: {
      break;
    }
  }
}

void Query_Payload::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.Query.Payload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Query_Payload::CopyFrom(const Query_Payload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.Query.Payload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Query_Payload::IsInitialized() const {
  return true;
}

void Query_Payload::InternalSwap(Query_Payload* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(meta_, other->meta_);
  swap(query_, other->query_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Query_Payload::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Query::_Internal {
 public:
  static const ::iroha::protocol::Query_Payload& payload(const Query* msg);
  static const ::iroha::protocol::Signature& signature(const Query* msg);
};

const ::iroha::protocol::Query_Payload&
Query::_Internal::payload(const Query* msg) {
  return *msg->payload_;
}
const ::iroha::protocol::Signature&
Query::_Internal::signature(const Query* msg) {
  return *msg->signature_;
}
void Query::clear_signature() {
  if (GetArena() == nullptr && signature_ != nullptr) {
    delete signature_;
  }
  signature_ = nullptr;
}
Query::Query(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.Query)
}
Query::Query(const Query& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_payload()) {
    payload_ = new ::iroha::protocol::Query_Payload(*from.payload_);
  } else {
    payload_ = nullptr;
  }
  if (from._internal_has_signature()) {
    signature_ = new ::iroha::protocol::Signature(*from.signature_);
  } else {
    signature_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.Query)
}

void Query::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&payload_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&signature_) -
    reinterpret_cast<char*>(&payload_)) + sizeof(signature_));
}

Query::~Query() {
  // @@protoc_insertion_point(destructor:iroha.protocol.Query)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Query::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete payload_;
  if (this != internal_default_instance()) delete signature_;
}

void Query::ArenaDtor(void* object) {
  Query* _this = reinterpret_cast< Query* >(object);
  (void)_this;
}
void Query::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Query::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Query::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.Query)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && payload_ != nullptr) {
    delete payload_;
  }
  payload_ = nullptr;
  if (GetArena() == nullptr && signature_ != nullptr) {
    delete signature_;
  }
  signature_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Query::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .iroha.protocol.Query.Payload payload = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_payload(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.Signature signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_signature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Query::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.Query)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .iroha.protocol.Query.Payload payload = 1;
  if (this->has_payload()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::payload(this), target, stream);
  }

  // .iroha.protocol.Signature signature = 2;
  if (this->has_signature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::signature(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.Query)
  return target;
}

size_t Query::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.Query)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .iroha.protocol.Query.Payload payload = 1;
  if (this->has_payload()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *payload_);
  }

  // .iroha.protocol.Signature signature = 2;
  if (this->has_signature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signature_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Query::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.Query)
  GOOGLE_DCHECK_NE(&from, this);
  const Query* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Query>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.Query)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.Query)
    MergeFrom(*source);
  }
}

void Query::MergeFrom(const Query& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.Query)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_payload()) {
    _internal_mutable_payload()->::iroha::protocol::Query_Payload::MergeFrom(from._internal_payload());
  }
  if (from.has_signature()) {
    _internal_mutable_signature()->::iroha::protocol::Signature::MergeFrom(from._internal_signature());
  }
}

void Query::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Query::CopyFrom(const Query& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Query::IsInitialized() const {
  return true;
}

void Query::InternalSwap(Query* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Query, signature_)
      + sizeof(Query::signature_)
      - PROTOBUF_FIELD_OFFSET(Query, payload_)>(
          reinterpret_cast<char*>(&payload_),
          reinterpret_cast<char*>(&other->payload_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Query::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BlocksQuery::_Internal {
 public:
  static const ::iroha::protocol::QueryPayloadMeta& meta(const BlocksQuery* msg);
  static const ::iroha::protocol::Signature& signature(const BlocksQuery* msg);
};

const ::iroha::protocol::QueryPayloadMeta&
BlocksQuery::_Internal::meta(const BlocksQuery* msg) {
  return *msg->meta_;
}
const ::iroha::protocol::Signature&
BlocksQuery::_Internal::signature(const BlocksQuery* msg) {
  return *msg->signature_;
}
void BlocksQuery::clear_signature() {
  if (GetArena() == nullptr && signature_ != nullptr) {
    delete signature_;
  }
  signature_ = nullptr;
}
BlocksQuery::BlocksQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.BlocksQuery)
}
BlocksQuery::BlocksQuery(const BlocksQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_meta()) {
    meta_ = new ::iroha::protocol::QueryPayloadMeta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  if (from._internal_has_signature()) {
    signature_ = new ::iroha::protocol::Signature(*from.signature_);
  } else {
    signature_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.BlocksQuery)
}

void BlocksQuery::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&meta_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&signature_) -
    reinterpret_cast<char*>(&meta_)) + sizeof(signature_));
}

BlocksQuery::~BlocksQuery() {
  // @@protoc_insertion_point(destructor:iroha.protocol.BlocksQuery)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlocksQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete meta_;
  if (this != internal_default_instance()) delete signature_;
}

void BlocksQuery::ArenaDtor(void* object) {
  BlocksQuery* _this = reinterpret_cast< BlocksQuery* >(object);
  (void)_this;
}
void BlocksQuery::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlocksQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlocksQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.BlocksQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  if (GetArena() == nullptr && signature_ != nullptr) {
    delete signature_;
  }
  signature_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlocksQuery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .iroha.protocol.QueryPayloadMeta meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.Signature signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_signature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlocksQuery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.BlocksQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .iroha.protocol.QueryPayloadMeta meta = 1;
  if (this->has_meta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::meta(this), target, stream);
  }

  // .iroha.protocol.Signature signature = 2;
  if (this->has_signature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::signature(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.BlocksQuery)
  return target;
}

size_t BlocksQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.BlocksQuery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .iroha.protocol.QueryPayloadMeta meta = 1;
  if (this->has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  // .iroha.protocol.Signature signature = 2;
  if (this->has_signature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signature_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlocksQuery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.BlocksQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const BlocksQuery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlocksQuery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.BlocksQuery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.BlocksQuery)
    MergeFrom(*source);
  }
}

void BlocksQuery::MergeFrom(const BlocksQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.BlocksQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_meta()) {
    _internal_mutable_meta()->::iroha::protocol::QueryPayloadMeta::MergeFrom(from._internal_meta());
  }
  if (from.has_signature()) {
    _internal_mutable_signature()->::iroha::protocol::Signature::MergeFrom(from._internal_signature());
  }
}

void BlocksQuery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.BlocksQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlocksQuery::CopyFrom(const BlocksQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.BlocksQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlocksQuery::IsInitialized() const {
  return true;
}

void BlocksQuery::InternalSwap(BlocksQuery* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlocksQuery, signature_)
      + sizeof(BlocksQuery::signature_)
      - PROTOBUF_FIELD_OFFSET(BlocksQuery, meta_)>(
          reinterpret_cast<char*>(&meta_),
          reinterpret_cast<char*>(&other->meta_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlocksQuery::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
}  // namespace iroha
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::iroha::protocol::Ordering_FieldOrdering* Arena::CreateMaybeMessage< ::iroha::protocol::Ordering_FieldOrdering >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::Ordering_FieldOrdering >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::Ordering* Arena::CreateMaybeMessage< ::iroha::protocol::Ordering >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::Ordering >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::TxPaginationMeta* Arena::CreateMaybeMessage< ::iroha::protocol::TxPaginationMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::TxPaginationMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::AssetPaginationMeta* Arena::CreateMaybeMessage< ::iroha::protocol::AssetPaginationMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::AssetPaginationMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::GetAccount* Arena::CreateMaybeMessage< ::iroha::protocol::GetAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::GetAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::GetBlock* Arena::CreateMaybeMessage< ::iroha::protocol::GetBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::GetBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::GetSignatories* Arena::CreateMaybeMessage< ::iroha::protocol::GetSignatories >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::GetSignatories >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::GetAccountTransactions* Arena::CreateMaybeMessage< ::iroha::protocol::GetAccountTransactions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::GetAccountTransactions >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::GetAccountAssetTransactions* Arena::CreateMaybeMessage< ::iroha::protocol::GetAccountAssetTransactions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::GetAccountAssetTransactions >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::GetTransactions* Arena::CreateMaybeMessage< ::iroha::protocol::GetTransactions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::GetTransactions >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::GetAccountAssets* Arena::CreateMaybeMessage< ::iroha::protocol::GetAccountAssets >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::GetAccountAssets >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::AccountDetailPaginationMeta* Arena::CreateMaybeMessage< ::iroha::protocol::AccountDetailPaginationMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::AccountDetailPaginationMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::GetAccountDetail* Arena::CreateMaybeMessage< ::iroha::protocol::GetAccountDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::GetAccountDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::GetAssetInfo* Arena::CreateMaybeMessage< ::iroha::protocol::GetAssetInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::GetAssetInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::GetRoles* Arena::CreateMaybeMessage< ::iroha::protocol::GetRoles >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::GetRoles >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::GetRolePermissions* Arena::CreateMaybeMessage< ::iroha::protocol::GetRolePermissions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::GetRolePermissions >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::GetPendingTransactions* Arena::CreateMaybeMessage< ::iroha::protocol::GetPendingTransactions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::GetPendingTransactions >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::GetPeers* Arena::CreateMaybeMessage< ::iroha::protocol::GetPeers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::GetPeers >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::QueryPayloadMeta* Arena::CreateMaybeMessage< ::iroha::protocol::QueryPayloadMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::QueryPayloadMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::GetEngineReceipts* Arena::CreateMaybeMessage< ::iroha::protocol::GetEngineReceipts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::GetEngineReceipts >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::Query_Payload* Arena::CreateMaybeMessage< ::iroha::protocol::Query_Payload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::Query_Payload >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::Query* Arena::CreateMaybeMessage< ::iroha::protocol::Query >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::Query >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::BlocksQuery* Arena::CreateMaybeMessage< ::iroha::protocol::BlocksQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::BlocksQuery >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
