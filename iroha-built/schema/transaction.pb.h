// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transaction.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transaction_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transaction_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "commands.pb.h"
#include "primitive.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transaction_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transaction_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transaction_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_transaction_2eproto_metadata_getter(int index);
namespace iroha {
namespace protocol {
class Transaction;
struct TransactionDefaultTypeInternal;
extern TransactionDefaultTypeInternal _Transaction_default_instance_;
class Transaction_Payload;
struct Transaction_PayloadDefaultTypeInternal;
extern Transaction_PayloadDefaultTypeInternal _Transaction_Payload_default_instance_;
class Transaction_Payload_BatchMeta;
struct Transaction_Payload_BatchMetaDefaultTypeInternal;
extern Transaction_Payload_BatchMetaDefaultTypeInternal _Transaction_Payload_BatchMeta_default_instance_;
class Transaction_Payload_ReducedPayload;
struct Transaction_Payload_ReducedPayloadDefaultTypeInternal;
extern Transaction_Payload_ReducedPayloadDefaultTypeInternal _Transaction_Payload_ReducedPayload_default_instance_;
}  // namespace protocol
}  // namespace iroha
PROTOBUF_NAMESPACE_OPEN
template<> ::iroha::protocol::Transaction* Arena::CreateMaybeMessage<::iroha::protocol::Transaction>(Arena*);
template<> ::iroha::protocol::Transaction_Payload* Arena::CreateMaybeMessage<::iroha::protocol::Transaction_Payload>(Arena*);
template<> ::iroha::protocol::Transaction_Payload_BatchMeta* Arena::CreateMaybeMessage<::iroha::protocol::Transaction_Payload_BatchMeta>(Arena*);
template<> ::iroha::protocol::Transaction_Payload_ReducedPayload* Arena::CreateMaybeMessage<::iroha::protocol::Transaction_Payload_ReducedPayload>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace iroha {
namespace protocol {

enum Transaction_Payload_BatchMeta_BatchType : int {
  Transaction_Payload_BatchMeta_BatchType_ATOMIC = 0,
  Transaction_Payload_BatchMeta_BatchType_ORDERED = 1,
  Transaction_Payload_BatchMeta_BatchType_Transaction_Payload_BatchMeta_BatchType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Transaction_Payload_BatchMeta_BatchType_Transaction_Payload_BatchMeta_BatchType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Transaction_Payload_BatchMeta_BatchType_IsValid(int value);
constexpr Transaction_Payload_BatchMeta_BatchType Transaction_Payload_BatchMeta_BatchType_BatchType_MIN = Transaction_Payload_BatchMeta_BatchType_ATOMIC;
constexpr Transaction_Payload_BatchMeta_BatchType Transaction_Payload_BatchMeta_BatchType_BatchType_MAX = Transaction_Payload_BatchMeta_BatchType_ORDERED;
constexpr int Transaction_Payload_BatchMeta_BatchType_BatchType_ARRAYSIZE = Transaction_Payload_BatchMeta_BatchType_BatchType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Transaction_Payload_BatchMeta_BatchType_descriptor();
template<typename T>
inline const std::string& Transaction_Payload_BatchMeta_BatchType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Transaction_Payload_BatchMeta_BatchType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Transaction_Payload_BatchMeta_BatchType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Transaction_Payload_BatchMeta_BatchType_descriptor(), enum_t_value);
}
inline bool Transaction_Payload_BatchMeta_BatchType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Transaction_Payload_BatchMeta_BatchType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Transaction_Payload_BatchMeta_BatchType>(
    Transaction_Payload_BatchMeta_BatchType_descriptor(), name, value);
}
// ===================================================================

class Transaction_Payload_BatchMeta PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iroha.protocol.Transaction.Payload.BatchMeta) */ {
 public:
  inline Transaction_Payload_BatchMeta() : Transaction_Payload_BatchMeta(nullptr) {}
  virtual ~Transaction_Payload_BatchMeta();
  explicit constexpr Transaction_Payload_BatchMeta(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transaction_Payload_BatchMeta(const Transaction_Payload_BatchMeta& from);
  Transaction_Payload_BatchMeta(Transaction_Payload_BatchMeta&& from) noexcept
    : Transaction_Payload_BatchMeta() {
    *this = ::std::move(from);
  }

  inline Transaction_Payload_BatchMeta& operator=(const Transaction_Payload_BatchMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction_Payload_BatchMeta& operator=(Transaction_Payload_BatchMeta&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transaction_Payload_BatchMeta& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transaction_Payload_BatchMeta* internal_default_instance() {
    return reinterpret_cast<const Transaction_Payload_BatchMeta*>(
               &_Transaction_Payload_BatchMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Transaction_Payload_BatchMeta& a, Transaction_Payload_BatchMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction_Payload_BatchMeta* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction_Payload_BatchMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transaction_Payload_BatchMeta* New() const final {
    return CreateMaybeMessage<Transaction_Payload_BatchMeta>(nullptr);
  }

  Transaction_Payload_BatchMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transaction_Payload_BatchMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transaction_Payload_BatchMeta& from);
  void MergeFrom(const Transaction_Payload_BatchMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction_Payload_BatchMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iroha.protocol.Transaction.Payload.BatchMeta";
  }
  protected:
  explicit Transaction_Payload_BatchMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_transaction_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Transaction_Payload_BatchMeta_BatchType BatchType;
  static constexpr BatchType ATOMIC =
    Transaction_Payload_BatchMeta_BatchType_ATOMIC;
  static constexpr BatchType ORDERED =
    Transaction_Payload_BatchMeta_BatchType_ORDERED;
  static inline bool BatchType_IsValid(int value) {
    return Transaction_Payload_BatchMeta_BatchType_IsValid(value);
  }
  static constexpr BatchType BatchType_MIN =
    Transaction_Payload_BatchMeta_BatchType_BatchType_MIN;
  static constexpr BatchType BatchType_MAX =
    Transaction_Payload_BatchMeta_BatchType_BatchType_MAX;
  static constexpr int BatchType_ARRAYSIZE =
    Transaction_Payload_BatchMeta_BatchType_BatchType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  BatchType_descriptor() {
    return Transaction_Payload_BatchMeta_BatchType_descriptor();
  }
  template<typename T>
  static inline const std::string& BatchType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BatchType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BatchType_Name.");
    return Transaction_Payload_BatchMeta_BatchType_Name(enum_t_value);
  }
  static inline bool BatchType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      BatchType* value) {
    return Transaction_Payload_BatchMeta_BatchType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kReducedHashesFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // repeated string reduced_hashes = 2;
  int reduced_hashes_size() const;
  private:
  int _internal_reduced_hashes_size() const;
  public:
  void clear_reduced_hashes();
  const std::string& reduced_hashes(int index) const;
  std::string* mutable_reduced_hashes(int index);
  void set_reduced_hashes(int index, const std::string& value);
  void set_reduced_hashes(int index, std::string&& value);
  void set_reduced_hashes(int index, const char* value);
  void set_reduced_hashes(int index, const char* value, size_t size);
  std::string* add_reduced_hashes();
  void add_reduced_hashes(const std::string& value);
  void add_reduced_hashes(std::string&& value);
  void add_reduced_hashes(const char* value);
  void add_reduced_hashes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& reduced_hashes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_reduced_hashes();
  private:
  const std::string& _internal_reduced_hashes(int index) const;
  std::string* _internal_add_reduced_hashes();
  public:

  // .iroha.protocol.Transaction.Payload.BatchMeta.BatchType type = 1;
  void clear_type();
  ::iroha::protocol::Transaction_Payload_BatchMeta_BatchType type() const;
  void set_type(::iroha::protocol::Transaction_Payload_BatchMeta_BatchType value);
  private:
  ::iroha::protocol::Transaction_Payload_BatchMeta_BatchType _internal_type() const;
  void _internal_set_type(::iroha::protocol::Transaction_Payload_BatchMeta_BatchType value);
  public:

  // @@protoc_insertion_point(class_scope:iroha.protocol.Transaction.Payload.BatchMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> reduced_hashes_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transaction_2eproto;
};
// -------------------------------------------------------------------

class Transaction_Payload_ReducedPayload PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iroha.protocol.Transaction.Payload.ReducedPayload) */ {
 public:
  inline Transaction_Payload_ReducedPayload() : Transaction_Payload_ReducedPayload(nullptr) {}
  virtual ~Transaction_Payload_ReducedPayload();
  explicit constexpr Transaction_Payload_ReducedPayload(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transaction_Payload_ReducedPayload(const Transaction_Payload_ReducedPayload& from);
  Transaction_Payload_ReducedPayload(Transaction_Payload_ReducedPayload&& from) noexcept
    : Transaction_Payload_ReducedPayload() {
    *this = ::std::move(from);
  }

  inline Transaction_Payload_ReducedPayload& operator=(const Transaction_Payload_ReducedPayload& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction_Payload_ReducedPayload& operator=(Transaction_Payload_ReducedPayload&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transaction_Payload_ReducedPayload& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transaction_Payload_ReducedPayload* internal_default_instance() {
    return reinterpret_cast<const Transaction_Payload_ReducedPayload*>(
               &_Transaction_Payload_ReducedPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Transaction_Payload_ReducedPayload& a, Transaction_Payload_ReducedPayload& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction_Payload_ReducedPayload* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction_Payload_ReducedPayload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transaction_Payload_ReducedPayload* New() const final {
    return CreateMaybeMessage<Transaction_Payload_ReducedPayload>(nullptr);
  }

  Transaction_Payload_ReducedPayload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transaction_Payload_ReducedPayload>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transaction_Payload_ReducedPayload& from);
  void MergeFrom(const Transaction_Payload_ReducedPayload& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction_Payload_ReducedPayload* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iroha.protocol.Transaction.Payload.ReducedPayload";
  }
  protected:
  explicit Transaction_Payload_ReducedPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_transaction_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandsFieldNumber = 1,
    kCreatorAccountIdFieldNumber = 2,
    kCreatedTimeFieldNumber = 3,
    kQuorumFieldNumber = 4,
  };
  // repeated .iroha.protocol.Command commands = 1;
  int commands_size() const;
  private:
  int _internal_commands_size() const;
  public:
  void clear_commands();
  ::iroha::protocol::Command* mutable_commands(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iroha::protocol::Command >*
      mutable_commands();
  private:
  const ::iroha::protocol::Command& _internal_commands(int index) const;
  ::iroha::protocol::Command* _internal_add_commands();
  public:
  const ::iroha::protocol::Command& commands(int index) const;
  ::iroha::protocol::Command* add_commands();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iroha::protocol::Command >&
      commands() const;

  // string creator_account_id = 2;
  void clear_creator_account_id();
  const std::string& creator_account_id() const;
  void set_creator_account_id(const std::string& value);
  void set_creator_account_id(std::string&& value);
  void set_creator_account_id(const char* value);
  void set_creator_account_id(const char* value, size_t size);
  std::string* mutable_creator_account_id();
  std::string* release_creator_account_id();
  void set_allocated_creator_account_id(std::string* creator_account_id);
  private:
  const std::string& _internal_creator_account_id() const;
  void _internal_set_creator_account_id(const std::string& value);
  std::string* _internal_mutable_creator_account_id();
  public:

  // uint64 created_time = 3;
  void clear_created_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 created_time() const;
  void set_created_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_created_time() const;
  void _internal_set_created_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 quorum = 4;
  void clear_quorum();
  ::PROTOBUF_NAMESPACE_ID::uint32 quorum() const;
  void set_quorum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_quorum() const;
  void _internal_set_quorum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:iroha.protocol.Transaction.Payload.ReducedPayload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iroha::protocol::Command > commands_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creator_account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 created_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 quorum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transaction_2eproto;
};
// -------------------------------------------------------------------

class Transaction_Payload PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iroha.protocol.Transaction.Payload) */ {
 public:
  inline Transaction_Payload() : Transaction_Payload(nullptr) {}
  virtual ~Transaction_Payload();
  explicit constexpr Transaction_Payload(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transaction_Payload(const Transaction_Payload& from);
  Transaction_Payload(Transaction_Payload&& from) noexcept
    : Transaction_Payload() {
    *this = ::std::move(from);
  }

  inline Transaction_Payload& operator=(const Transaction_Payload& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction_Payload& operator=(Transaction_Payload&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transaction_Payload& default_instance() {
    return *internal_default_instance();
  }
  enum OptionalBatchMetaCase {
    kBatch = 5,
    OPTIONAL_BATCH_META_NOT_SET = 0,
  };

  static inline const Transaction_Payload* internal_default_instance() {
    return reinterpret_cast<const Transaction_Payload*>(
               &_Transaction_Payload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Transaction_Payload& a, Transaction_Payload& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction_Payload* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction_Payload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transaction_Payload* New() const final {
    return CreateMaybeMessage<Transaction_Payload>(nullptr);
  }

  Transaction_Payload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transaction_Payload>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transaction_Payload& from);
  void MergeFrom(const Transaction_Payload& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction_Payload* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iroha.protocol.Transaction.Payload";
  }
  protected:
  explicit Transaction_Payload(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_transaction_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Transaction_Payload_BatchMeta BatchMeta;
  typedef Transaction_Payload_ReducedPayload ReducedPayload;

  // accessors -------------------------------------------------------

  enum : int {
    kReducedPayloadFieldNumber = 1,
    kBatchFieldNumber = 5,
  };
  // .iroha.protocol.Transaction.Payload.ReducedPayload reduced_payload = 1;
  bool has_reduced_payload() const;
  private:
  bool _internal_has_reduced_payload() const;
  public:
  void clear_reduced_payload();
  const ::iroha::protocol::Transaction_Payload_ReducedPayload& reduced_payload() const;
  ::iroha::protocol::Transaction_Payload_ReducedPayload* release_reduced_payload();
  ::iroha::protocol::Transaction_Payload_ReducedPayload* mutable_reduced_payload();
  void set_allocated_reduced_payload(::iroha::protocol::Transaction_Payload_ReducedPayload* reduced_payload);
  private:
  const ::iroha::protocol::Transaction_Payload_ReducedPayload& _internal_reduced_payload() const;
  ::iroha::protocol::Transaction_Payload_ReducedPayload* _internal_mutable_reduced_payload();
  public:
  void unsafe_arena_set_allocated_reduced_payload(
      ::iroha::protocol::Transaction_Payload_ReducedPayload* reduced_payload);
  ::iroha::protocol::Transaction_Payload_ReducedPayload* unsafe_arena_release_reduced_payload();

  // .iroha.protocol.Transaction.Payload.BatchMeta batch = 5;
  bool has_batch() const;
  private:
  bool _internal_has_batch() const;
  public:
  void clear_batch();
  const ::iroha::protocol::Transaction_Payload_BatchMeta& batch() const;
  ::iroha::protocol::Transaction_Payload_BatchMeta* release_batch();
  ::iroha::protocol::Transaction_Payload_BatchMeta* mutable_batch();
  void set_allocated_batch(::iroha::protocol::Transaction_Payload_BatchMeta* batch);
  private:
  const ::iroha::protocol::Transaction_Payload_BatchMeta& _internal_batch() const;
  ::iroha::protocol::Transaction_Payload_BatchMeta* _internal_mutable_batch();
  public:
  void unsafe_arena_set_allocated_batch(
      ::iroha::protocol::Transaction_Payload_BatchMeta* batch);
  ::iroha::protocol::Transaction_Payload_BatchMeta* unsafe_arena_release_batch();

  void clear_optional_batch_meta();
  OptionalBatchMetaCase optional_batch_meta_case() const;
  // @@protoc_insertion_point(class_scope:iroha.protocol.Transaction.Payload)
 private:
  class _Internal;
  void set_has_batch();

  inline bool has_optional_batch_meta() const;
  inline void clear_has_optional_batch_meta();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::iroha::protocol::Transaction_Payload_ReducedPayload* reduced_payload_;
  union OptionalBatchMetaUnion {
    constexpr OptionalBatchMetaUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::iroha::protocol::Transaction_Payload_BatchMeta* batch_;
  } optional_batch_meta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_transaction_2eproto;
};
// -------------------------------------------------------------------

class Transaction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iroha.protocol.Transaction) */ {
 public:
  inline Transaction() : Transaction(nullptr) {}
  virtual ~Transaction();
  explicit constexpr Transaction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transaction(const Transaction& from);
  Transaction(Transaction&& from) noexcept
    : Transaction() {
    *this = ::std::move(from);
  }

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction& operator=(Transaction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transaction& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transaction* internal_default_instance() {
    return reinterpret_cast<const Transaction*>(
               &_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Transaction& a, Transaction& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transaction* New() const final {
    return CreateMaybeMessage<Transaction>(nullptr);
  }

  Transaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transaction& from);
  void MergeFrom(const Transaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iroha.protocol.Transaction";
  }
  protected:
  explicit Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_transaction_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Transaction_Payload Payload;

  // accessors -------------------------------------------------------

  enum : int {
    kSignaturesFieldNumber = 2,
    kPayloadFieldNumber = 1,
  };
  // repeated .iroha.protocol.Signature signatures = 2;
  int signatures_size() const;
  private:
  int _internal_signatures_size() const;
  public:
  void clear_signatures();
  ::iroha::protocol::Signature* mutable_signatures(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iroha::protocol::Signature >*
      mutable_signatures();
  private:
  const ::iroha::protocol::Signature& _internal_signatures(int index) const;
  ::iroha::protocol::Signature* _internal_add_signatures();
  public:
  const ::iroha::protocol::Signature& signatures(int index) const;
  ::iroha::protocol::Signature* add_signatures();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iroha::protocol::Signature >&
      signatures() const;

  // .iroha.protocol.Transaction.Payload payload = 1;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const ::iroha::protocol::Transaction_Payload& payload() const;
  ::iroha::protocol::Transaction_Payload* release_payload();
  ::iroha::protocol::Transaction_Payload* mutable_payload();
  void set_allocated_payload(::iroha::protocol::Transaction_Payload* payload);
  private:
  const ::iroha::protocol::Transaction_Payload& _internal_payload() const;
  ::iroha::protocol::Transaction_Payload* _internal_mutable_payload();
  public:
  void unsafe_arena_set_allocated_payload(
      ::iroha::protocol::Transaction_Payload* payload);
  ::iroha::protocol::Transaction_Payload* unsafe_arena_release_payload();

  // @@protoc_insertion_point(class_scope:iroha.protocol.Transaction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iroha::protocol::Signature > signatures_;
  ::iroha::protocol::Transaction_Payload* payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transaction_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Transaction_Payload_BatchMeta

// .iroha.protocol.Transaction.Payload.BatchMeta.BatchType type = 1;
inline void Transaction_Payload_BatchMeta::clear_type() {
  type_ = 0;
}
inline ::iroha::protocol::Transaction_Payload_BatchMeta_BatchType Transaction_Payload_BatchMeta::_internal_type() const {
  return static_cast< ::iroha::protocol::Transaction_Payload_BatchMeta_BatchType >(type_);
}
inline ::iroha::protocol::Transaction_Payload_BatchMeta_BatchType Transaction_Payload_BatchMeta::type() const {
  // @@protoc_insertion_point(field_get:iroha.protocol.Transaction.Payload.BatchMeta.type)
  return _internal_type();
}
inline void Transaction_Payload_BatchMeta::_internal_set_type(::iroha::protocol::Transaction_Payload_BatchMeta_BatchType value) {
  
  type_ = value;
}
inline void Transaction_Payload_BatchMeta::set_type(::iroha::protocol::Transaction_Payload_BatchMeta_BatchType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:iroha.protocol.Transaction.Payload.BatchMeta.type)
}

// repeated string reduced_hashes = 2;
inline int Transaction_Payload_BatchMeta::_internal_reduced_hashes_size() const {
  return reduced_hashes_.size();
}
inline int Transaction_Payload_BatchMeta::reduced_hashes_size() const {
  return _internal_reduced_hashes_size();
}
inline void Transaction_Payload_BatchMeta::clear_reduced_hashes() {
  reduced_hashes_.Clear();
}
inline std::string* Transaction_Payload_BatchMeta::add_reduced_hashes() {
  // @@protoc_insertion_point(field_add_mutable:iroha.protocol.Transaction.Payload.BatchMeta.reduced_hashes)
  return _internal_add_reduced_hashes();
}
inline const std::string& Transaction_Payload_BatchMeta::_internal_reduced_hashes(int index) const {
  return reduced_hashes_.Get(index);
}
inline const std::string& Transaction_Payload_BatchMeta::reduced_hashes(int index) const {
  // @@protoc_insertion_point(field_get:iroha.protocol.Transaction.Payload.BatchMeta.reduced_hashes)
  return _internal_reduced_hashes(index);
}
inline std::string* Transaction_Payload_BatchMeta::mutable_reduced_hashes(int index) {
  // @@protoc_insertion_point(field_mutable:iroha.protocol.Transaction.Payload.BatchMeta.reduced_hashes)
  return reduced_hashes_.Mutable(index);
}
inline void Transaction_Payload_BatchMeta::set_reduced_hashes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:iroha.protocol.Transaction.Payload.BatchMeta.reduced_hashes)
  reduced_hashes_.Mutable(index)->assign(value);
}
inline void Transaction_Payload_BatchMeta::set_reduced_hashes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:iroha.protocol.Transaction.Payload.BatchMeta.reduced_hashes)
  reduced_hashes_.Mutable(index)->assign(std::move(value));
}
inline void Transaction_Payload_BatchMeta::set_reduced_hashes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  reduced_hashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:iroha.protocol.Transaction.Payload.BatchMeta.reduced_hashes)
}
inline void Transaction_Payload_BatchMeta::set_reduced_hashes(int index, const char* value, size_t size) {
  reduced_hashes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:iroha.protocol.Transaction.Payload.BatchMeta.reduced_hashes)
}
inline std::string* Transaction_Payload_BatchMeta::_internal_add_reduced_hashes() {
  return reduced_hashes_.Add();
}
inline void Transaction_Payload_BatchMeta::add_reduced_hashes(const std::string& value) {
  reduced_hashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:iroha.protocol.Transaction.Payload.BatchMeta.reduced_hashes)
}
inline void Transaction_Payload_BatchMeta::add_reduced_hashes(std::string&& value) {
  reduced_hashes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:iroha.protocol.Transaction.Payload.BatchMeta.reduced_hashes)
}
inline void Transaction_Payload_BatchMeta::add_reduced_hashes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  reduced_hashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:iroha.protocol.Transaction.Payload.BatchMeta.reduced_hashes)
}
inline void Transaction_Payload_BatchMeta::add_reduced_hashes(const char* value, size_t size) {
  reduced_hashes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:iroha.protocol.Transaction.Payload.BatchMeta.reduced_hashes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Transaction_Payload_BatchMeta::reduced_hashes() const {
  // @@protoc_insertion_point(field_list:iroha.protocol.Transaction.Payload.BatchMeta.reduced_hashes)
  return reduced_hashes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Transaction_Payload_BatchMeta::mutable_reduced_hashes() {
  // @@protoc_insertion_point(field_mutable_list:iroha.protocol.Transaction.Payload.BatchMeta.reduced_hashes)
  return &reduced_hashes_;
}

// -------------------------------------------------------------------

// Transaction_Payload_ReducedPayload

// repeated .iroha.protocol.Command commands = 1;
inline int Transaction_Payload_ReducedPayload::_internal_commands_size() const {
  return commands_.size();
}
inline int Transaction_Payload_ReducedPayload::commands_size() const {
  return _internal_commands_size();
}
inline ::iroha::protocol::Command* Transaction_Payload_ReducedPayload::mutable_commands(int index) {
  // @@protoc_insertion_point(field_mutable:iroha.protocol.Transaction.Payload.ReducedPayload.commands)
  return commands_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iroha::protocol::Command >*
Transaction_Payload_ReducedPayload::mutable_commands() {
  // @@protoc_insertion_point(field_mutable_list:iroha.protocol.Transaction.Payload.ReducedPayload.commands)
  return &commands_;
}
inline const ::iroha::protocol::Command& Transaction_Payload_ReducedPayload::_internal_commands(int index) const {
  return commands_.Get(index);
}
inline const ::iroha::protocol::Command& Transaction_Payload_ReducedPayload::commands(int index) const {
  // @@protoc_insertion_point(field_get:iroha.protocol.Transaction.Payload.ReducedPayload.commands)
  return _internal_commands(index);
}
inline ::iroha::protocol::Command* Transaction_Payload_ReducedPayload::_internal_add_commands() {
  return commands_.Add();
}
inline ::iroha::protocol::Command* Transaction_Payload_ReducedPayload::add_commands() {
  // @@protoc_insertion_point(field_add:iroha.protocol.Transaction.Payload.ReducedPayload.commands)
  return _internal_add_commands();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iroha::protocol::Command >&
Transaction_Payload_ReducedPayload::commands() const {
  // @@protoc_insertion_point(field_list:iroha.protocol.Transaction.Payload.ReducedPayload.commands)
  return commands_;
}

// string creator_account_id = 2;
inline void Transaction_Payload_ReducedPayload::clear_creator_account_id() {
  creator_account_id_.ClearToEmpty();
}
inline const std::string& Transaction_Payload_ReducedPayload::creator_account_id() const {
  // @@protoc_insertion_point(field_get:iroha.protocol.Transaction.Payload.ReducedPayload.creator_account_id)
  return _internal_creator_account_id();
}
inline void Transaction_Payload_ReducedPayload::set_creator_account_id(const std::string& value) {
  _internal_set_creator_account_id(value);
  // @@protoc_insertion_point(field_set:iroha.protocol.Transaction.Payload.ReducedPayload.creator_account_id)
}
inline std::string* Transaction_Payload_ReducedPayload::mutable_creator_account_id() {
  // @@protoc_insertion_point(field_mutable:iroha.protocol.Transaction.Payload.ReducedPayload.creator_account_id)
  return _internal_mutable_creator_account_id();
}
inline const std::string& Transaction_Payload_ReducedPayload::_internal_creator_account_id() const {
  return creator_account_id_.Get();
}
inline void Transaction_Payload_ReducedPayload::_internal_set_creator_account_id(const std::string& value) {
  
  creator_account_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Transaction_Payload_ReducedPayload::set_creator_account_id(std::string&& value) {
  
  creator_account_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:iroha.protocol.Transaction.Payload.ReducedPayload.creator_account_id)
}
inline void Transaction_Payload_ReducedPayload::set_creator_account_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  creator_account_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:iroha.protocol.Transaction.Payload.ReducedPayload.creator_account_id)
}
inline void Transaction_Payload_ReducedPayload::set_creator_account_id(const char* value,
    size_t size) {
  
  creator_account_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:iroha.protocol.Transaction.Payload.ReducedPayload.creator_account_id)
}
inline std::string* Transaction_Payload_ReducedPayload::_internal_mutable_creator_account_id() {
  
  return creator_account_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Transaction_Payload_ReducedPayload::release_creator_account_id() {
  // @@protoc_insertion_point(field_release:iroha.protocol.Transaction.Payload.ReducedPayload.creator_account_id)
  return creator_account_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction_Payload_ReducedPayload::set_allocated_creator_account_id(std::string* creator_account_id) {
  if (creator_account_id != nullptr) {
    
  } else {
    
  }
  creator_account_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), creator_account_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Transaction.Payload.ReducedPayload.creator_account_id)
}

// uint64 created_time = 3;
inline void Transaction_Payload_ReducedPayload::clear_created_time() {
  created_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Transaction_Payload_ReducedPayload::_internal_created_time() const {
  return created_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Transaction_Payload_ReducedPayload::created_time() const {
  // @@protoc_insertion_point(field_get:iroha.protocol.Transaction.Payload.ReducedPayload.created_time)
  return _internal_created_time();
}
inline void Transaction_Payload_ReducedPayload::_internal_set_created_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  created_time_ = value;
}
inline void Transaction_Payload_ReducedPayload::set_created_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_created_time(value);
  // @@protoc_insertion_point(field_set:iroha.protocol.Transaction.Payload.ReducedPayload.created_time)
}

// uint32 quorum = 4;
inline void Transaction_Payload_ReducedPayload::clear_quorum() {
  quorum_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Transaction_Payload_ReducedPayload::_internal_quorum() const {
  return quorum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Transaction_Payload_ReducedPayload::quorum() const {
  // @@protoc_insertion_point(field_get:iroha.protocol.Transaction.Payload.ReducedPayload.quorum)
  return _internal_quorum();
}
inline void Transaction_Payload_ReducedPayload::_internal_set_quorum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  quorum_ = value;
}
inline void Transaction_Payload_ReducedPayload::set_quorum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_quorum(value);
  // @@protoc_insertion_point(field_set:iroha.protocol.Transaction.Payload.ReducedPayload.quorum)
}

// -------------------------------------------------------------------

// Transaction_Payload

// .iroha.protocol.Transaction.Payload.ReducedPayload reduced_payload = 1;
inline bool Transaction_Payload::_internal_has_reduced_payload() const {
  return this != internal_default_instance() && reduced_payload_ != nullptr;
}
inline bool Transaction_Payload::has_reduced_payload() const {
  return _internal_has_reduced_payload();
}
inline void Transaction_Payload::clear_reduced_payload() {
  if (GetArena() == nullptr && reduced_payload_ != nullptr) {
    delete reduced_payload_;
  }
  reduced_payload_ = nullptr;
}
inline const ::iroha::protocol::Transaction_Payload_ReducedPayload& Transaction_Payload::_internal_reduced_payload() const {
  const ::iroha::protocol::Transaction_Payload_ReducedPayload* p = reduced_payload_;
  return p != nullptr ? *p : reinterpret_cast<const ::iroha::protocol::Transaction_Payload_ReducedPayload&>(
      ::iroha::protocol::_Transaction_Payload_ReducedPayload_default_instance_);
}
inline const ::iroha::protocol::Transaction_Payload_ReducedPayload& Transaction_Payload::reduced_payload() const {
  // @@protoc_insertion_point(field_get:iroha.protocol.Transaction.Payload.reduced_payload)
  return _internal_reduced_payload();
}
inline void Transaction_Payload::unsafe_arena_set_allocated_reduced_payload(
    ::iroha::protocol::Transaction_Payload_ReducedPayload* reduced_payload) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reduced_payload_);
  }
  reduced_payload_ = reduced_payload;
  if (reduced_payload) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iroha.protocol.Transaction.Payload.reduced_payload)
}
inline ::iroha::protocol::Transaction_Payload_ReducedPayload* Transaction_Payload::release_reduced_payload() {
  
  ::iroha::protocol::Transaction_Payload_ReducedPayload* temp = reduced_payload_;
  reduced_payload_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::iroha::protocol::Transaction_Payload_ReducedPayload* Transaction_Payload::unsafe_arena_release_reduced_payload() {
  // @@protoc_insertion_point(field_release:iroha.protocol.Transaction.Payload.reduced_payload)
  
  ::iroha::protocol::Transaction_Payload_ReducedPayload* temp = reduced_payload_;
  reduced_payload_ = nullptr;
  return temp;
}
inline ::iroha::protocol::Transaction_Payload_ReducedPayload* Transaction_Payload::_internal_mutable_reduced_payload() {
  
  if (reduced_payload_ == nullptr) {
    auto* p = CreateMaybeMessage<::iroha::protocol::Transaction_Payload_ReducedPayload>(GetArena());
    reduced_payload_ = p;
  }
  return reduced_payload_;
}
inline ::iroha::protocol::Transaction_Payload_ReducedPayload* Transaction_Payload::mutable_reduced_payload() {
  // @@protoc_insertion_point(field_mutable:iroha.protocol.Transaction.Payload.reduced_payload)
  return _internal_mutable_reduced_payload();
}
inline void Transaction_Payload::set_allocated_reduced_payload(::iroha::protocol::Transaction_Payload_ReducedPayload* reduced_payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reduced_payload_;
  }
  if (reduced_payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reduced_payload);
    if (message_arena != submessage_arena) {
      reduced_payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reduced_payload, submessage_arena);
    }
    
  } else {
    
  }
  reduced_payload_ = reduced_payload;
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Transaction.Payload.reduced_payload)
}

// .iroha.protocol.Transaction.Payload.BatchMeta batch = 5;
inline bool Transaction_Payload::_internal_has_batch() const {
  return optional_batch_meta_case() == kBatch;
}
inline bool Transaction_Payload::has_batch() const {
  return _internal_has_batch();
}
inline void Transaction_Payload::set_has_batch() {
  _oneof_case_[0] = kBatch;
}
inline void Transaction_Payload::clear_batch() {
  if (_internal_has_batch()) {
    if (GetArena() == nullptr) {
      delete optional_batch_meta_.batch_;
    }
    clear_has_optional_batch_meta();
  }
}
inline ::iroha::protocol::Transaction_Payload_BatchMeta* Transaction_Payload::release_batch() {
  // @@protoc_insertion_point(field_release:iroha.protocol.Transaction.Payload.batch)
  if (_internal_has_batch()) {
    clear_has_optional_batch_meta();
      ::iroha::protocol::Transaction_Payload_BatchMeta* temp = optional_batch_meta_.batch_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    optional_batch_meta_.batch_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iroha::protocol::Transaction_Payload_BatchMeta& Transaction_Payload::_internal_batch() const {
  return _internal_has_batch()
      ? *optional_batch_meta_.batch_
      : reinterpret_cast< ::iroha::protocol::Transaction_Payload_BatchMeta&>(::iroha::protocol::_Transaction_Payload_BatchMeta_default_instance_);
}
inline const ::iroha::protocol::Transaction_Payload_BatchMeta& Transaction_Payload::batch() const {
  // @@protoc_insertion_point(field_get:iroha.protocol.Transaction.Payload.batch)
  return _internal_batch();
}
inline ::iroha::protocol::Transaction_Payload_BatchMeta* Transaction_Payload::unsafe_arena_release_batch() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iroha.protocol.Transaction.Payload.batch)
  if (_internal_has_batch()) {
    clear_has_optional_batch_meta();
    ::iroha::protocol::Transaction_Payload_BatchMeta* temp = optional_batch_meta_.batch_;
    optional_batch_meta_.batch_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Transaction_Payload::unsafe_arena_set_allocated_batch(::iroha::protocol::Transaction_Payload_BatchMeta* batch) {
  clear_optional_batch_meta();
  if (batch) {
    set_has_batch();
    optional_batch_meta_.batch_ = batch;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iroha.protocol.Transaction.Payload.batch)
}
inline ::iroha::protocol::Transaction_Payload_BatchMeta* Transaction_Payload::_internal_mutable_batch() {
  if (!_internal_has_batch()) {
    clear_optional_batch_meta();
    set_has_batch();
    optional_batch_meta_.batch_ = CreateMaybeMessage< ::iroha::protocol::Transaction_Payload_BatchMeta >(GetArena());
  }
  return optional_batch_meta_.batch_;
}
inline ::iroha::protocol::Transaction_Payload_BatchMeta* Transaction_Payload::mutable_batch() {
  // @@protoc_insertion_point(field_mutable:iroha.protocol.Transaction.Payload.batch)
  return _internal_mutable_batch();
}

inline bool Transaction_Payload::has_optional_batch_meta() const {
  return optional_batch_meta_case() != OPTIONAL_BATCH_META_NOT_SET;
}
inline void Transaction_Payload::clear_has_optional_batch_meta() {
  _oneof_case_[0] = OPTIONAL_BATCH_META_NOT_SET;
}
inline Transaction_Payload::OptionalBatchMetaCase Transaction_Payload::optional_batch_meta_case() const {
  return Transaction_Payload::OptionalBatchMetaCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Transaction

// .iroha.protocol.Transaction.Payload payload = 1;
inline bool Transaction::_internal_has_payload() const {
  return this != internal_default_instance() && payload_ != nullptr;
}
inline bool Transaction::has_payload() const {
  return _internal_has_payload();
}
inline void Transaction::clear_payload() {
  if (GetArena() == nullptr && payload_ != nullptr) {
    delete payload_;
  }
  payload_ = nullptr;
}
inline const ::iroha::protocol::Transaction_Payload& Transaction::_internal_payload() const {
  const ::iroha::protocol::Transaction_Payload* p = payload_;
  return p != nullptr ? *p : reinterpret_cast<const ::iroha::protocol::Transaction_Payload&>(
      ::iroha::protocol::_Transaction_Payload_default_instance_);
}
inline const ::iroha::protocol::Transaction_Payload& Transaction::payload() const {
  // @@protoc_insertion_point(field_get:iroha.protocol.Transaction.payload)
  return _internal_payload();
}
inline void Transaction::unsafe_arena_set_allocated_payload(
    ::iroha::protocol::Transaction_Payload* payload) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload_);
  }
  payload_ = payload;
  if (payload) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iroha.protocol.Transaction.payload)
}
inline ::iroha::protocol::Transaction_Payload* Transaction::release_payload() {
  
  ::iroha::protocol::Transaction_Payload* temp = payload_;
  payload_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::iroha::protocol::Transaction_Payload* Transaction::unsafe_arena_release_payload() {
  // @@protoc_insertion_point(field_release:iroha.protocol.Transaction.payload)
  
  ::iroha::protocol::Transaction_Payload* temp = payload_;
  payload_ = nullptr;
  return temp;
}
inline ::iroha::protocol::Transaction_Payload* Transaction::_internal_mutable_payload() {
  
  if (payload_ == nullptr) {
    auto* p = CreateMaybeMessage<::iroha::protocol::Transaction_Payload>(GetArena());
    payload_ = p;
  }
  return payload_;
}
inline ::iroha::protocol::Transaction_Payload* Transaction::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:iroha.protocol.Transaction.payload)
  return _internal_mutable_payload();
}
inline void Transaction::set_allocated_payload(::iroha::protocol::Transaction_Payload* payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete payload_;
  }
  if (payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(payload);
    if (message_arena != submessage_arena) {
      payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payload, submessage_arena);
    }
    
  } else {
    
  }
  payload_ = payload;
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Transaction.payload)
}

// repeated .iroha.protocol.Signature signatures = 2;
inline int Transaction::_internal_signatures_size() const {
  return signatures_.size();
}
inline int Transaction::signatures_size() const {
  return _internal_signatures_size();
}
inline ::iroha::protocol::Signature* Transaction::mutable_signatures(int index) {
  // @@protoc_insertion_point(field_mutable:iroha.protocol.Transaction.signatures)
  return signatures_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iroha::protocol::Signature >*
Transaction::mutable_signatures() {
  // @@protoc_insertion_point(field_mutable_list:iroha.protocol.Transaction.signatures)
  return &signatures_;
}
inline const ::iroha::protocol::Signature& Transaction::_internal_signatures(int index) const {
  return signatures_.Get(index);
}
inline const ::iroha::protocol::Signature& Transaction::signatures(int index) const {
  // @@protoc_insertion_point(field_get:iroha.protocol.Transaction.signatures)
  return _internal_signatures(index);
}
inline ::iroha::protocol::Signature* Transaction::_internal_add_signatures() {
  return signatures_.Add();
}
inline ::iroha::protocol::Signature* Transaction::add_signatures() {
  // @@protoc_insertion_point(field_add:iroha.protocol.Transaction.signatures)
  return _internal_add_signatures();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iroha::protocol::Signature >&
Transaction::signatures() const {
  // @@protoc_insertion_point(field_list:iroha.protocol.Transaction.signatures)
  return signatures_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace iroha

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::iroha::protocol::Transaction_Payload_BatchMeta_BatchType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::iroha::protocol::Transaction_Payload_BatchMeta_BatchType>() {
  return ::iroha::protocol::Transaction_Payload_BatchMeta_BatchType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transaction_2eproto
