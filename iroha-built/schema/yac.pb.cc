// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: yac.proto

#include "yac.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace iroha {
namespace consensus {
namespace yac {
namespace proto {
constexpr Signature::Signature(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pubkey_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , signature_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SignatureDefaultTypeInternal {
  constexpr SignatureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SignatureDefaultTypeInternal() {}
  union {
    Signature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SignatureDefaultTypeInternal _Signature_default_instance_;
constexpr VoteRound::VoteRound(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_round_(PROTOBUF_ULONGLONG(0))
  , reject_round_(0u){}
struct VoteRoundDefaultTypeInternal {
  constexpr VoteRoundDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VoteRoundDefaultTypeInternal() {}
  union {
    VoteRound _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VoteRoundDefaultTypeInternal _VoteRound_default_instance_;
constexpr VoteHashes::VoteHashes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : proposal_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , block_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct VoteHashesDefaultTypeInternal {
  constexpr VoteHashesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VoteHashesDefaultTypeInternal() {}
  union {
    VoteHashes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VoteHashesDefaultTypeInternal _VoteHashes_default_instance_;
constexpr Hash::Hash(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vote_round_(nullptr)
  , vote_hashes_(nullptr)
  , block_signature_(nullptr){}
struct HashDefaultTypeInternal {
  constexpr HashDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HashDefaultTypeInternal() {}
  union {
    Hash _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HashDefaultTypeInternal _Hash_default_instance_;
constexpr Vote::Vote(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hash_(nullptr)
  , signature_(nullptr){}
struct VoteDefaultTypeInternal {
  constexpr VoteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VoteDefaultTypeInternal() {}
  union {
    Vote _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VoteDefaultTypeInternal _Vote_default_instance_;
constexpr State::State(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : votes_(){}
struct StateDefaultTypeInternal {
  constexpr StateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StateDefaultTypeInternal() {}
  union {
    State _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StateDefaultTypeInternal _State_default_instance_;
}  // namespace proto
}  // namespace yac
}  // namespace consensus
}  // namespace iroha
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_yac_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_yac_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_yac_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_yac_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::consensus::yac::proto::Signature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::consensus::yac::proto::Signature, pubkey_),
  PROTOBUF_FIELD_OFFSET(::iroha::consensus::yac::proto::Signature, signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::consensus::yac::proto::VoteRound, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::consensus::yac::proto::VoteRound, block_round_),
  PROTOBUF_FIELD_OFFSET(::iroha::consensus::yac::proto::VoteRound, reject_round_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::consensus::yac::proto::VoteHashes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::consensus::yac::proto::VoteHashes, proposal_),
  PROTOBUF_FIELD_OFFSET(::iroha::consensus::yac::proto::VoteHashes, block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::consensus::yac::proto::Hash, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::consensus::yac::proto::Hash, vote_round_),
  PROTOBUF_FIELD_OFFSET(::iroha::consensus::yac::proto::Hash, vote_hashes_),
  PROTOBUF_FIELD_OFFSET(::iroha::consensus::yac::proto::Hash, block_signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::consensus::yac::proto::Vote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::consensus::yac::proto::Vote, hash_),
  PROTOBUF_FIELD_OFFSET(::iroha::consensus::yac::proto::Vote, signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::consensus::yac::proto::State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::consensus::yac::proto::State, votes_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::iroha::consensus::yac::proto::Signature)},
  { 7, -1, sizeof(::iroha::consensus::yac::proto::VoteRound)},
  { 14, -1, sizeof(::iroha::consensus::yac::proto::VoteHashes)},
  { 21, -1, sizeof(::iroha::consensus::yac::proto::Hash)},
  { 29, -1, sizeof(::iroha::consensus::yac::proto::Vote)},
  { 36, -1, sizeof(::iroha::consensus::yac::proto::State)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::consensus::yac::proto::_Signature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::consensus::yac::proto::_VoteRound_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::consensus::yac::proto::_VoteHashes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::consensus::yac::proto::_Hash_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::consensus::yac::proto::_Vote_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::consensus::yac::proto::_State_default_instance_),
};

const char descriptor_table_protodef_yac_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tyac.proto\022\031iroha.consensus.yac.proto\032\033"
  "google/protobuf/empty.proto\".\n\tSignature"
  "\022\016\n\006pubkey\030\001 \001(\014\022\021\n\tsignature\030\002 \001(\014\"6\n\tV"
  "oteRound\022\023\n\013block_round\030\001 \001(\004\022\024\n\014reject_"
  "round\030\002 \001(\r\"-\n\nVoteHashes\022\020\n\010proposal\030\001 "
  "\001(\014\022\r\n\005block\030\002 \001(\014\"\273\001\n\004Hash\0228\n\nvote_roun"
  "d\030\001 \001(\0132$.iroha.consensus.yac.proto.Vote"
  "Round\022:\n\013vote_hashes\030\002 \001(\0132%.iroha.conse"
  "nsus.yac.proto.VoteHashes\022=\n\017block_signa"
  "ture\030\003 \001(\0132$.iroha.consensus.yac.proto.S"
  "ignature\"n\n\004Vote\022-\n\004hash\030\001 \001(\0132\037.iroha.c"
  "onsensus.yac.proto.Hash\0227\n\tsignature\030\002 \001"
  "(\0132$.iroha.consensus.yac.proto.Signature"
  "\"7\n\005State\022.\n\005votes\030\001 \003(\0132\037.iroha.consens"
  "us.yac.proto.Vote2L\n\003Yac\022E\n\tSendState\022 ."
  "iroha.consensus.yac.proto.State\032\026.google"
  ".protobuf.Emptyb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_yac_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_yac_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_yac_2eproto = {
  false, false, 663, descriptor_table_protodef_yac_2eproto, "yac.proto", 
  &descriptor_table_yac_2eproto_once, descriptor_table_yac_2eproto_deps, 1, 6,
  schemas, file_default_instances, TableStruct_yac_2eproto::offsets,
  file_level_metadata_yac_2eproto, file_level_enum_descriptors_yac_2eproto, file_level_service_descriptors_yac_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_yac_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_yac_2eproto);
  return descriptor_table_yac_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_yac_2eproto(&descriptor_table_yac_2eproto);
namespace iroha {
namespace consensus {
namespace yac {
namespace proto {

// ===================================================================

class Signature::_Internal {
 public:
};

Signature::Signature(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.consensus.yac.proto.Signature)
}
Signature::Signature(const Signature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pubkey().empty()) {
    pubkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pubkey(), 
      GetArena());
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature().empty()) {
    signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:iroha.consensus.yac.proto.Signature)
}

void Signature::SharedCtor() {
pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Signature::~Signature() {
  // @@protoc_insertion_point(destructor:iroha.consensus.yac.proto.Signature)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Signature::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  pubkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Signature::ArenaDtor(void* object) {
  Signature* _this = reinterpret_cast< Signature* >(object);
  (void)_this;
}
void Signature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Signature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Signature::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.consensus.yac.proto.Signature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pubkey_.ClearToEmpty();
  signature_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Signature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes pubkey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pubkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Signature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.consensus.yac.proto.Signature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pubkey = 1;
  if (this->pubkey().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_pubkey(), target);
  }

  // bytes signature = 2;
  if (this->signature().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.consensus.yac.proto.Signature)
  return target;
}

size_t Signature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.consensus.yac.proto.Signature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pubkey = 1;
  if (this->pubkey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pubkey());
  }

  // bytes signature = 2;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Signature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.consensus.yac.proto.Signature)
  GOOGLE_DCHECK_NE(&from, this);
  const Signature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Signature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.consensus.yac.proto.Signature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.consensus.yac.proto.Signature)
    MergeFrom(*source);
  }
}

void Signature::MergeFrom(const Signature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.consensus.yac.proto.Signature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pubkey().size() > 0) {
    _internal_set_pubkey(from._internal_pubkey());
  }
  if (from.signature().size() > 0) {
    _internal_set_signature(from._internal_signature());
  }
}

void Signature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.consensus.yac.proto.Signature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signature::CopyFrom(const Signature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.consensus.yac.proto.Signature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signature::IsInitialized() const {
  return true;
}

void Signature::InternalSwap(Signature* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pubkey_.Swap(&other->pubkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Signature::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VoteRound::_Internal {
 public:
};

VoteRound::VoteRound(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.consensus.yac.proto.VoteRound)
}
VoteRound::VoteRound(const VoteRound& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&block_round_, &from.block_round_,
    static_cast<size_t>(reinterpret_cast<char*>(&reject_round_) -
    reinterpret_cast<char*>(&block_round_)) + sizeof(reject_round_));
  // @@protoc_insertion_point(copy_constructor:iroha.consensus.yac.proto.VoteRound)
}

void VoteRound::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&block_round_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reject_round_) -
    reinterpret_cast<char*>(&block_round_)) + sizeof(reject_round_));
}

VoteRound::~VoteRound() {
  // @@protoc_insertion_point(destructor:iroha.consensus.yac.proto.VoteRound)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VoteRound::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VoteRound::ArenaDtor(void* object) {
  VoteRound* _this = reinterpret_cast< VoteRound* >(object);
  (void)_this;
}
void VoteRound::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VoteRound::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VoteRound::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.consensus.yac.proto.VoteRound)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&block_round_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reject_round_) -
      reinterpret_cast<char*>(&block_round_)) + sizeof(reject_round_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VoteRound::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 block_round = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          block_round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 reject_round = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          reject_round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VoteRound::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.consensus.yac.proto.VoteRound)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 block_round = 1;
  if (this->block_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_block_round(), target);
  }

  // uint32 reject_round = 2;
  if (this->reject_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_reject_round(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.consensus.yac.proto.VoteRound)
  return target;
}

size_t VoteRound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.consensus.yac.proto.VoteRound)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 block_round = 1;
  if (this->block_round() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_block_round());
  }

  // uint32 reject_round = 2;
  if (this->reject_round() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reject_round());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VoteRound::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.consensus.yac.proto.VoteRound)
  GOOGLE_DCHECK_NE(&from, this);
  const VoteRound* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VoteRound>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.consensus.yac.proto.VoteRound)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.consensus.yac.proto.VoteRound)
    MergeFrom(*source);
  }
}

void VoteRound::MergeFrom(const VoteRound& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.consensus.yac.proto.VoteRound)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.block_round() != 0) {
    _internal_set_block_round(from._internal_block_round());
  }
  if (from.reject_round() != 0) {
    _internal_set_reject_round(from._internal_reject_round());
  }
}

void VoteRound::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.consensus.yac.proto.VoteRound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoteRound::CopyFrom(const VoteRound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.consensus.yac.proto.VoteRound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteRound::IsInitialized() const {
  return true;
}

void VoteRound::InternalSwap(VoteRound* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VoteRound, reject_round_)
      + sizeof(VoteRound::reject_round_)
      - PROTOBUF_FIELD_OFFSET(VoteRound, block_round_)>(
          reinterpret_cast<char*>(&block_round_),
          reinterpret_cast<char*>(&other->block_round_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VoteRound::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VoteHashes::_Internal {
 public:
};

VoteHashes::VoteHashes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.consensus.yac.proto.VoteHashes)
}
VoteHashes::VoteHashes(const VoteHashes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  proposal_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_proposal().empty()) {
    proposal_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_proposal(), 
      GetArena());
  }
  block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block().empty()) {
    block_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_block(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:iroha.consensus.yac.proto.VoteHashes)
}

void VoteHashes::SharedCtor() {
proposal_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

VoteHashes::~VoteHashes() {
  // @@protoc_insertion_point(destructor:iroha.consensus.yac.proto.VoteHashes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VoteHashes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  proposal_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VoteHashes::ArenaDtor(void* object) {
  VoteHashes* _this = reinterpret_cast< VoteHashes* >(object);
  (void)_this;
}
void VoteHashes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VoteHashes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VoteHashes::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.consensus.yac.proto.VoteHashes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proposal_.ClearToEmpty();
  block_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VoteHashes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes proposal = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_proposal();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes block = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_block();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VoteHashes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.consensus.yac.proto.VoteHashes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes proposal = 1;
  if (this->proposal().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_proposal(), target);
  }

  // bytes block = 2;
  if (this->block().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_block(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.consensus.yac.proto.VoteHashes)
  return target;
}

size_t VoteHashes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.consensus.yac.proto.VoteHashes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes proposal = 1;
  if (this->proposal().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_proposal());
  }

  // bytes block = 2;
  if (this->block().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VoteHashes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.consensus.yac.proto.VoteHashes)
  GOOGLE_DCHECK_NE(&from, this);
  const VoteHashes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VoteHashes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.consensus.yac.proto.VoteHashes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.consensus.yac.proto.VoteHashes)
    MergeFrom(*source);
  }
}

void VoteHashes::MergeFrom(const VoteHashes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.consensus.yac.proto.VoteHashes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.proposal().size() > 0) {
    _internal_set_proposal(from._internal_proposal());
  }
  if (from.block().size() > 0) {
    _internal_set_block(from._internal_block());
  }
}

void VoteHashes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.consensus.yac.proto.VoteHashes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoteHashes::CopyFrom(const VoteHashes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.consensus.yac.proto.VoteHashes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteHashes::IsInitialized() const {
  return true;
}

void VoteHashes::InternalSwap(VoteHashes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  proposal_.Swap(&other->proposal_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  block_.Swap(&other->block_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata VoteHashes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Hash::_Internal {
 public:
  static const ::iroha::consensus::yac::proto::VoteRound& vote_round(const Hash* msg);
  static const ::iroha::consensus::yac::proto::VoteHashes& vote_hashes(const Hash* msg);
  static const ::iroha::consensus::yac::proto::Signature& block_signature(const Hash* msg);
};

const ::iroha::consensus::yac::proto::VoteRound&
Hash::_Internal::vote_round(const Hash* msg) {
  return *msg->vote_round_;
}
const ::iroha::consensus::yac::proto::VoteHashes&
Hash::_Internal::vote_hashes(const Hash* msg) {
  return *msg->vote_hashes_;
}
const ::iroha::consensus::yac::proto::Signature&
Hash::_Internal::block_signature(const Hash* msg) {
  return *msg->block_signature_;
}
Hash::Hash(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.consensus.yac.proto.Hash)
}
Hash::Hash(const Hash& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vote_round()) {
    vote_round_ = new ::iroha::consensus::yac::proto::VoteRound(*from.vote_round_);
  } else {
    vote_round_ = nullptr;
  }
  if (from._internal_has_vote_hashes()) {
    vote_hashes_ = new ::iroha::consensus::yac::proto::VoteHashes(*from.vote_hashes_);
  } else {
    vote_hashes_ = nullptr;
  }
  if (from._internal_has_block_signature()) {
    block_signature_ = new ::iroha::consensus::yac::proto::Signature(*from.block_signature_);
  } else {
    block_signature_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:iroha.consensus.yac.proto.Hash)
}

void Hash::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&vote_round_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&block_signature_) -
    reinterpret_cast<char*>(&vote_round_)) + sizeof(block_signature_));
}

Hash::~Hash() {
  // @@protoc_insertion_point(destructor:iroha.consensus.yac.proto.Hash)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Hash::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete vote_round_;
  if (this != internal_default_instance()) delete vote_hashes_;
  if (this != internal_default_instance()) delete block_signature_;
}

void Hash::ArenaDtor(void* object) {
  Hash* _this = reinterpret_cast< Hash* >(object);
  (void)_this;
}
void Hash::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Hash::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Hash::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.consensus.yac.proto.Hash)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && vote_round_ != nullptr) {
    delete vote_round_;
  }
  vote_round_ = nullptr;
  if (GetArena() == nullptr && vote_hashes_ != nullptr) {
    delete vote_hashes_;
  }
  vote_hashes_ = nullptr;
  if (GetArena() == nullptr && block_signature_ != nullptr) {
    delete block_signature_;
  }
  block_signature_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Hash::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .iroha.consensus.yac.proto.VoteRound vote_round = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vote_round(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.consensus.yac.proto.VoteHashes vote_hashes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vote_hashes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.consensus.yac.proto.Signature block_signature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_signature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Hash::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.consensus.yac.proto.Hash)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .iroha.consensus.yac.proto.VoteRound vote_round = 1;
  if (this->has_vote_round()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::vote_round(this), target, stream);
  }

  // .iroha.consensus.yac.proto.VoteHashes vote_hashes = 2;
  if (this->has_vote_hashes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::vote_hashes(this), target, stream);
  }

  // .iroha.consensus.yac.proto.Signature block_signature = 3;
  if (this->has_block_signature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::block_signature(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.consensus.yac.proto.Hash)
  return target;
}

size_t Hash::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.consensus.yac.proto.Hash)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .iroha.consensus.yac.proto.VoteRound vote_round = 1;
  if (this->has_vote_round()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vote_round_);
  }

  // .iroha.consensus.yac.proto.VoteHashes vote_hashes = 2;
  if (this->has_vote_hashes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vote_hashes_);
  }

  // .iroha.consensus.yac.proto.Signature block_signature = 3;
  if (this->has_block_signature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_signature_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Hash::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.consensus.yac.proto.Hash)
  GOOGLE_DCHECK_NE(&from, this);
  const Hash* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Hash>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.consensus.yac.proto.Hash)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.consensus.yac.proto.Hash)
    MergeFrom(*source);
  }
}

void Hash::MergeFrom(const Hash& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.consensus.yac.proto.Hash)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_vote_round()) {
    _internal_mutable_vote_round()->::iroha::consensus::yac::proto::VoteRound::MergeFrom(from._internal_vote_round());
  }
  if (from.has_vote_hashes()) {
    _internal_mutable_vote_hashes()->::iroha::consensus::yac::proto::VoteHashes::MergeFrom(from._internal_vote_hashes());
  }
  if (from.has_block_signature()) {
    _internal_mutable_block_signature()->::iroha::consensus::yac::proto::Signature::MergeFrom(from._internal_block_signature());
  }
}

void Hash::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.consensus.yac.proto.Hash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hash::CopyFrom(const Hash& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.consensus.yac.proto.Hash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hash::IsInitialized() const {
  return true;
}

void Hash::InternalSwap(Hash* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Hash, block_signature_)
      + sizeof(Hash::block_signature_)
      - PROTOBUF_FIELD_OFFSET(Hash, vote_round_)>(
          reinterpret_cast<char*>(&vote_round_),
          reinterpret_cast<char*>(&other->vote_round_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Hash::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Vote::_Internal {
 public:
  static const ::iroha::consensus::yac::proto::Hash& hash(const Vote* msg);
  static const ::iroha::consensus::yac::proto::Signature& signature(const Vote* msg);
};

const ::iroha::consensus::yac::proto::Hash&
Vote::_Internal::hash(const Vote* msg) {
  return *msg->hash_;
}
const ::iroha::consensus::yac::proto::Signature&
Vote::_Internal::signature(const Vote* msg) {
  return *msg->signature_;
}
Vote::Vote(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.consensus.yac.proto.Vote)
}
Vote::Vote(const Vote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hash()) {
    hash_ = new ::iroha::consensus::yac::proto::Hash(*from.hash_);
  } else {
    hash_ = nullptr;
  }
  if (from._internal_has_signature()) {
    signature_ = new ::iroha::consensus::yac::proto::Signature(*from.signature_);
  } else {
    signature_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:iroha.consensus.yac.proto.Vote)
}

void Vote::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hash_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&signature_) -
    reinterpret_cast<char*>(&hash_)) + sizeof(signature_));
}

Vote::~Vote() {
  // @@protoc_insertion_point(destructor:iroha.consensus.yac.proto.Vote)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vote::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hash_;
  if (this != internal_default_instance()) delete signature_;
}

void Vote::ArenaDtor(void* object) {
  Vote* _this = reinterpret_cast< Vote* >(object);
  (void)_this;
}
void Vote::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vote::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.consensus.yac.proto.Vote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && hash_ != nullptr) {
    delete hash_;
  }
  hash_ = nullptr;
  if (GetArena() == nullptr && signature_ != nullptr) {
    delete signature_;
  }
  signature_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vote::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .iroha.consensus.yac.proto.Hash hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hash(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.consensus.yac.proto.Signature signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_signature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vote::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.consensus.yac.proto.Vote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .iroha.consensus.yac.proto.Hash hash = 1;
  if (this->has_hash()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::hash(this), target, stream);
  }

  // .iroha.consensus.yac.proto.Signature signature = 2;
  if (this->has_signature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::signature(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.consensus.yac.proto.Vote)
  return target;
}

size_t Vote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.consensus.yac.proto.Vote)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .iroha.consensus.yac.proto.Hash hash = 1;
  if (this->has_hash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hash_);
  }

  // .iroha.consensus.yac.proto.Signature signature = 2;
  if (this->has_signature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signature_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vote::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.consensus.yac.proto.Vote)
  GOOGLE_DCHECK_NE(&from, this);
  const Vote* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vote>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.consensus.yac.proto.Vote)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.consensus.yac.proto.Vote)
    MergeFrom(*source);
  }
}

void Vote::MergeFrom(const Vote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.consensus.yac.proto.Vote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hash()) {
    _internal_mutable_hash()->::iroha::consensus::yac::proto::Hash::MergeFrom(from._internal_hash());
  }
  if (from.has_signature()) {
    _internal_mutable_signature()->::iroha::consensus::yac::proto::Signature::MergeFrom(from._internal_signature());
  }
}

void Vote::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.consensus.yac.proto.Vote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vote::CopyFrom(const Vote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.consensus.yac.proto.Vote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vote::IsInitialized() const {
  return true;
}

void Vote::InternalSwap(Vote* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vote, signature_)
      + sizeof(Vote::signature_)
      - PROTOBUF_FIELD_OFFSET(Vote, hash_)>(
          reinterpret_cast<char*>(&hash_),
          reinterpret_cast<char*>(&other->hash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vote::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class State::_Internal {
 public:
};

State::State(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  votes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.consensus.yac.proto.State)
}
State::State(const State& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      votes_(from.votes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iroha.consensus.yac.proto.State)
}

void State::SharedCtor() {
}

State::~State() {
  // @@protoc_insertion_point(destructor:iroha.consensus.yac.proto.State)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void State::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void State::ArenaDtor(void* object) {
  State* _this = reinterpret_cast< State* >(object);
  (void)_this;
}
void State::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void State::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void State::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.consensus.yac.proto.State)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  votes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* State::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .iroha.consensus.yac.proto.Vote votes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_votes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* State::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.consensus.yac.proto.State)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .iroha.consensus.yac.proto.Vote votes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_votes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_votes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.consensus.yac.proto.State)
  return target;
}

size_t State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.consensus.yac.proto.State)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iroha.consensus.yac.proto.Vote votes = 1;
  total_size += 1UL * this->_internal_votes_size();
  for (const auto& msg : this->votes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void State::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.consensus.yac.proto.State)
  GOOGLE_DCHECK_NE(&from, this);
  const State* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<State>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.consensus.yac.proto.State)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.consensus.yac.proto.State)
    MergeFrom(*source);
  }
}

void State::MergeFrom(const State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.consensus.yac.proto.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  votes_.MergeFrom(from.votes_);
}

void State::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.consensus.yac.proto.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void State::CopyFrom(const State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.consensus.yac.proto.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool State::IsInitialized() const {
  return true;
}

void State::InternalSwap(State* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  votes_.InternalSwap(&other->votes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata State::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace yac
}  // namespace consensus
}  // namespace iroha
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::iroha::consensus::yac::proto::Signature* Arena::CreateMaybeMessage< ::iroha::consensus::yac::proto::Signature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::consensus::yac::proto::Signature >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::consensus::yac::proto::VoteRound* Arena::CreateMaybeMessage< ::iroha::consensus::yac::proto::VoteRound >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::consensus::yac::proto::VoteRound >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::consensus::yac::proto::VoteHashes* Arena::CreateMaybeMessage< ::iroha::consensus::yac::proto::VoteHashes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::consensus::yac::proto::VoteHashes >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::consensus::yac::proto::Hash* Arena::CreateMaybeMessage< ::iroha::consensus::yac::proto::Hash >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::consensus::yac::proto::Hash >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::consensus::yac::proto::Vote* Arena::CreateMaybeMessage< ::iroha::consensus::yac::proto::Vote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::consensus::yac::proto::Vote >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::consensus::yac::proto::State* Arena::CreateMaybeMessage< ::iroha::consensus::yac::proto::State >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::consensus::yac::proto::State >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
