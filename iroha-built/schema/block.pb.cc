// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: block.proto

#include "block.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace iroha {
namespace protocol {
constexpr Block_v1_Payload::Block_v1_Payload(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transactions_()
  , rejected_transactions_hashes_()
  , prev_block_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , height_(PROTOBUF_ULONGLONG(0))
  , created_time_(PROTOBUF_ULONGLONG(0))
  , tx_number_(0u){}
struct Block_v1_PayloadDefaultTypeInternal {
  constexpr Block_v1_PayloadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Block_v1_PayloadDefaultTypeInternal() {}
  union {
    Block_v1_Payload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Block_v1_PayloadDefaultTypeInternal _Block_v1_Payload_default_instance_;
constexpr Block_v1::Block_v1(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signatures_()
  , payload_(nullptr){}
struct Block_v1DefaultTypeInternal {
  constexpr Block_v1DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Block_v1DefaultTypeInternal() {}
  union {
    Block_v1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Block_v1DefaultTypeInternal _Block_v1_default_instance_;
constexpr Block::Block(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct BlockDefaultTypeInternal {
  constexpr BlockDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockDefaultTypeInternal() {}
  union {
    Block _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockDefaultTypeInternal _Block_default_instance_;
}  // namespace protocol
}  // namespace iroha
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_block_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_block_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_block_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_block_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Block_v1_Payload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Block_v1_Payload, transactions_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Block_v1_Payload, tx_number_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Block_v1_Payload, height_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Block_v1_Payload, prev_block_hash_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Block_v1_Payload, created_time_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Block_v1_Payload, rejected_transactions_hashes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Block_v1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Block_v1, payload_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Block_v1, signatures_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Block, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Block, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Block, block_version_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::iroha::protocol::Block_v1_Payload)},
  { 11, -1, sizeof(::iroha::protocol::Block_v1)},
  { 18, -1, sizeof(::iroha::protocol::Block)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_Block_v1_Payload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_Block_v1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_Block_default_instance_),
};

const char descriptor_table_protodef_block_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013block.proto\022\016iroha.protocol\032\017primitive"
  ".proto\032\021transaction.proto\"\243\002\n\010Block_v1\0221"
  "\n\007payload\030\001 \001(\0132 .iroha.protocol.Block_v"
  "1.Payload\022-\n\nsignatures\030\002 \003(\0132\031.iroha.pr"
  "otocol.Signature\032\264\001\n\007Payload\0221\n\014transact"
  "ions\030\001 \003(\0132\033.iroha.protocol.Transaction\022"
  "\021\n\ttx_number\030\002 \001(\r\022\016\n\006height\030\003 \001(\004\022\027\n\017pr"
  "ev_block_hash\030\004 \001(\t\022\024\n\014created_time\030\005 \001("
  "\004\022$\n\034rejected_transactions_hashes\030\006 \003(\t\""
  "F\n\005Block\022,\n\010block_v1\030\001 \001(\0132\030.iroha.proto"
  "col.Block_v1H\000B\017\n\rblock_versionB\032Z\030iroha"
  ".generated/protocolb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_block_2eproto_deps[2] = {
  &::descriptor_table_primitive_2eproto,
  &::descriptor_table_transaction_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_block_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_block_2eproto = {
  false, false, 467, descriptor_table_protodef_block_2eproto, "block.proto", 
  &descriptor_table_block_2eproto_once, descriptor_table_block_2eproto_deps, 2, 3,
  schemas, file_default_instances, TableStruct_block_2eproto::offsets,
  file_level_metadata_block_2eproto, file_level_enum_descriptors_block_2eproto, file_level_service_descriptors_block_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_block_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_block_2eproto);
  return descriptor_table_block_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_block_2eproto(&descriptor_table_block_2eproto);
namespace iroha {
namespace protocol {

// ===================================================================

class Block_v1_Payload::_Internal {
 public:
};

void Block_v1_Payload::clear_transactions() {
  transactions_.Clear();
}
Block_v1_Payload::Block_v1_Payload(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  transactions_(arena),
  rejected_transactions_hashes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.Block_v1.Payload)
}
Block_v1_Payload::Block_v1_Payload(const Block_v1_Payload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      transactions_(from.transactions_),
      rejected_transactions_hashes_(from.rejected_transactions_hashes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  prev_block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prev_block_hash().empty()) {
    prev_block_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_prev_block_hash(), 
      GetArena());
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&tx_number_) -
    reinterpret_cast<char*>(&height_)) + sizeof(tx_number_));
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.Block_v1.Payload)
}

void Block_v1_Payload::SharedCtor() {
prev_block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&height_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tx_number_) -
    reinterpret_cast<char*>(&height_)) + sizeof(tx_number_));
}

Block_v1_Payload::~Block_v1_Payload() {
  // @@protoc_insertion_point(destructor:iroha.protocol.Block_v1.Payload)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Block_v1_Payload::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  prev_block_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Block_v1_Payload::ArenaDtor(void* object) {
  Block_v1_Payload* _this = reinterpret_cast< Block_v1_Payload* >(object);
  (void)_this;
}
void Block_v1_Payload::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Block_v1_Payload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Block_v1_Payload::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.Block_v1.Payload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transactions_.Clear();
  rejected_transactions_hashes_.Clear();
  prev_block_hash_.ClearToEmpty();
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tx_number_) -
      reinterpret_cast<char*>(&height_)) + sizeof(tx_number_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Block_v1_Payload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .iroha.protocol.Transaction transactions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 tx_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          tx_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string prev_block_hash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_prev_block_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.Block_v1.Payload.prev_block_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 created_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          created_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string rejected_transactions_hashes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_rejected_transactions_hashes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.Block_v1.Payload.rejected_transactions_hashes"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Block_v1_Payload::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.Block_v1.Payload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .iroha.protocol.Transaction transactions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transactions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_transactions(i), target, stream);
  }

  // uint32 tx_number = 2;
  if (this->tx_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tx_number(), target);
  }

  // uint64 height = 3;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_height(), target);
  }

  // string prev_block_hash = 4;
  if (this->prev_block_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prev_block_hash().data(), static_cast<int>(this->_internal_prev_block_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.Block_v1.Payload.prev_block_hash");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_prev_block_hash(), target);
  }

  // uint64 created_time = 5;
  if (this->created_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_created_time(), target);
  }

  // repeated string rejected_transactions_hashes = 6;
  for (int i = 0, n = this->_internal_rejected_transactions_hashes_size(); i < n; i++) {
    const auto& s = this->_internal_rejected_transactions_hashes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.Block_v1.Payload.rejected_transactions_hashes");
    target = stream->WriteString(6, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.Block_v1.Payload)
  return target;
}

size_t Block_v1_Payload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.Block_v1.Payload)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iroha.protocol.Transaction transactions = 1;
  total_size += 1UL * this->_internal_transactions_size();
  for (const auto& msg : this->transactions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string rejected_transactions_hashes = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(rejected_transactions_hashes_.size());
  for (int i = 0, n = rejected_transactions_hashes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      rejected_transactions_hashes_.Get(i));
  }

  // string prev_block_hash = 4;
  if (this->prev_block_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prev_block_hash());
  }

  // uint64 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  // uint64 created_time = 5;
  if (this->created_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_created_time());
  }

  // uint32 tx_number = 2;
  if (this->tx_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tx_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Block_v1_Payload::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.Block_v1.Payload)
  GOOGLE_DCHECK_NE(&from, this);
  const Block_v1_Payload* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Block_v1_Payload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.Block_v1.Payload)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.Block_v1.Payload)
    MergeFrom(*source);
  }
}

void Block_v1_Payload::MergeFrom(const Block_v1_Payload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.Block_v1.Payload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transactions_.MergeFrom(from.transactions_);
  rejected_transactions_hashes_.MergeFrom(from.rejected_transactions_hashes_);
  if (from.prev_block_hash().size() > 0) {
    _internal_set_prev_block_hash(from._internal_prev_block_hash());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from.created_time() != 0) {
    _internal_set_created_time(from._internal_created_time());
  }
  if (from.tx_number() != 0) {
    _internal_set_tx_number(from._internal_tx_number());
  }
}

void Block_v1_Payload::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.Block_v1.Payload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Block_v1_Payload::CopyFrom(const Block_v1_Payload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.Block_v1.Payload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block_v1_Payload::IsInitialized() const {
  return true;
}

void Block_v1_Payload::InternalSwap(Block_v1_Payload* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  transactions_.InternalSwap(&other->transactions_);
  rejected_transactions_hashes_.InternalSwap(&other->rejected_transactions_hashes_);
  prev_block_hash_.Swap(&other->prev_block_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Block_v1_Payload, tx_number_)
      + sizeof(Block_v1_Payload::tx_number_)
      - PROTOBUF_FIELD_OFFSET(Block_v1_Payload, height_)>(
          reinterpret_cast<char*>(&height_),
          reinterpret_cast<char*>(&other->height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Block_v1_Payload::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Block_v1::_Internal {
 public:
  static const ::iroha::protocol::Block_v1_Payload& payload(const Block_v1* msg);
};

const ::iroha::protocol::Block_v1_Payload&
Block_v1::_Internal::payload(const Block_v1* msg) {
  return *msg->payload_;
}
void Block_v1::clear_signatures() {
  signatures_.Clear();
}
Block_v1::Block_v1(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  signatures_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.Block_v1)
}
Block_v1::Block_v1(const Block_v1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      signatures_(from.signatures_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_payload()) {
    payload_ = new ::iroha::protocol::Block_v1_Payload(*from.payload_);
  } else {
    payload_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.Block_v1)
}

void Block_v1::SharedCtor() {
payload_ = nullptr;
}

Block_v1::~Block_v1() {
  // @@protoc_insertion_point(destructor:iroha.protocol.Block_v1)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Block_v1::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete payload_;
}

void Block_v1::ArenaDtor(void* object) {
  Block_v1* _this = reinterpret_cast< Block_v1* >(object);
  (void)_this;
}
void Block_v1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Block_v1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Block_v1::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.Block_v1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signatures_.Clear();
  if (GetArena() == nullptr && payload_ != nullptr) {
    delete payload_;
  }
  payload_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Block_v1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .iroha.protocol.Block_v1.Payload payload = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_payload(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .iroha.protocol.Signature signatures = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_signatures(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Block_v1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.Block_v1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .iroha.protocol.Block_v1.Payload payload = 1;
  if (this->has_payload()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::payload(this), target, stream);
  }

  // repeated .iroha.protocol.Signature signatures = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_signatures_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_signatures(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.Block_v1)
  return target;
}

size_t Block_v1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.Block_v1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iroha.protocol.Signature signatures = 2;
  total_size += 1UL * this->_internal_signatures_size();
  for (const auto& msg : this->signatures_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .iroha.protocol.Block_v1.Payload payload = 1;
  if (this->has_payload()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *payload_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Block_v1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.Block_v1)
  GOOGLE_DCHECK_NE(&from, this);
  const Block_v1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Block_v1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.Block_v1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.Block_v1)
    MergeFrom(*source);
  }
}

void Block_v1::MergeFrom(const Block_v1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.Block_v1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signatures_.MergeFrom(from.signatures_);
  if (from.has_payload()) {
    _internal_mutable_payload()->::iroha::protocol::Block_v1_Payload::MergeFrom(from._internal_payload());
  }
}

void Block_v1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.Block_v1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Block_v1::CopyFrom(const Block_v1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.Block_v1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block_v1::IsInitialized() const {
  return true;
}

void Block_v1::InternalSwap(Block_v1* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  signatures_.InternalSwap(&other->signatures_);
  swap(payload_, other->payload_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Block_v1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Block::_Internal {
 public:
  static const ::iroha::protocol::Block_v1& block_v1(const Block* msg);
};

const ::iroha::protocol::Block_v1&
Block::_Internal::block_v1(const Block* msg) {
  return *msg->block_version_.block_v1_;
}
void Block::set_allocated_block_v1(::iroha::protocol::Block_v1* block_v1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_block_version();
  if (block_v1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(block_v1);
    if (message_arena != submessage_arena) {
      block_v1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_v1, submessage_arena);
    }
    set_has_block_v1();
    block_version_.block_v1_ = block_v1;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Block.block_v1)
}
Block::Block(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.Block)
}
Block::Block(const Block& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_block_version();
  switch (from.block_version_case()) {
    case kBlockV1: {
      _internal_mutable_block_v1()->::iroha::protocol::Block_v1::MergeFrom(from._internal_block_v1());
      break;
    }
    case BLOCK_VERSION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.Block)
}

void Block::SharedCtor() {
clear_has_block_version();
}

Block::~Block() {
  // @@protoc_insertion_point(destructor:iroha.protocol.Block)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Block::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_block_version()) {
    clear_block_version();
  }
}

void Block::ArenaDtor(void* object) {
  Block* _this = reinterpret_cast< Block* >(object);
  (void)_this;
}
void Block::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Block::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Block::clear_block_version() {
// @@protoc_insertion_point(one_of_clear_start:iroha.protocol.Block)
  switch (block_version_case()) {
    case kBlockV1: {
      if (GetArena() == nullptr) {
        delete block_version_.block_v1_;
      }
      break;
    }
    case BLOCK_VERSION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = BLOCK_VERSION_NOT_SET;
}


void Block::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.Block)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_block_version();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Block::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .iroha.protocol.Block_v1 block_v1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_v1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Block::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.Block)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .iroha.protocol.Block_v1 block_v1 = 1;
  if (_internal_has_block_v1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::block_v1(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.Block)
  return target;
}

size_t Block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.Block)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (block_version_case()) {
    // .iroha.protocol.Block_v1 block_v1 = 1;
    case kBlockV1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *block_version_.block_v1_);
      break;
    }
    case BLOCK_VERSION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Block::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.Block)
  GOOGLE_DCHECK_NE(&from, this);
  const Block* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Block>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.Block)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.Block)
    MergeFrom(*source);
  }
}

void Block::MergeFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.Block)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.block_version_case()) {
    case kBlockV1: {
      _internal_mutable_block_v1()->::iroha::protocol::Block_v1::MergeFrom(from._internal_block_v1());
      break;
    }
    case BLOCK_VERSION_NOT_SET: {
      break;
    }
  }
}

void Block::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Block::CopyFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {
  return true;
}

void Block::InternalSwap(Block* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(block_version_, other->block_version_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Block::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
}  // namespace iroha
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::iroha::protocol::Block_v1_Payload* Arena::CreateMaybeMessage< ::iroha::protocol::Block_v1_Payload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::Block_v1_Payload >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::Block_v1* Arena::CreateMaybeMessage< ::iroha::protocol::Block_v1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::Block_v1 >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::Block* Arena::CreateMaybeMessage< ::iroha::protocol::Block >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::Block >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
