// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: qry_responses.proto

#include "qry_responses.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace iroha {
namespace protocol {
constexpr Asset::Asset(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : asset_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , domain_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , precision_(0u){}
struct AssetDefaultTypeInternal {
  constexpr AssetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AssetDefaultTypeInternal() {}
  union {
    Asset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AssetDefaultTypeInternal _Asset_default_instance_;
constexpr Domain::Domain(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : domain_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , default_role_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DomainDefaultTypeInternal {
  constexpr DomainDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DomainDefaultTypeInternal() {}
  union {
    Domain _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DomainDefaultTypeInternal _Domain_default_instance_;
constexpr Account::Account(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , domain_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , json_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , quorum_(0u){}
struct AccountDefaultTypeInternal {
  constexpr AccountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccountDefaultTypeInternal() {}
  union {
    Account _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccountDefaultTypeInternal _Account_default_instance_;
constexpr AccountAsset::AccountAsset(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : asset_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , account_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , balance_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AccountAssetDefaultTypeInternal {
  constexpr AccountAssetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccountAssetDefaultTypeInternal() {}
  union {
    AccountAsset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccountAssetDefaultTypeInternal _AccountAsset_default_instance_;
constexpr AccountAssetResponse::AccountAssetResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_assets_()
  , total_number_(0u)
  , _oneof_case_{}{}
struct AccountAssetResponseDefaultTypeInternal {
  constexpr AccountAssetResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccountAssetResponseDefaultTypeInternal() {}
  union {
    AccountAssetResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccountAssetResponseDefaultTypeInternal _AccountAssetResponse_default_instance_;
constexpr AccountDetailResponse::AccountDetailResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : detail_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , next_record_id_(nullptr)
  , total_number_(PROTOBUF_ULONGLONG(0)){}
struct AccountDetailResponseDefaultTypeInternal {
  constexpr AccountDetailResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccountDetailResponseDefaultTypeInternal() {}
  union {
    AccountDetailResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccountDetailResponseDefaultTypeInternal _AccountDetailResponse_default_instance_;
constexpr AccountResponse::AccountResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_roles_()
  , account_(nullptr){}
struct AccountResponseDefaultTypeInternal {
  constexpr AccountResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccountResponseDefaultTypeInternal() {}
  union {
    AccountResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccountResponseDefaultTypeInternal _AccountResponse_default_instance_;
constexpr AssetResponse::AssetResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : asset_(nullptr){}
struct AssetResponseDefaultTypeInternal {
  constexpr AssetResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AssetResponseDefaultTypeInternal() {}
  union {
    AssetResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AssetResponseDefaultTypeInternal _AssetResponse_default_instance_;
constexpr RolesResponse::RolesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roles_(){}
struct RolesResponseDefaultTypeInternal {
  constexpr RolesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RolesResponseDefaultTypeInternal() {}
  union {
    RolesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RolesResponseDefaultTypeInternal _RolesResponse_default_instance_;
constexpr RolePermissionsResponse::RolePermissionsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : permissions_()
  , _permissions_cached_byte_size_(){}
struct RolePermissionsResponseDefaultTypeInternal {
  constexpr RolePermissionsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RolePermissionsResponseDefaultTypeInternal() {}
  union {
    RolePermissionsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RolePermissionsResponseDefaultTypeInternal _RolePermissionsResponse_default_instance_;
constexpr ErrorResponse::ErrorResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reason_(0)

  , error_code_(0u){}
struct ErrorResponseDefaultTypeInternal {
  constexpr ErrorResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ErrorResponseDefaultTypeInternal() {}
  union {
    ErrorResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ErrorResponseDefaultTypeInternal _ErrorResponse_default_instance_;
constexpr SignatoriesResponse::SignatoriesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : keys_(){}
struct SignatoriesResponseDefaultTypeInternal {
  constexpr SignatoriesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SignatoriesResponseDefaultTypeInternal() {}
  union {
    SignatoriesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SignatoriesResponseDefaultTypeInternal _SignatoriesResponse_default_instance_;
constexpr TransactionsResponse::TransactionsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transactions_(){}
struct TransactionsResponseDefaultTypeInternal {
  constexpr TransactionsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionsResponseDefaultTypeInternal() {}
  union {
    TransactionsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionsResponseDefaultTypeInternal _TransactionsResponse_default_instance_;
constexpr TransactionsPageResponse::TransactionsPageResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transactions_()
  , all_transactions_size_(0u)
  , _oneof_case_{}{}
struct TransactionsPageResponseDefaultTypeInternal {
  constexpr TransactionsPageResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionsPageResponseDefaultTypeInternal() {}
  union {
    TransactionsPageResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionsPageResponseDefaultTypeInternal _TransactionsPageResponse_default_instance_;
constexpr PendingTransactionsPageResponse_BatchInfo::PendingTransactionsPageResponse_BatchInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : first_tx_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , batch_size_(0u){}
struct PendingTransactionsPageResponse_BatchInfoDefaultTypeInternal {
  constexpr PendingTransactionsPageResponse_BatchInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PendingTransactionsPageResponse_BatchInfoDefaultTypeInternal() {}
  union {
    PendingTransactionsPageResponse_BatchInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PendingTransactionsPageResponse_BatchInfoDefaultTypeInternal _PendingTransactionsPageResponse_BatchInfo_default_instance_;
constexpr PendingTransactionsPageResponse::PendingTransactionsPageResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transactions_()
  , next_batch_info_(nullptr)
  , all_transactions_size_(0u){}
struct PendingTransactionsPageResponseDefaultTypeInternal {
  constexpr PendingTransactionsPageResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PendingTransactionsPageResponseDefaultTypeInternal() {}
  union {
    PendingTransactionsPageResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PendingTransactionsPageResponseDefaultTypeInternal _PendingTransactionsPageResponse_default_instance_;
constexpr PeersResponse::PeersResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : peers_(){}
struct PeersResponseDefaultTypeInternal {
  constexpr PeersResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PeersResponseDefaultTypeInternal() {}
  union {
    PeersResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PeersResponseDefaultTypeInternal _PeersResponse_default_instance_;
constexpr EngineReceiptsResponse::EngineReceiptsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : engine_receipts_(){}
struct EngineReceiptsResponseDefaultTypeInternal {
  constexpr EngineReceiptsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EngineReceiptsResponseDefaultTypeInternal() {}
  union {
    EngineReceiptsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EngineReceiptsResponseDefaultTypeInternal _EngineReceiptsResponse_default_instance_;
constexpr QueryResponse::QueryResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : query_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , _oneof_case_{}{}
struct QueryResponseDefaultTypeInternal {
  constexpr QueryResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QueryResponseDefaultTypeInternal() {}
  union {
    QueryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QueryResponseDefaultTypeInternal _QueryResponse_default_instance_;
constexpr BlockResponse::BlockResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_(nullptr){}
struct BlockResponseDefaultTypeInternal {
  constexpr BlockResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockResponseDefaultTypeInternal() {}
  union {
    BlockResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockResponseDefaultTypeInternal _BlockResponse_default_instance_;
constexpr BlockErrorResponse::BlockErrorResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct BlockErrorResponseDefaultTypeInternal {
  constexpr BlockErrorResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockErrorResponseDefaultTypeInternal() {}
  union {
    BlockErrorResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockErrorResponseDefaultTypeInternal _BlockErrorResponse_default_instance_;
constexpr BlockQueryResponse::BlockQueryResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct BlockQueryResponseDefaultTypeInternal {
  constexpr BlockQueryResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockQueryResponseDefaultTypeInternal() {}
  union {
    BlockQueryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockQueryResponseDefaultTypeInternal _BlockQueryResponse_default_instance_;
constexpr HealthcheckData::HealthcheckData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct HealthcheckDataDefaultTypeInternal {
  constexpr HealthcheckDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HealthcheckDataDefaultTypeInternal() {}
  union {
    HealthcheckData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HealthcheckDataDefaultTypeInternal _HealthcheckData_default_instance_;
}  // namespace protocol
}  // namespace iroha
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_qry_5fresponses_2eproto[23];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_qry_5fresponses_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_qry_5fresponses_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_qry_5fresponses_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Asset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Asset, asset_id_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Asset, domain_id_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Asset, precision_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Domain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Domain, domain_id_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Domain, default_role_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Account, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Account, account_id_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Account, domain_id_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Account, quorum_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Account, json_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::AccountAsset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::AccountAsset, asset_id_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::AccountAsset, account_id_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::AccountAsset, balance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::AccountAssetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::AccountAssetResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::AccountAssetResponse, account_assets_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::AccountAssetResponse, total_number_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::AccountAssetResponse, opt_next_asset_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::AccountDetailResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::AccountDetailResponse, detail_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::AccountDetailResponse, total_number_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::AccountDetailResponse, next_record_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::AccountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::AccountResponse, account_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::AccountResponse, account_roles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::AssetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::AssetResponse, asset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::RolesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::RolesResponse, roles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::RolePermissionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::RolePermissionsResponse, permissions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::ErrorResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::ErrorResponse, reason_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::ErrorResponse, message_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::ErrorResponse, error_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::SignatoriesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::SignatoriesResponse, keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::TransactionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::TransactionsResponse, transactions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::TransactionsPageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::TransactionsPageResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::TransactionsPageResponse, transactions_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::TransactionsPageResponse, all_transactions_size_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::TransactionsPageResponse, next_page_tag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::PendingTransactionsPageResponse_BatchInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::PendingTransactionsPageResponse_BatchInfo, first_tx_hash_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::PendingTransactionsPageResponse_BatchInfo, batch_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::PendingTransactionsPageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::PendingTransactionsPageResponse, transactions_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::PendingTransactionsPageResponse, all_transactions_size_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::PendingTransactionsPageResponse, next_batch_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::PeersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::PeersResponse, peers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::EngineReceiptsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::EngineReceiptsResponse, engine_receipts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::QueryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::QueryResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::QueryResponse, query_hash_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::QueryResponse, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::BlockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::BlockResponse, block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::BlockErrorResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::BlockErrorResponse, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::BlockQueryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::BlockQueryResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::BlockQueryResponse, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::HealthcheckData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::HealthcheckData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::HealthcheckData, opt_memory_consumption_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::HealthcheckData, opt_is_healthy_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::HealthcheckData, opt_is_syncing_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::HealthcheckData, opt_last_block_height_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::HealthcheckData, opt_last_block_reject_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::iroha::protocol::Asset)},
  { 8, -1, sizeof(::iroha::protocol::Domain)},
  { 15, -1, sizeof(::iroha::protocol::Account)},
  { 24, -1, sizeof(::iroha::protocol::AccountAsset)},
  { 32, -1, sizeof(::iroha::protocol::AccountAssetResponse)},
  { 41, -1, sizeof(::iroha::protocol::AccountDetailResponse)},
  { 49, -1, sizeof(::iroha::protocol::AccountResponse)},
  { 56, -1, sizeof(::iroha::protocol::AssetResponse)},
  { 62, -1, sizeof(::iroha::protocol::RolesResponse)},
  { 68, -1, sizeof(::iroha::protocol::RolePermissionsResponse)},
  { 74, -1, sizeof(::iroha::protocol::ErrorResponse)},
  { 82, -1, sizeof(::iroha::protocol::SignatoriesResponse)},
  { 88, -1, sizeof(::iroha::protocol::TransactionsResponse)},
  { 94, -1, sizeof(::iroha::protocol::TransactionsPageResponse)},
  { 103, -1, sizeof(::iroha::protocol::PendingTransactionsPageResponse_BatchInfo)},
  { 110, -1, sizeof(::iroha::protocol::PendingTransactionsPageResponse)},
  { 118, -1, sizeof(::iroha::protocol::PeersResponse)},
  { 124, -1, sizeof(::iroha::protocol::EngineReceiptsResponse)},
  { 130, -1, sizeof(::iroha::protocol::QueryResponse)},
  { 151, -1, sizeof(::iroha::protocol::BlockResponse)},
  { 157, -1, sizeof(::iroha::protocol::BlockErrorResponse)},
  { 163, -1, sizeof(::iroha::protocol::BlockQueryResponse)},
  { 171, -1, sizeof(::iroha::protocol::HealthcheckData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_Asset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_Domain_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_Account_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_AccountAsset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_AccountAssetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_AccountDetailResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_AccountResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_AssetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_RolesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_RolePermissionsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_ErrorResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_SignatoriesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_TransactionsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_TransactionsPageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_PendingTransactionsPageResponse_BatchInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_PendingTransactionsPageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_PeersResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_EngineReceiptsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_QueryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_BlockResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_BlockErrorResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_BlockQueryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_HealthcheckData_default_instance_),
};

const char descriptor_table_protodef_qry_5fresponses_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023qry_responses.proto\022\016iroha.protocol\032\013b"
  "lock.proto\032\021transaction.proto\032\017primitive"
  ".proto\"\?\n\005Asset\022\020\n\010asset_id\030\001 \001(\t\022\021\n\tdom"
  "ain_id\030\002 \001(\t\022\021\n\tprecision\030\003 \001(\r\"1\n\006Domai"
  "n\022\021\n\tdomain_id\030\001 \001(\t\022\024\n\014default_role\030\002 \001"
  "(\t\"S\n\007Account\022\022\n\naccount_id\030\001 \001(\t\022\021\n\tdom"
  "ain_id\030\002 \001(\t\022\016\n\006quorum\030\003 \001(\r\022\021\n\tjson_dat"
  "a\030\004 \001(\t\"E\n\014AccountAsset\022\020\n\010asset_id\030\001 \001("
  "\t\022\022\n\naccount_id\030\002 \001(\t\022\017\n\007balance\030\003 \001(\t\"\220"
  "\001\n\024AccountAssetResponse\0224\n\016account_asset"
  "s\030\001 \003(\0132\034.iroha.protocol.AccountAsset\022\024\n"
  "\014total_number\030\002 \001(\r\022\027\n\rnext_asset_id\030\003 \001"
  "(\tH\000B\023\n\021opt_next_asset_id\"|\n\025AccountDeta"
  "ilResponse\022\016\n\006detail\030\001 \001(\t\022\024\n\014total_numb"
  "er\030\002 \001(\004\022=\n\016next_record_id\030\003 \001(\0132%.iroha"
  ".protocol.AccountDetailRecordId\"R\n\017Accou"
  "ntResponse\022(\n\007account\030\001 \001(\0132\027.iroha.prot"
  "ocol.Account\022\025\n\raccount_roles\030\002 \003(\t\"5\n\rA"
  "ssetResponse\022$\n\005asset\030\001 \001(\0132\025.iroha.prot"
  "ocol.Asset\"\036\n\rRolesResponse\022\r\n\005roles\030\001 \003"
  "(\t\"N\n\027RolePermissionsResponse\0223\n\013permiss"
  "ions\030\001 \003(\0162\036.iroha.protocol.RolePermissi"
  "on\"\243\002\n\rErrorResponse\0224\n\006reason\030\001 \001(\0162$.i"
  "roha.protocol.ErrorResponse.Reason\022\017\n\007me"
  "ssage\030\002 \001(\t\022\022\n\nerror_code\030\003 \001(\r\"\266\001\n\006Reas"
  "on\022\025\n\021STATELESS_INVALID\020\000\022\024\n\020STATEFUL_IN"
  "VALID\020\001\022\016\n\nNO_ACCOUNT\020\002\022\025\n\021NO_ACCOUNT_AS"
  "SETS\020\003\022\025\n\021NO_ACCOUNT_DETAIL\020\004\022\022\n\016NO_SIGN"
  "ATORIES\020\005\022\021\n\rNOT_SUPPORTED\020\006\022\014\n\010NO_ASSET"
  "\020\007\022\014\n\010NO_ROLES\020\010\"#\n\023SignatoriesResponse\022"
  "\014\n\004keys\030\001 \003(\t\"I\n\024TransactionsResponse\0221\n"
  "\014transactions\030\001 \003(\0132\033.iroha.protocol.Tra"
  "nsaction\"\225\001\n\030TransactionsPageResponse\0221\n"
  "\014transactions\030\001 \003(\0132\033.iroha.protocol.Tra"
  "nsaction\022\035\n\025all_transactions_size\030\002 \001(\r\022"
  "\026\n\014next_tx_hash\030\003 \001(\tH\000B\017\n\rnext_page_tag"
  "\"\377\001\n\037PendingTransactionsPageResponse\0221\n\014"
  "transactions\030\001 \003(\0132\033.iroha.protocol.Tran"
  "saction\022\035\n\025all_transactions_size\030\002 \001(\r\022R"
  "\n\017next_batch_info\030\003 \001(\01329.iroha.protocol"
  ".PendingTransactionsPageResponse.BatchIn"
  "fo\0326\n\tBatchInfo\022\025\n\rfirst_tx_hash\030\001 \001(\t\022\022"
  "\n\nbatch_size\030\002 \001(\r\"4\n\rPeersResponse\022#\n\005p"
  "eers\030\001 \003(\0132\024.iroha.protocol.Peer\"P\n\026Engi"
  "neReceiptsResponse\0226\n\017engine_receipts\030\001 "
  "\003(\0132\035.iroha.protocol.EngineReceipt\"\361\007\n\rQ"
  "ueryResponse\022G\n\027account_assets_response\030"
  "\001 \001(\0132$.iroha.protocol.AccountAssetRespo"
  "nseH\000\022H\n\027account_detail_response\030\002 \001(\0132%"
  ".iroha.protocol.AccountDetailResponseH\000\022"
  ";\n\020account_response\030\003 \001(\0132\037.iroha.protoc"
  "ol.AccountResponseH\000\0227\n\016error_response\030\004"
  " \001(\0132\035.iroha.protocol.ErrorResponseH\000\022C\n"
  "\024signatories_response\030\005 \001(\0132#.iroha.prot"
  "ocol.SignatoriesResponseH\000\022E\n\025transactio"
  "ns_response\030\006 \001(\0132$.iroha.protocol.Trans"
  "actionsResponseH\000\0227\n\016asset_response\030\007 \001("
  "\0132\035.iroha.protocol.AssetResponseH\000\0227\n\016ro"
  "les_response\030\010 \001(\0132\035.iroha.protocol.Role"
  "sResponseH\000\022L\n\031role_permissions_response"
  "\030\t \001(\0132\'.iroha.protocol.RolePermissionsR"
  "esponseH\000\022N\n\032transactions_page_response\030"
  "\013 \001(\0132(.iroha.protocol.TransactionsPageR"
  "esponseH\000\022]\n\"pending_transactions_page_r"
  "esponse\030\r \001(\0132/.iroha.protocol.PendingTr"
  "ansactionsPageResponseH\000\0227\n\016block_respon"
  "se\030\014 \001(\0132\035.iroha.protocol.BlockResponseH"
  "\000\0227\n\016peers_response\030\016 \001(\0132\035.iroha.protoc"
  "ol.PeersResponseH\000\022J\n\030engine_receipts_re"
  "sponse\030\017 \001(\0132&.iroha.protocol.EngineRece"
  "iptsResponseH\000\022\022\n\nquery_hash\030\n \001(\tB\n\n\010re"
  "sponse\"5\n\rBlockResponse\022$\n\005block\030\001 \001(\0132\025"
  ".iroha.protocol.Block\"%\n\022BlockErrorRespo"
  "nse\022\017\n\007message\030\001 \001(\t\"\235\001\n\022BlockQueryRespo"
  "nse\0227\n\016block_response\030\001 \001(\0132\035.iroha.prot"
  "ocol.BlockResponseH\000\022B\n\024block_error_resp"
  "onse\030\002 \001(\0132\".iroha.protocol.BlockErrorRe"
  "sponseH\000B\n\n\010response\"\205\002\n\017HealthcheckData"
  "\022\034\n\022memory_consumption\030\001 \001(\004H\000\022\024\n\nis_hea"
  "lthy\030\002 \001(\010H\001\022\024\n\nis_syncing\030\003 \001(\010H\002\022\033\n\021la"
  "st_block_height\030\004 \001(\004H\003\022\033\n\021last_block_re"
  "ject\030\005 \001(\004H\004B\030\n\026opt_memory_consumptionB\020"
  "\n\016opt_is_healthyB\020\n\016opt_is_syncingB\027\n\025op"
  "t_last_block_heightB\027\n\025opt_last_block_re"
  "jectB\032Z\030iroha.generated/protocolb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_qry_5fresponses_2eproto_deps[3] = {
  &::descriptor_table_block_2eproto,
  &::descriptor_table_primitive_2eproto,
  &::descriptor_table_transaction_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_qry_5fresponses_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_qry_5fresponses_2eproto = {
  false, false, 3400, descriptor_table_protodef_qry_5fresponses_2eproto, "qry_responses.proto", 
  &descriptor_table_qry_5fresponses_2eproto_once, descriptor_table_qry_5fresponses_2eproto_deps, 3, 23,
  schemas, file_default_instances, TableStruct_qry_5fresponses_2eproto::offsets,
  file_level_metadata_qry_5fresponses_2eproto, file_level_enum_descriptors_qry_5fresponses_2eproto, file_level_service_descriptors_qry_5fresponses_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_qry_5fresponses_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_qry_5fresponses_2eproto);
  return descriptor_table_qry_5fresponses_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_qry_5fresponses_2eproto(&descriptor_table_qry_5fresponses_2eproto);
namespace iroha {
namespace protocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorResponse_Reason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_qry_5fresponses_2eproto);
  return file_level_enum_descriptors_qry_5fresponses_2eproto[0];
}
bool ErrorResponse_Reason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ErrorResponse_Reason ErrorResponse::STATELESS_INVALID;
constexpr ErrorResponse_Reason ErrorResponse::STATEFUL_INVALID;
constexpr ErrorResponse_Reason ErrorResponse::NO_ACCOUNT;
constexpr ErrorResponse_Reason ErrorResponse::NO_ACCOUNT_ASSETS;
constexpr ErrorResponse_Reason ErrorResponse::NO_ACCOUNT_DETAIL;
constexpr ErrorResponse_Reason ErrorResponse::NO_SIGNATORIES;
constexpr ErrorResponse_Reason ErrorResponse::NOT_SUPPORTED;
constexpr ErrorResponse_Reason ErrorResponse::NO_ASSET;
constexpr ErrorResponse_Reason ErrorResponse::NO_ROLES;
constexpr ErrorResponse_Reason ErrorResponse::Reason_MIN;
constexpr ErrorResponse_Reason ErrorResponse::Reason_MAX;
constexpr int ErrorResponse::Reason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class Asset::_Internal {
 public:
};

Asset::Asset(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.Asset)
}
Asset::Asset(const Asset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset_id().empty()) {
    asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset_id(), 
      GetArena());
  }
  domain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_domain_id().empty()) {
    domain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_domain_id(), 
      GetArena());
  }
  precision_ = from.precision_;
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.Asset)
}

void Asset::SharedCtor() {
asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
domain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
precision_ = 0u;
}

Asset::~Asset() {
  // @@protoc_insertion_point(destructor:iroha.protocol.Asset)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Asset::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  asset_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  domain_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Asset::ArenaDtor(void* object) {
  Asset* _this = reinterpret_cast< Asset* >(object);
  (void)_this;
}
void Asset::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Asset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Asset::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.Asset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  asset_id_.ClearToEmpty();
  domain_id_.ClearToEmpty();
  precision_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Asset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string asset_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_asset_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.Asset.asset_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string domain_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_domain_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.Asset.domain_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 precision = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          precision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Asset::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.Asset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string asset_id = 1;
  if (this->asset_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset_id().data(), static_cast<int>(this->_internal_asset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.Asset.asset_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_asset_id(), target);
  }

  // string domain_id = 2;
  if (this->domain_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_domain_id().data(), static_cast<int>(this->_internal_domain_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.Asset.domain_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_domain_id(), target);
  }

  // uint32 precision = 3;
  if (this->precision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_precision(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.Asset)
  return target;
}

size_t Asset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.Asset)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string asset_id = 1;
  if (this->asset_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset_id());
  }

  // string domain_id = 2;
  if (this->domain_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_domain_id());
  }

  // uint32 precision = 3;
  if (this->precision() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_precision());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Asset::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.Asset)
  GOOGLE_DCHECK_NE(&from, this);
  const Asset* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Asset>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.Asset)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.Asset)
    MergeFrom(*source);
  }
}

void Asset::MergeFrom(const Asset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.Asset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.asset_id().size() > 0) {
    _internal_set_asset_id(from._internal_asset_id());
  }
  if (from.domain_id().size() > 0) {
    _internal_set_domain_id(from._internal_domain_id());
  }
  if (from.precision() != 0) {
    _internal_set_precision(from._internal_precision());
  }
}

void Asset::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.Asset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Asset::CopyFrom(const Asset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.Asset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Asset::IsInitialized() const {
  return true;
}

void Asset::InternalSwap(Asset* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  asset_id_.Swap(&other->asset_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  domain_id_.Swap(&other->domain_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(precision_, other->precision_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Asset::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Domain::_Internal {
 public:
};

Domain::Domain(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.Domain)
}
Domain::Domain(const Domain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  domain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_domain_id().empty()) {
    domain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_domain_id(), 
      GetArena());
  }
  default_role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_default_role().empty()) {
    default_role_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_default_role(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.Domain)
}

void Domain::SharedCtor() {
domain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
default_role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Domain::~Domain() {
  // @@protoc_insertion_point(destructor:iroha.protocol.Domain)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Domain::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  domain_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  default_role_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Domain::ArenaDtor(void* object) {
  Domain* _this = reinterpret_cast< Domain* >(object);
  (void)_this;
}
void Domain::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Domain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Domain::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.Domain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  domain_id_.ClearToEmpty();
  default_role_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Domain::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string domain_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_domain_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.Domain.domain_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string default_role = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_default_role();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.Domain.default_role"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Domain::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.Domain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string domain_id = 1;
  if (this->domain_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_domain_id().data(), static_cast<int>(this->_internal_domain_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.Domain.domain_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_domain_id(), target);
  }

  // string default_role = 2;
  if (this->default_role().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_default_role().data(), static_cast<int>(this->_internal_default_role().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.Domain.default_role");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_default_role(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.Domain)
  return target;
}

size_t Domain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.Domain)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string domain_id = 1;
  if (this->domain_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_domain_id());
  }

  // string default_role = 2;
  if (this->default_role().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_default_role());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Domain::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.Domain)
  GOOGLE_DCHECK_NE(&from, this);
  const Domain* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Domain>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.Domain)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.Domain)
    MergeFrom(*source);
  }
}

void Domain::MergeFrom(const Domain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.Domain)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.domain_id().size() > 0) {
    _internal_set_domain_id(from._internal_domain_id());
  }
  if (from.default_role().size() > 0) {
    _internal_set_default_role(from._internal_default_role());
  }
}

void Domain::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.Domain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Domain::CopyFrom(const Domain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.Domain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Domain::IsInitialized() const {
  return true;
}

void Domain::InternalSwap(Domain* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  domain_id_.Swap(&other->domain_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  default_role_.Swap(&other->default_role_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Domain::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Account::_Internal {
 public:
};

Account::Account(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.Account)
}
Account::Account(const Account& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account_id().empty()) {
    account_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account_id(), 
      GetArena());
  }
  domain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_domain_id().empty()) {
    domain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_domain_id(), 
      GetArena());
  }
  json_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_json_data().empty()) {
    json_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_json_data(), 
      GetArena());
  }
  quorum_ = from.quorum_;
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.Account)
}

void Account::SharedCtor() {
account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
domain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
json_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
quorum_ = 0u;
}

Account::~Account() {
  // @@protoc_insertion_point(destructor:iroha.protocol.Account)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Account::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  account_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  domain_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  json_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Account::ArenaDtor(void* object) {
  Account* _this = reinterpret_cast< Account* >(object);
  (void)_this;
}
void Account::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Account::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Account::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.Account)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_.ClearToEmpty();
  domain_id_.ClearToEmpty();
  json_data_.ClearToEmpty();
  quorum_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Account::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.Account.account_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string domain_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_domain_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.Account.domain_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 quorum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          quorum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string json_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_json_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.Account.json_data"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Account::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.Account)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.Account.account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_id(), target);
  }

  // string domain_id = 2;
  if (this->domain_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_domain_id().data(), static_cast<int>(this->_internal_domain_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.Account.domain_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_domain_id(), target);
  }

  // uint32 quorum = 3;
  if (this->quorum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_quorum(), target);
  }

  // string json_data = 4;
  if (this->json_data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_json_data().data(), static_cast<int>(this->_internal_json_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.Account.json_data");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_json_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.Account)
  return target;
}

size_t Account::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.Account)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  // string domain_id = 2;
  if (this->domain_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_domain_id());
  }

  // string json_data = 4;
  if (this->json_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_json_data());
  }

  // uint32 quorum = 3;
  if (this->quorum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_quorum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Account::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.Account)
  GOOGLE_DCHECK_NE(&from, this);
  const Account* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Account>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.Account)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.Account)
    MergeFrom(*source);
  }
}

void Account::MergeFrom(const Account& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.Account)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account_id().size() > 0) {
    _internal_set_account_id(from._internal_account_id());
  }
  if (from.domain_id().size() > 0) {
    _internal_set_domain_id(from._internal_domain_id());
  }
  if (from.json_data().size() > 0) {
    _internal_set_json_data(from._internal_json_data());
  }
  if (from.quorum() != 0) {
    _internal_set_quorum(from._internal_quorum());
  }
}

void Account::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.Account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Account::CopyFrom(const Account& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.Account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Account::IsInitialized() const {
  return true;
}

void Account::InternalSwap(Account* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  account_id_.Swap(&other->account_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  domain_id_.Swap(&other->domain_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  json_data_.Swap(&other->json_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(quorum_, other->quorum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Account::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AccountAsset::_Internal {
 public:
};

AccountAsset::AccountAsset(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.AccountAsset)
}
AccountAsset::AccountAsset(const AccountAsset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset_id().empty()) {
    asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset_id(), 
      GetArena());
  }
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account_id().empty()) {
    account_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account_id(), 
      GetArena());
  }
  balance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_balance().empty()) {
    balance_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_balance(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.AccountAsset)
}

void AccountAsset::SharedCtor() {
asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
balance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AccountAsset::~AccountAsset() {
  // @@protoc_insertion_point(destructor:iroha.protocol.AccountAsset)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AccountAsset::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  asset_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  balance_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AccountAsset::ArenaDtor(void* object) {
  AccountAsset* _this = reinterpret_cast< AccountAsset* >(object);
  (void)_this;
}
void AccountAsset::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountAsset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AccountAsset::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.AccountAsset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  asset_id_.ClearToEmpty();
  account_id_.ClearToEmpty();
  balance_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountAsset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string asset_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_asset_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.AccountAsset.asset_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_account_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.AccountAsset.account_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string balance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_balance();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.AccountAsset.balance"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountAsset::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.AccountAsset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string asset_id = 1;
  if (this->asset_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset_id().data(), static_cast<int>(this->_internal_asset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.AccountAsset.asset_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_asset_id(), target);
  }

  // string account_id = 2;
  if (this->account_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.AccountAsset.account_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_account_id(), target);
  }

  // string balance = 3;
  if (this->balance().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_balance().data(), static_cast<int>(this->_internal_balance().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.AccountAsset.balance");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_balance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.AccountAsset)
  return target;
}

size_t AccountAsset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.AccountAsset)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string asset_id = 1;
  if (this->asset_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset_id());
  }

  // string account_id = 2;
  if (this->account_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  // string balance = 3;
  if (this->balance().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_balance());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountAsset::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.AccountAsset)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountAsset* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountAsset>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.AccountAsset)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.AccountAsset)
    MergeFrom(*source);
  }
}

void AccountAsset::MergeFrom(const AccountAsset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.AccountAsset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.asset_id().size() > 0) {
    _internal_set_asset_id(from._internal_asset_id());
  }
  if (from.account_id().size() > 0) {
    _internal_set_account_id(from._internal_account_id());
  }
  if (from.balance().size() > 0) {
    _internal_set_balance(from._internal_balance());
  }
}

void AccountAsset::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.AccountAsset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountAsset::CopyFrom(const AccountAsset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.AccountAsset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountAsset::IsInitialized() const {
  return true;
}

void AccountAsset::InternalSwap(AccountAsset* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  asset_id_.Swap(&other->asset_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  account_id_.Swap(&other->account_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  balance_.Swap(&other->balance_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountAsset::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AccountAssetResponse::_Internal {
 public:
};

AccountAssetResponse::AccountAssetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  account_assets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.AccountAssetResponse)
}
AccountAssetResponse::AccountAssetResponse(const AccountAssetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      account_assets_(from.account_assets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  total_number_ = from.total_number_;
  clear_has_opt_next_asset_id();
  switch (from.opt_next_asset_id_case()) {
    case kNextAssetId: {
      _internal_set_next_asset_id(from._internal_next_asset_id());
      break;
    }
    case OPT_NEXT_ASSET_ID_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.AccountAssetResponse)
}

void AccountAssetResponse::SharedCtor() {
total_number_ = 0u;
clear_has_opt_next_asset_id();
}

AccountAssetResponse::~AccountAssetResponse() {
  // @@protoc_insertion_point(destructor:iroha.protocol.AccountAssetResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AccountAssetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_opt_next_asset_id()) {
    clear_opt_next_asset_id();
  }
}

void AccountAssetResponse::ArenaDtor(void* object) {
  AccountAssetResponse* _this = reinterpret_cast< AccountAssetResponse* >(object);
  (void)_this;
}
void AccountAssetResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountAssetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AccountAssetResponse::clear_opt_next_asset_id() {
// @@protoc_insertion_point(one_of_clear_start:iroha.protocol.AccountAssetResponse)
  switch (opt_next_asset_id_case()) {
    case kNextAssetId: {
      opt_next_asset_id_.next_asset_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case OPT_NEXT_ASSET_ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPT_NEXT_ASSET_ID_NOT_SET;
}


void AccountAssetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.AccountAssetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_assets_.Clear();
  total_number_ = 0u;
  clear_opt_next_asset_id();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountAssetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .iroha.protocol.AccountAsset account_assets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_account_assets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 total_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string next_asset_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_next_asset_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.AccountAssetResponse.next_asset_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountAssetResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.AccountAssetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .iroha.protocol.AccountAsset account_assets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_account_assets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_account_assets(i), target, stream);
  }

  // uint32 total_number = 2;
  if (this->total_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_total_number(), target);
  }

  // string next_asset_id = 3;
  if (_internal_has_next_asset_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_asset_id().data(), static_cast<int>(this->_internal_next_asset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.AccountAssetResponse.next_asset_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_next_asset_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.AccountAssetResponse)
  return target;
}

size_t AccountAssetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.AccountAssetResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iroha.protocol.AccountAsset account_assets = 1;
  total_size += 1UL * this->_internal_account_assets_size();
  for (const auto& msg : this->account_assets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 total_number = 2;
  if (this->total_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_total_number());
  }

  switch (opt_next_asset_id_case()) {
    // string next_asset_id = 3;
    case kNextAssetId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_next_asset_id());
      break;
    }
    case OPT_NEXT_ASSET_ID_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountAssetResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.AccountAssetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountAssetResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountAssetResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.AccountAssetResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.AccountAssetResponse)
    MergeFrom(*source);
  }
}

void AccountAssetResponse::MergeFrom(const AccountAssetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.AccountAssetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_assets_.MergeFrom(from.account_assets_);
  if (from.total_number() != 0) {
    _internal_set_total_number(from._internal_total_number());
  }
  switch (from.opt_next_asset_id_case()) {
    case kNextAssetId: {
      _internal_set_next_asset_id(from._internal_next_asset_id());
      break;
    }
    case OPT_NEXT_ASSET_ID_NOT_SET: {
      break;
    }
  }
}

void AccountAssetResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.AccountAssetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountAssetResponse::CopyFrom(const AccountAssetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.AccountAssetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountAssetResponse::IsInitialized() const {
  return true;
}

void AccountAssetResponse::InternalSwap(AccountAssetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  account_assets_.InternalSwap(&other->account_assets_);
  swap(total_number_, other->total_number_);
  swap(opt_next_asset_id_, other->opt_next_asset_id_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountAssetResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AccountDetailResponse::_Internal {
 public:
  static const ::iroha::protocol::AccountDetailRecordId& next_record_id(const AccountDetailResponse* msg);
};

const ::iroha::protocol::AccountDetailRecordId&
AccountDetailResponse::_Internal::next_record_id(const AccountDetailResponse* msg) {
  return *msg->next_record_id_;
}
void AccountDetailResponse::clear_next_record_id() {
  if (GetArena() == nullptr && next_record_id_ != nullptr) {
    delete next_record_id_;
  }
  next_record_id_ = nullptr;
}
AccountDetailResponse::AccountDetailResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.AccountDetailResponse)
}
AccountDetailResponse::AccountDetailResponse(const AccountDetailResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  detail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_detail().empty()) {
    detail_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_detail(), 
      GetArena());
  }
  if (from._internal_has_next_record_id()) {
    next_record_id_ = new ::iroha::protocol::AccountDetailRecordId(*from.next_record_id_);
  } else {
    next_record_id_ = nullptr;
  }
  total_number_ = from.total_number_;
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.AccountDetailResponse)
}

void AccountDetailResponse::SharedCtor() {
detail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&next_record_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&total_number_) -
    reinterpret_cast<char*>(&next_record_id_)) + sizeof(total_number_));
}

AccountDetailResponse::~AccountDetailResponse() {
  // @@protoc_insertion_point(destructor:iroha.protocol.AccountDetailResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AccountDetailResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  detail_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete next_record_id_;
}

void AccountDetailResponse::ArenaDtor(void* object) {
  AccountDetailResponse* _this = reinterpret_cast< AccountDetailResponse* >(object);
  (void)_this;
}
void AccountDetailResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountDetailResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AccountDetailResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.AccountDetailResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detail_.ClearToEmpty();
  if (GetArena() == nullptr && next_record_id_ != nullptr) {
    delete next_record_id_;
  }
  next_record_id_ = nullptr;
  total_number_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountDetailResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string detail = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_detail();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.AccountDetailResponse.detail"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 total_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.AccountDetailRecordId next_record_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_next_record_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountDetailResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.AccountDetailResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string detail = 1;
  if (this->detail().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_detail().data(), static_cast<int>(this->_internal_detail().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.AccountDetailResponse.detail");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_detail(), target);
  }

  // uint64 total_number = 2;
  if (this->total_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_total_number(), target);
  }

  // .iroha.protocol.AccountDetailRecordId next_record_id = 3;
  if (this->has_next_record_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::next_record_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.AccountDetailResponse)
  return target;
}

size_t AccountDetailResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.AccountDetailResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string detail = 1;
  if (this->detail().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_detail());
  }

  // .iroha.protocol.AccountDetailRecordId next_record_id = 3;
  if (this->has_next_record_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *next_record_id_);
  }

  // uint64 total_number = 2;
  if (this->total_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_total_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountDetailResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.AccountDetailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountDetailResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountDetailResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.AccountDetailResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.AccountDetailResponse)
    MergeFrom(*source);
  }
}

void AccountDetailResponse::MergeFrom(const AccountDetailResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.AccountDetailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.detail().size() > 0) {
    _internal_set_detail(from._internal_detail());
  }
  if (from.has_next_record_id()) {
    _internal_mutable_next_record_id()->::iroha::protocol::AccountDetailRecordId::MergeFrom(from._internal_next_record_id());
  }
  if (from.total_number() != 0) {
    _internal_set_total_number(from._internal_total_number());
  }
}

void AccountDetailResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.AccountDetailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountDetailResponse::CopyFrom(const AccountDetailResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.AccountDetailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountDetailResponse::IsInitialized() const {
  return true;
}

void AccountDetailResponse::InternalSwap(AccountDetailResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  detail_.Swap(&other->detail_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccountDetailResponse, total_number_)
      + sizeof(AccountDetailResponse::total_number_)
      - PROTOBUF_FIELD_OFFSET(AccountDetailResponse, next_record_id_)>(
          reinterpret_cast<char*>(&next_record_id_),
          reinterpret_cast<char*>(&other->next_record_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountDetailResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AccountResponse::_Internal {
 public:
  static const ::iroha::protocol::Account& account(const AccountResponse* msg);
};

const ::iroha::protocol::Account&
AccountResponse::_Internal::account(const AccountResponse* msg) {
  return *msg->account_;
}
AccountResponse::AccountResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  account_roles_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.AccountResponse)
}
AccountResponse::AccountResponse(const AccountResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      account_roles_(from.account_roles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_account()) {
    account_ = new ::iroha::protocol::Account(*from.account_);
  } else {
    account_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.AccountResponse)
}

void AccountResponse::SharedCtor() {
account_ = nullptr;
}

AccountResponse::~AccountResponse() {
  // @@protoc_insertion_point(destructor:iroha.protocol.AccountResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AccountResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete account_;
}

void AccountResponse::ArenaDtor(void* object) {
  AccountResponse* _this = reinterpret_cast< AccountResponse* >(object);
  (void)_this;
}
void AccountResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AccountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.AccountResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_roles_.Clear();
  if (GetArena() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .iroha.protocol.Account account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string account_roles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_account_roles();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.AccountResponse.account_roles"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.AccountResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .iroha.protocol.Account account = 1;
  if (this->has_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::account(this), target, stream);
  }

  // repeated string account_roles = 2;
  for (int i = 0, n = this->_internal_account_roles_size(); i < n; i++) {
    const auto& s = this->_internal_account_roles(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.AccountResponse.account_roles");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.AccountResponse)
  return target;
}

size_t AccountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.AccountResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string account_roles = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(account_roles_.size());
  for (int i = 0, n = account_roles_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      account_roles_.Get(i));
  }

  // .iroha.protocol.Account account = 1;
  if (this->has_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *account_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.AccountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.AccountResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.AccountResponse)
    MergeFrom(*source);
  }
}

void AccountResponse::MergeFrom(const AccountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.AccountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_roles_.MergeFrom(from.account_roles_);
  if (from.has_account()) {
    _internal_mutable_account()->::iroha::protocol::Account::MergeFrom(from._internal_account());
  }
}

void AccountResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.AccountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountResponse::CopyFrom(const AccountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.AccountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountResponse::IsInitialized() const {
  return true;
}

void AccountResponse::InternalSwap(AccountResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  account_roles_.InternalSwap(&other->account_roles_);
  swap(account_, other->account_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AssetResponse::_Internal {
 public:
  static const ::iroha::protocol::Asset& asset(const AssetResponse* msg);
};

const ::iroha::protocol::Asset&
AssetResponse::_Internal::asset(const AssetResponse* msg) {
  return *msg->asset_;
}
AssetResponse::AssetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.AssetResponse)
}
AssetResponse::AssetResponse(const AssetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_asset()) {
    asset_ = new ::iroha::protocol::Asset(*from.asset_);
  } else {
    asset_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.AssetResponse)
}

void AssetResponse::SharedCtor() {
asset_ = nullptr;
}

AssetResponse::~AssetResponse() {
  // @@protoc_insertion_point(destructor:iroha.protocol.AssetResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AssetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete asset_;
}

void AssetResponse::ArenaDtor(void* object) {
  AssetResponse* _this = reinterpret_cast< AssetResponse* >(object);
  (void)_this;
}
void AssetResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AssetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AssetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.AssetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && asset_ != nullptr) {
    delete asset_;
  }
  asset_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .iroha.protocol.Asset asset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_asset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AssetResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.AssetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .iroha.protocol.Asset asset = 1;
  if (this->has_asset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::asset(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.AssetResponse)
  return target;
}

size_t AssetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.AssetResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .iroha.protocol.Asset asset = 1;
  if (this->has_asset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *asset_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AssetResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.AssetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AssetResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AssetResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.AssetResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.AssetResponse)
    MergeFrom(*source);
  }
}

void AssetResponse::MergeFrom(const AssetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.AssetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_asset()) {
    _internal_mutable_asset()->::iroha::protocol::Asset::MergeFrom(from._internal_asset());
  }
}

void AssetResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.AssetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssetResponse::CopyFrom(const AssetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.AssetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetResponse::IsInitialized() const {
  return true;
}

void AssetResponse::InternalSwap(AssetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(asset_, other->asset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AssetResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RolesResponse::_Internal {
 public:
};

RolesResponse::RolesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  roles_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.RolesResponse)
}
RolesResponse::RolesResponse(const RolesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      roles_(from.roles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.RolesResponse)
}

void RolesResponse::SharedCtor() {
}

RolesResponse::~RolesResponse() {
  // @@protoc_insertion_point(destructor:iroha.protocol.RolesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RolesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RolesResponse::ArenaDtor(void* object) {
  RolesResponse* _this = reinterpret_cast< RolesResponse* >(object);
  (void)_this;
}
void RolesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RolesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RolesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.RolesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roles_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RolesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string roles = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_roles();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.RolesResponse.roles"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RolesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.RolesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string roles = 1;
  for (int i = 0, n = this->_internal_roles_size(); i < n; i++) {
    const auto& s = this->_internal_roles(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.RolesResponse.roles");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.RolesResponse)
  return target;
}

size_t RolesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.RolesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string roles = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(roles_.size());
  for (int i = 0, n = roles_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      roles_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RolesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.RolesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RolesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RolesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.RolesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.RolesResponse)
    MergeFrom(*source);
  }
}

void RolesResponse::MergeFrom(const RolesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.RolesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  roles_.MergeFrom(from.roles_);
}

void RolesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.RolesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RolesResponse::CopyFrom(const RolesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.RolesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RolesResponse::IsInitialized() const {
  return true;
}

void RolesResponse::InternalSwap(RolesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  roles_.InternalSwap(&other->roles_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RolesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RolePermissionsResponse::_Internal {
 public:
};

RolePermissionsResponse::RolePermissionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  permissions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.RolePermissionsResponse)
}
RolePermissionsResponse::RolePermissionsResponse(const RolePermissionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      permissions_(from.permissions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.RolePermissionsResponse)
}

void RolePermissionsResponse::SharedCtor() {
}

RolePermissionsResponse::~RolePermissionsResponse() {
  // @@protoc_insertion_point(destructor:iroha.protocol.RolePermissionsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RolePermissionsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RolePermissionsResponse::ArenaDtor(void* object) {
  RolePermissionsResponse* _this = reinterpret_cast< RolePermissionsResponse* >(object);
  (void)_this;
}
void RolePermissionsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RolePermissionsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RolePermissionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.RolePermissionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  permissions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RolePermissionsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .iroha.protocol.RolePermission permissions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_permissions(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_permissions(static_cast<::iroha::protocol::RolePermission>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RolePermissionsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.RolePermissionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .iroha.protocol.RolePermission permissions = 1;
  {
    int byte_size = _permissions_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          1, permissions_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.RolePermissionsResponse)
  return target;
}

size_t RolePermissionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.RolePermissionsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iroha.protocol.RolePermission permissions = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_permissions_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_permissions(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _permissions_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RolePermissionsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.RolePermissionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RolePermissionsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RolePermissionsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.RolePermissionsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.RolePermissionsResponse)
    MergeFrom(*source);
  }
}

void RolePermissionsResponse::MergeFrom(const RolePermissionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.RolePermissionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  permissions_.MergeFrom(from.permissions_);
}

void RolePermissionsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.RolePermissionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RolePermissionsResponse::CopyFrom(const RolePermissionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.RolePermissionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RolePermissionsResponse::IsInitialized() const {
  return true;
}

void RolePermissionsResponse::InternalSwap(RolePermissionsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  permissions_.InternalSwap(&other->permissions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RolePermissionsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ErrorResponse::_Internal {
 public:
};

ErrorResponse::ErrorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.ErrorResponse)
}
ErrorResponse::ErrorResponse(const ErrorResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  ::memcpy(&reason_, &from.reason_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&reason_)) + sizeof(error_code_));
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.ErrorResponse)
}

void ErrorResponse::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&reason_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&reason_)) + sizeof(error_code_));
}

ErrorResponse::~ErrorResponse() {
  // @@protoc_insertion_point(destructor:iroha.protocol.ErrorResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ErrorResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ErrorResponse::ArenaDtor(void* object) {
  ErrorResponse* _this = reinterpret_cast< ErrorResponse* >(object);
  (void)_this;
}
void ErrorResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ErrorResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ErrorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.ErrorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  ::memset(&reason_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&reason_)) + sizeof(error_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ErrorResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .iroha.protocol.ErrorResponse.Reason reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reason(static_cast<::iroha::protocol::ErrorResponse_Reason>(val));
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.ErrorResponse.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 error_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ErrorResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.ErrorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .iroha.protocol.ErrorResponse.Reason reason = 1;
  if (this->reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_reason(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.ErrorResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // uint32 error_code = 3;
  if (this->error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_error_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.ErrorResponse)
  return target;
}

size_t ErrorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.ErrorResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .iroha.protocol.ErrorResponse.Reason reason = 1;
  if (this->reason() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason());
  }

  // uint32 error_code = 3;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_error_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ErrorResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.ErrorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ErrorResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ErrorResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.ErrorResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.ErrorResponse)
    MergeFrom(*source);
  }
}

void ErrorResponse::MergeFrom(const ErrorResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.ErrorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.reason() != 0) {
    _internal_set_reason(from._internal_reason());
  }
  if (from.error_code() != 0) {
    _internal_set_error_code(from._internal_error_code());
  }
}

void ErrorResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.ErrorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrorResponse::CopyFrom(const ErrorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.ErrorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorResponse::IsInitialized() const {
  return true;
}

void ErrorResponse::InternalSwap(ErrorResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ErrorResponse, error_code_)
      + sizeof(ErrorResponse::error_code_)
      - PROTOBUF_FIELD_OFFSET(ErrorResponse, reason_)>(
          reinterpret_cast<char*>(&reason_),
          reinterpret_cast<char*>(&other->reason_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ErrorResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SignatoriesResponse::_Internal {
 public:
};

SignatoriesResponse::SignatoriesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  keys_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.SignatoriesResponse)
}
SignatoriesResponse::SignatoriesResponse(const SignatoriesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.SignatoriesResponse)
}

void SignatoriesResponse::SharedCtor() {
}

SignatoriesResponse::~SignatoriesResponse() {
  // @@protoc_insertion_point(destructor:iroha.protocol.SignatoriesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SignatoriesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SignatoriesResponse::ArenaDtor(void* object) {
  SignatoriesResponse* _this = reinterpret_cast< SignatoriesResponse* >(object);
  (void)_this;
}
void SignatoriesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignatoriesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SignatoriesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.SignatoriesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignatoriesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string keys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_keys();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.SignatoriesResponse.keys"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignatoriesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.SignatoriesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string keys = 1;
  for (int i = 0, n = this->_internal_keys_size(); i < n; i++) {
    const auto& s = this->_internal_keys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.SignatoriesResponse.keys");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.SignatoriesResponse)
  return target;
}

size_t SignatoriesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.SignatoriesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string keys = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(keys_.size());
  for (int i = 0, n = keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      keys_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignatoriesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.SignatoriesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SignatoriesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignatoriesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.SignatoriesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.SignatoriesResponse)
    MergeFrom(*source);
  }
}

void SignatoriesResponse::MergeFrom(const SignatoriesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.SignatoriesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
}

void SignatoriesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.SignatoriesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignatoriesResponse::CopyFrom(const SignatoriesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.SignatoriesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignatoriesResponse::IsInitialized() const {
  return true;
}

void SignatoriesResponse::InternalSwap(SignatoriesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  keys_.InternalSwap(&other->keys_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignatoriesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TransactionsResponse::_Internal {
 public:
};

void TransactionsResponse::clear_transactions() {
  transactions_.Clear();
}
TransactionsResponse::TransactionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  transactions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.TransactionsResponse)
}
TransactionsResponse::TransactionsResponse(const TransactionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      transactions_(from.transactions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.TransactionsResponse)
}

void TransactionsResponse::SharedCtor() {
}

TransactionsResponse::~TransactionsResponse() {
  // @@protoc_insertion_point(destructor:iroha.protocol.TransactionsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransactionsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TransactionsResponse::ArenaDtor(void* object) {
  TransactionsResponse* _this = reinterpret_cast< TransactionsResponse* >(object);
  (void)_this;
}
void TransactionsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.TransactionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transactions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .iroha.protocol.Transaction transactions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.TransactionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .iroha.protocol.Transaction transactions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transactions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_transactions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.TransactionsResponse)
  return target;
}

size_t TransactionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.TransactionsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iroha.protocol.Transaction transactions = 1;
  total_size += 1UL * this->_internal_transactions_size();
  for (const auto& msg : this->transactions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.TransactionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransactionsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.TransactionsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.TransactionsResponse)
    MergeFrom(*source);
  }
}

void TransactionsResponse::MergeFrom(const TransactionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.TransactionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transactions_.MergeFrom(from.transactions_);
}

void TransactionsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.TransactionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionsResponse::CopyFrom(const TransactionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.TransactionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionsResponse::IsInitialized() const {
  return true;
}

void TransactionsResponse::InternalSwap(TransactionsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  transactions_.InternalSwap(&other->transactions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TransactionsPageResponse::_Internal {
 public:
};

void TransactionsPageResponse::clear_transactions() {
  transactions_.Clear();
}
TransactionsPageResponse::TransactionsPageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  transactions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.TransactionsPageResponse)
}
TransactionsPageResponse::TransactionsPageResponse(const TransactionsPageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      transactions_(from.transactions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  all_transactions_size_ = from.all_transactions_size_;
  clear_has_next_page_tag();
  switch (from.next_page_tag_case()) {
    case kNextTxHash: {
      _internal_set_next_tx_hash(from._internal_next_tx_hash());
      break;
    }
    case NEXT_PAGE_TAG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.TransactionsPageResponse)
}

void TransactionsPageResponse::SharedCtor() {
all_transactions_size_ = 0u;
clear_has_next_page_tag();
}

TransactionsPageResponse::~TransactionsPageResponse() {
  // @@protoc_insertion_point(destructor:iroha.protocol.TransactionsPageResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransactionsPageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_next_page_tag()) {
    clear_next_page_tag();
  }
}

void TransactionsPageResponse::ArenaDtor(void* object) {
  TransactionsPageResponse* _this = reinterpret_cast< TransactionsPageResponse* >(object);
  (void)_this;
}
void TransactionsPageResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionsPageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionsPageResponse::clear_next_page_tag() {
// @@protoc_insertion_point(one_of_clear_start:iroha.protocol.TransactionsPageResponse)
  switch (next_page_tag_case()) {
    case kNextTxHash: {
      next_page_tag_.next_tx_hash_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case NEXT_PAGE_TAG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NEXT_PAGE_TAG_NOT_SET;
}


void TransactionsPageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.TransactionsPageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transactions_.Clear();
  all_transactions_size_ = 0u;
  clear_next_page_tag();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionsPageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .iroha.protocol.Transaction transactions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 all_transactions_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          all_transactions_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string next_tx_hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_next_tx_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.TransactionsPageResponse.next_tx_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionsPageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.TransactionsPageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .iroha.protocol.Transaction transactions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transactions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_transactions(i), target, stream);
  }

  // uint32 all_transactions_size = 2;
  if (this->all_transactions_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_all_transactions_size(), target);
  }

  // string next_tx_hash = 3;
  if (_internal_has_next_tx_hash()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_tx_hash().data(), static_cast<int>(this->_internal_next_tx_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.TransactionsPageResponse.next_tx_hash");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_next_tx_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.TransactionsPageResponse)
  return target;
}

size_t TransactionsPageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.TransactionsPageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iroha.protocol.Transaction transactions = 1;
  total_size += 1UL * this->_internal_transactions_size();
  for (const auto& msg : this->transactions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 all_transactions_size = 2;
  if (this->all_transactions_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_all_transactions_size());
  }

  switch (next_page_tag_case()) {
    // string next_tx_hash = 3;
    case kNextTxHash: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_next_tx_hash());
      break;
    }
    case NEXT_PAGE_TAG_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionsPageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.TransactionsPageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionsPageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransactionsPageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.TransactionsPageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.TransactionsPageResponse)
    MergeFrom(*source);
  }
}

void TransactionsPageResponse::MergeFrom(const TransactionsPageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.TransactionsPageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transactions_.MergeFrom(from.transactions_);
  if (from.all_transactions_size() != 0) {
    _internal_set_all_transactions_size(from._internal_all_transactions_size());
  }
  switch (from.next_page_tag_case()) {
    case kNextTxHash: {
      _internal_set_next_tx_hash(from._internal_next_tx_hash());
      break;
    }
    case NEXT_PAGE_TAG_NOT_SET: {
      break;
    }
  }
}

void TransactionsPageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.TransactionsPageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionsPageResponse::CopyFrom(const TransactionsPageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.TransactionsPageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionsPageResponse::IsInitialized() const {
  return true;
}

void TransactionsPageResponse::InternalSwap(TransactionsPageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  transactions_.InternalSwap(&other->transactions_);
  swap(all_transactions_size_, other->all_transactions_size_);
  swap(next_page_tag_, other->next_page_tag_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionsPageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PendingTransactionsPageResponse_BatchInfo::_Internal {
 public:
};

PendingTransactionsPageResponse_BatchInfo::PendingTransactionsPageResponse_BatchInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.PendingTransactionsPageResponse.BatchInfo)
}
PendingTransactionsPageResponse_BatchInfo::PendingTransactionsPageResponse_BatchInfo(const PendingTransactionsPageResponse_BatchInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  first_tx_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_first_tx_hash().empty()) {
    first_tx_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_first_tx_hash(), 
      GetArena());
  }
  batch_size_ = from.batch_size_;
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.PendingTransactionsPageResponse.BatchInfo)
}

void PendingTransactionsPageResponse_BatchInfo::SharedCtor() {
first_tx_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
batch_size_ = 0u;
}

PendingTransactionsPageResponse_BatchInfo::~PendingTransactionsPageResponse_BatchInfo() {
  // @@protoc_insertion_point(destructor:iroha.protocol.PendingTransactionsPageResponse.BatchInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PendingTransactionsPageResponse_BatchInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  first_tx_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PendingTransactionsPageResponse_BatchInfo::ArenaDtor(void* object) {
  PendingTransactionsPageResponse_BatchInfo* _this = reinterpret_cast< PendingTransactionsPageResponse_BatchInfo* >(object);
  (void)_this;
}
void PendingTransactionsPageResponse_BatchInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PendingTransactionsPageResponse_BatchInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PendingTransactionsPageResponse_BatchInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.PendingTransactionsPageResponse.BatchInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  first_tx_hash_.ClearToEmpty();
  batch_size_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PendingTransactionsPageResponse_BatchInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string first_tx_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_first_tx_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.PendingTransactionsPageResponse.BatchInfo.first_tx_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 batch_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PendingTransactionsPageResponse_BatchInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.PendingTransactionsPageResponse.BatchInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string first_tx_hash = 1;
  if (this->first_tx_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_first_tx_hash().data(), static_cast<int>(this->_internal_first_tx_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.PendingTransactionsPageResponse.BatchInfo.first_tx_hash");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_first_tx_hash(), target);
  }

  // uint32 batch_size = 2;
  if (this->batch_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_batch_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.PendingTransactionsPageResponse.BatchInfo)
  return target;
}

size_t PendingTransactionsPageResponse_BatchInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.PendingTransactionsPageResponse.BatchInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string first_tx_hash = 1;
  if (this->first_tx_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_first_tx_hash());
  }

  // uint32 batch_size = 2;
  if (this->batch_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_batch_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PendingTransactionsPageResponse_BatchInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.PendingTransactionsPageResponse.BatchInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PendingTransactionsPageResponse_BatchInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PendingTransactionsPageResponse_BatchInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.PendingTransactionsPageResponse.BatchInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.PendingTransactionsPageResponse.BatchInfo)
    MergeFrom(*source);
  }
}

void PendingTransactionsPageResponse_BatchInfo::MergeFrom(const PendingTransactionsPageResponse_BatchInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.PendingTransactionsPageResponse.BatchInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.first_tx_hash().size() > 0) {
    _internal_set_first_tx_hash(from._internal_first_tx_hash());
  }
  if (from.batch_size() != 0) {
    _internal_set_batch_size(from._internal_batch_size());
  }
}

void PendingTransactionsPageResponse_BatchInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.PendingTransactionsPageResponse.BatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PendingTransactionsPageResponse_BatchInfo::CopyFrom(const PendingTransactionsPageResponse_BatchInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.PendingTransactionsPageResponse.BatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PendingTransactionsPageResponse_BatchInfo::IsInitialized() const {
  return true;
}

void PendingTransactionsPageResponse_BatchInfo::InternalSwap(PendingTransactionsPageResponse_BatchInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  first_tx_hash_.Swap(&other->first_tx_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(batch_size_, other->batch_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PendingTransactionsPageResponse_BatchInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PendingTransactionsPageResponse::_Internal {
 public:
  static const ::iroha::protocol::PendingTransactionsPageResponse_BatchInfo& next_batch_info(const PendingTransactionsPageResponse* msg);
};

const ::iroha::protocol::PendingTransactionsPageResponse_BatchInfo&
PendingTransactionsPageResponse::_Internal::next_batch_info(const PendingTransactionsPageResponse* msg) {
  return *msg->next_batch_info_;
}
void PendingTransactionsPageResponse::clear_transactions() {
  transactions_.Clear();
}
PendingTransactionsPageResponse::PendingTransactionsPageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  transactions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.PendingTransactionsPageResponse)
}
PendingTransactionsPageResponse::PendingTransactionsPageResponse(const PendingTransactionsPageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      transactions_(from.transactions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_next_batch_info()) {
    next_batch_info_ = new ::iroha::protocol::PendingTransactionsPageResponse_BatchInfo(*from.next_batch_info_);
  } else {
    next_batch_info_ = nullptr;
  }
  all_transactions_size_ = from.all_transactions_size_;
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.PendingTransactionsPageResponse)
}

void PendingTransactionsPageResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&next_batch_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&all_transactions_size_) -
    reinterpret_cast<char*>(&next_batch_info_)) + sizeof(all_transactions_size_));
}

PendingTransactionsPageResponse::~PendingTransactionsPageResponse() {
  // @@protoc_insertion_point(destructor:iroha.protocol.PendingTransactionsPageResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PendingTransactionsPageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete next_batch_info_;
}

void PendingTransactionsPageResponse::ArenaDtor(void* object) {
  PendingTransactionsPageResponse* _this = reinterpret_cast< PendingTransactionsPageResponse* >(object);
  (void)_this;
}
void PendingTransactionsPageResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PendingTransactionsPageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PendingTransactionsPageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.PendingTransactionsPageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transactions_.Clear();
  if (GetArena() == nullptr && next_batch_info_ != nullptr) {
    delete next_batch_info_;
  }
  next_batch_info_ = nullptr;
  all_transactions_size_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PendingTransactionsPageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .iroha.protocol.Transaction transactions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 all_transactions_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          all_transactions_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.PendingTransactionsPageResponse.BatchInfo next_batch_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_next_batch_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PendingTransactionsPageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.PendingTransactionsPageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .iroha.protocol.Transaction transactions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transactions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_transactions(i), target, stream);
  }

  // uint32 all_transactions_size = 2;
  if (this->all_transactions_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_all_transactions_size(), target);
  }

  // .iroha.protocol.PendingTransactionsPageResponse.BatchInfo next_batch_info = 3;
  if (this->has_next_batch_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::next_batch_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.PendingTransactionsPageResponse)
  return target;
}

size_t PendingTransactionsPageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.PendingTransactionsPageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iroha.protocol.Transaction transactions = 1;
  total_size += 1UL * this->_internal_transactions_size();
  for (const auto& msg : this->transactions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .iroha.protocol.PendingTransactionsPageResponse.BatchInfo next_batch_info = 3;
  if (this->has_next_batch_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *next_batch_info_);
  }

  // uint32 all_transactions_size = 2;
  if (this->all_transactions_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_all_transactions_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PendingTransactionsPageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.PendingTransactionsPageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PendingTransactionsPageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PendingTransactionsPageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.PendingTransactionsPageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.PendingTransactionsPageResponse)
    MergeFrom(*source);
  }
}

void PendingTransactionsPageResponse::MergeFrom(const PendingTransactionsPageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.PendingTransactionsPageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transactions_.MergeFrom(from.transactions_);
  if (from.has_next_batch_info()) {
    _internal_mutable_next_batch_info()->::iroha::protocol::PendingTransactionsPageResponse_BatchInfo::MergeFrom(from._internal_next_batch_info());
  }
  if (from.all_transactions_size() != 0) {
    _internal_set_all_transactions_size(from._internal_all_transactions_size());
  }
}

void PendingTransactionsPageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.PendingTransactionsPageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PendingTransactionsPageResponse::CopyFrom(const PendingTransactionsPageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.PendingTransactionsPageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PendingTransactionsPageResponse::IsInitialized() const {
  return true;
}

void PendingTransactionsPageResponse::InternalSwap(PendingTransactionsPageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  transactions_.InternalSwap(&other->transactions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PendingTransactionsPageResponse, all_transactions_size_)
      + sizeof(PendingTransactionsPageResponse::all_transactions_size_)
      - PROTOBUF_FIELD_OFFSET(PendingTransactionsPageResponse, next_batch_info_)>(
          reinterpret_cast<char*>(&next_batch_info_),
          reinterpret_cast<char*>(&other->next_batch_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PendingTransactionsPageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PeersResponse::_Internal {
 public:
};

void PeersResponse::clear_peers() {
  peers_.Clear();
}
PeersResponse::PeersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  peers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.PeersResponse)
}
PeersResponse::PeersResponse(const PeersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      peers_(from.peers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.PeersResponse)
}

void PeersResponse::SharedCtor() {
}

PeersResponse::~PeersResponse() {
  // @@protoc_insertion_point(destructor:iroha.protocol.PeersResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PeersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PeersResponse::ArenaDtor(void* object) {
  PeersResponse* _this = reinterpret_cast< PeersResponse* >(object);
  (void)_this;
}
void PeersResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PeersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PeersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.PeersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PeersResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .iroha.protocol.Peer peers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_peers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PeersResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.PeersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .iroha.protocol.Peer peers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_peers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_peers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.PeersResponse)
  return target;
}

size_t PeersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.PeersResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iroha.protocol.Peer peers = 1;
  total_size += 1UL * this->_internal_peers_size();
  for (const auto& msg : this->peers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeersResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.PeersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PeersResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PeersResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.PeersResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.PeersResponse)
    MergeFrom(*source);
  }
}

void PeersResponse::MergeFrom(const PeersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.PeersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  peers_.MergeFrom(from.peers_);
}

void PeersResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.PeersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeersResponse::CopyFrom(const PeersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.PeersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeersResponse::IsInitialized() const {
  return true;
}

void PeersResponse::InternalSwap(PeersResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  peers_.InternalSwap(&other->peers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PeersResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EngineReceiptsResponse::_Internal {
 public:
};

void EngineReceiptsResponse::clear_engine_receipts() {
  engine_receipts_.Clear();
}
EngineReceiptsResponse::EngineReceiptsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  engine_receipts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.EngineReceiptsResponse)
}
EngineReceiptsResponse::EngineReceiptsResponse(const EngineReceiptsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      engine_receipts_(from.engine_receipts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.EngineReceiptsResponse)
}

void EngineReceiptsResponse::SharedCtor() {
}

EngineReceiptsResponse::~EngineReceiptsResponse() {
  // @@protoc_insertion_point(destructor:iroha.protocol.EngineReceiptsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EngineReceiptsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EngineReceiptsResponse::ArenaDtor(void* object) {
  EngineReceiptsResponse* _this = reinterpret_cast< EngineReceiptsResponse* >(object);
  (void)_this;
}
void EngineReceiptsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EngineReceiptsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EngineReceiptsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.EngineReceiptsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  engine_receipts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EngineReceiptsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .iroha.protocol.EngineReceipt engine_receipts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_engine_receipts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EngineReceiptsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.EngineReceiptsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .iroha.protocol.EngineReceipt engine_receipts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_engine_receipts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_engine_receipts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.EngineReceiptsResponse)
  return target;
}

size_t EngineReceiptsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.EngineReceiptsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iroha.protocol.EngineReceipt engine_receipts = 1;
  total_size += 1UL * this->_internal_engine_receipts_size();
  for (const auto& msg : this->engine_receipts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EngineReceiptsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.EngineReceiptsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const EngineReceiptsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EngineReceiptsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.EngineReceiptsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.EngineReceiptsResponse)
    MergeFrom(*source);
  }
}

void EngineReceiptsResponse::MergeFrom(const EngineReceiptsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.EngineReceiptsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  engine_receipts_.MergeFrom(from.engine_receipts_);
}

void EngineReceiptsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.EngineReceiptsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EngineReceiptsResponse::CopyFrom(const EngineReceiptsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.EngineReceiptsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EngineReceiptsResponse::IsInitialized() const {
  return true;
}

void EngineReceiptsResponse::InternalSwap(EngineReceiptsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  engine_receipts_.InternalSwap(&other->engine_receipts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EngineReceiptsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class QueryResponse::_Internal {
 public:
  static const ::iroha::protocol::AccountAssetResponse& account_assets_response(const QueryResponse* msg);
  static const ::iroha::protocol::AccountDetailResponse& account_detail_response(const QueryResponse* msg);
  static const ::iroha::protocol::AccountResponse& account_response(const QueryResponse* msg);
  static const ::iroha::protocol::ErrorResponse& error_response(const QueryResponse* msg);
  static const ::iroha::protocol::SignatoriesResponse& signatories_response(const QueryResponse* msg);
  static const ::iroha::protocol::TransactionsResponse& transactions_response(const QueryResponse* msg);
  static const ::iroha::protocol::AssetResponse& asset_response(const QueryResponse* msg);
  static const ::iroha::protocol::RolesResponse& roles_response(const QueryResponse* msg);
  static const ::iroha::protocol::RolePermissionsResponse& role_permissions_response(const QueryResponse* msg);
  static const ::iroha::protocol::TransactionsPageResponse& transactions_page_response(const QueryResponse* msg);
  static const ::iroha::protocol::PendingTransactionsPageResponse& pending_transactions_page_response(const QueryResponse* msg);
  static const ::iroha::protocol::BlockResponse& block_response(const QueryResponse* msg);
  static const ::iroha::protocol::PeersResponse& peers_response(const QueryResponse* msg);
  static const ::iroha::protocol::EngineReceiptsResponse& engine_receipts_response(const QueryResponse* msg);
};

const ::iroha::protocol::AccountAssetResponse&
QueryResponse::_Internal::account_assets_response(const QueryResponse* msg) {
  return *msg->response_.account_assets_response_;
}
const ::iroha::protocol::AccountDetailResponse&
QueryResponse::_Internal::account_detail_response(const QueryResponse* msg) {
  return *msg->response_.account_detail_response_;
}
const ::iroha::protocol::AccountResponse&
QueryResponse::_Internal::account_response(const QueryResponse* msg) {
  return *msg->response_.account_response_;
}
const ::iroha::protocol::ErrorResponse&
QueryResponse::_Internal::error_response(const QueryResponse* msg) {
  return *msg->response_.error_response_;
}
const ::iroha::protocol::SignatoriesResponse&
QueryResponse::_Internal::signatories_response(const QueryResponse* msg) {
  return *msg->response_.signatories_response_;
}
const ::iroha::protocol::TransactionsResponse&
QueryResponse::_Internal::transactions_response(const QueryResponse* msg) {
  return *msg->response_.transactions_response_;
}
const ::iroha::protocol::AssetResponse&
QueryResponse::_Internal::asset_response(const QueryResponse* msg) {
  return *msg->response_.asset_response_;
}
const ::iroha::protocol::RolesResponse&
QueryResponse::_Internal::roles_response(const QueryResponse* msg) {
  return *msg->response_.roles_response_;
}
const ::iroha::protocol::RolePermissionsResponse&
QueryResponse::_Internal::role_permissions_response(const QueryResponse* msg) {
  return *msg->response_.role_permissions_response_;
}
const ::iroha::protocol::TransactionsPageResponse&
QueryResponse::_Internal::transactions_page_response(const QueryResponse* msg) {
  return *msg->response_.transactions_page_response_;
}
const ::iroha::protocol::PendingTransactionsPageResponse&
QueryResponse::_Internal::pending_transactions_page_response(const QueryResponse* msg) {
  return *msg->response_.pending_transactions_page_response_;
}
const ::iroha::protocol::BlockResponse&
QueryResponse::_Internal::block_response(const QueryResponse* msg) {
  return *msg->response_.block_response_;
}
const ::iroha::protocol::PeersResponse&
QueryResponse::_Internal::peers_response(const QueryResponse* msg) {
  return *msg->response_.peers_response_;
}
const ::iroha::protocol::EngineReceiptsResponse&
QueryResponse::_Internal::engine_receipts_response(const QueryResponse* msg) {
  return *msg->response_.engine_receipts_response_;
}
void QueryResponse::set_allocated_account_assets_response(::iroha::protocol::AccountAssetResponse* account_assets_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_response();
  if (account_assets_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(account_assets_response);
    if (message_arena != submessage_arena) {
      account_assets_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account_assets_response, submessage_arena);
    }
    set_has_account_assets_response();
    response_.account_assets_response_ = account_assets_response;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.QueryResponse.account_assets_response)
}
void QueryResponse::set_allocated_account_detail_response(::iroha::protocol::AccountDetailResponse* account_detail_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_response();
  if (account_detail_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(account_detail_response);
    if (message_arena != submessage_arena) {
      account_detail_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account_detail_response, submessage_arena);
    }
    set_has_account_detail_response();
    response_.account_detail_response_ = account_detail_response;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.QueryResponse.account_detail_response)
}
void QueryResponse::set_allocated_account_response(::iroha::protocol::AccountResponse* account_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_response();
  if (account_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(account_response);
    if (message_arena != submessage_arena) {
      account_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account_response, submessage_arena);
    }
    set_has_account_response();
    response_.account_response_ = account_response;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.QueryResponse.account_response)
}
void QueryResponse::set_allocated_error_response(::iroha::protocol::ErrorResponse* error_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_response();
  if (error_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(error_response);
    if (message_arena != submessage_arena) {
      error_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error_response, submessage_arena);
    }
    set_has_error_response();
    response_.error_response_ = error_response;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.QueryResponse.error_response)
}
void QueryResponse::set_allocated_signatories_response(::iroha::protocol::SignatoriesResponse* signatories_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_response();
  if (signatories_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(signatories_response);
    if (message_arena != submessage_arena) {
      signatories_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signatories_response, submessage_arena);
    }
    set_has_signatories_response();
    response_.signatories_response_ = signatories_response;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.QueryResponse.signatories_response)
}
void QueryResponse::set_allocated_transactions_response(::iroha::protocol::TransactionsResponse* transactions_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_response();
  if (transactions_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transactions_response);
    if (message_arena != submessage_arena) {
      transactions_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transactions_response, submessage_arena);
    }
    set_has_transactions_response();
    response_.transactions_response_ = transactions_response;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.QueryResponse.transactions_response)
}
void QueryResponse::set_allocated_asset_response(::iroha::protocol::AssetResponse* asset_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_response();
  if (asset_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(asset_response);
    if (message_arena != submessage_arena) {
      asset_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, asset_response, submessage_arena);
    }
    set_has_asset_response();
    response_.asset_response_ = asset_response;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.QueryResponse.asset_response)
}
void QueryResponse::set_allocated_roles_response(::iroha::protocol::RolesResponse* roles_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_response();
  if (roles_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(roles_response);
    if (message_arena != submessage_arena) {
      roles_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roles_response, submessage_arena);
    }
    set_has_roles_response();
    response_.roles_response_ = roles_response;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.QueryResponse.roles_response)
}
void QueryResponse::set_allocated_role_permissions_response(::iroha::protocol::RolePermissionsResponse* role_permissions_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_response();
  if (role_permissions_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(role_permissions_response);
    if (message_arena != submessage_arena) {
      role_permissions_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, role_permissions_response, submessage_arena);
    }
    set_has_role_permissions_response();
    response_.role_permissions_response_ = role_permissions_response;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.QueryResponse.role_permissions_response)
}
void QueryResponse::set_allocated_transactions_page_response(::iroha::protocol::TransactionsPageResponse* transactions_page_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_response();
  if (transactions_page_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transactions_page_response);
    if (message_arena != submessage_arena) {
      transactions_page_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transactions_page_response, submessage_arena);
    }
    set_has_transactions_page_response();
    response_.transactions_page_response_ = transactions_page_response;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.QueryResponse.transactions_page_response)
}
void QueryResponse::set_allocated_pending_transactions_page_response(::iroha::protocol::PendingTransactionsPageResponse* pending_transactions_page_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_response();
  if (pending_transactions_page_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pending_transactions_page_response);
    if (message_arena != submessage_arena) {
      pending_transactions_page_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pending_transactions_page_response, submessage_arena);
    }
    set_has_pending_transactions_page_response();
    response_.pending_transactions_page_response_ = pending_transactions_page_response;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.QueryResponse.pending_transactions_page_response)
}
void QueryResponse::set_allocated_block_response(::iroha::protocol::BlockResponse* block_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_response();
  if (block_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(block_response);
    if (message_arena != submessage_arena) {
      block_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_response, submessage_arena);
    }
    set_has_block_response();
    response_.block_response_ = block_response;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.QueryResponse.block_response)
}
void QueryResponse::set_allocated_peers_response(::iroha::protocol::PeersResponse* peers_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_response();
  if (peers_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(peers_response);
    if (message_arena != submessage_arena) {
      peers_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, peers_response, submessage_arena);
    }
    set_has_peers_response();
    response_.peers_response_ = peers_response;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.QueryResponse.peers_response)
}
void QueryResponse::set_allocated_engine_receipts_response(::iroha::protocol::EngineReceiptsResponse* engine_receipts_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_response();
  if (engine_receipts_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(engine_receipts_response);
    if (message_arena != submessage_arena) {
      engine_receipts_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, engine_receipts_response, submessage_arena);
    }
    set_has_engine_receipts_response();
    response_.engine_receipts_response_ = engine_receipts_response;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.QueryResponse.engine_receipts_response)
}
QueryResponse::QueryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.QueryResponse)
}
QueryResponse::QueryResponse(const QueryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  query_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_query_hash().empty()) {
    query_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_query_hash(), 
      GetArena());
  }
  clear_has_response();
  switch (from.response_case()) {
    case kAccountAssetsResponse: {
      _internal_mutable_account_assets_response()->::iroha::protocol::AccountAssetResponse::MergeFrom(from._internal_account_assets_response());
      break;
    }
    case kAccountDetailResponse: {
      _internal_mutable_account_detail_response()->::iroha::protocol::AccountDetailResponse::MergeFrom(from._internal_account_detail_response());
      break;
    }
    case kAccountResponse: {
      _internal_mutable_account_response()->::iroha::protocol::AccountResponse::MergeFrom(from._internal_account_response());
      break;
    }
    case kErrorResponse: {
      _internal_mutable_error_response()->::iroha::protocol::ErrorResponse::MergeFrom(from._internal_error_response());
      break;
    }
    case kSignatoriesResponse: {
      _internal_mutable_signatories_response()->::iroha::protocol::SignatoriesResponse::MergeFrom(from._internal_signatories_response());
      break;
    }
    case kTransactionsResponse: {
      _internal_mutable_transactions_response()->::iroha::protocol::TransactionsResponse::MergeFrom(from._internal_transactions_response());
      break;
    }
    case kAssetResponse: {
      _internal_mutable_asset_response()->::iroha::protocol::AssetResponse::MergeFrom(from._internal_asset_response());
      break;
    }
    case kRolesResponse: {
      _internal_mutable_roles_response()->::iroha::protocol::RolesResponse::MergeFrom(from._internal_roles_response());
      break;
    }
    case kRolePermissionsResponse: {
      _internal_mutable_role_permissions_response()->::iroha::protocol::RolePermissionsResponse::MergeFrom(from._internal_role_permissions_response());
      break;
    }
    case kTransactionsPageResponse: {
      _internal_mutable_transactions_page_response()->::iroha::protocol::TransactionsPageResponse::MergeFrom(from._internal_transactions_page_response());
      break;
    }
    case kPendingTransactionsPageResponse: {
      _internal_mutable_pending_transactions_page_response()->::iroha::protocol::PendingTransactionsPageResponse::MergeFrom(from._internal_pending_transactions_page_response());
      break;
    }
    case kBlockResponse: {
      _internal_mutable_block_response()->::iroha::protocol::BlockResponse::MergeFrom(from._internal_block_response());
      break;
    }
    case kPeersResponse: {
      _internal_mutable_peers_response()->::iroha::protocol::PeersResponse::MergeFrom(from._internal_peers_response());
      break;
    }
    case kEngineReceiptsResponse: {
      _internal_mutable_engine_receipts_response()->::iroha::protocol::EngineReceiptsResponse::MergeFrom(from._internal_engine_receipts_response());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.QueryResponse)
}

void QueryResponse::SharedCtor() {
query_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
clear_has_response();
}

QueryResponse::~QueryResponse() {
  // @@protoc_insertion_point(destructor:iroha.protocol.QueryResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QueryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  query_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_response()) {
    clear_response();
  }
}

void QueryResponse::ArenaDtor(void* object) {
  QueryResponse* _this = reinterpret_cast< QueryResponse* >(object);
  (void)_this;
}
void QueryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QueryResponse::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:iroha.protocol.QueryResponse)
  switch (response_case()) {
    case kAccountAssetsResponse: {
      if (GetArena() == nullptr) {
        delete response_.account_assets_response_;
      }
      break;
    }
    case kAccountDetailResponse: {
      if (GetArena() == nullptr) {
        delete response_.account_detail_response_;
      }
      break;
    }
    case kAccountResponse: {
      if (GetArena() == nullptr) {
        delete response_.account_response_;
      }
      break;
    }
    case kErrorResponse: {
      if (GetArena() == nullptr) {
        delete response_.error_response_;
      }
      break;
    }
    case kSignatoriesResponse: {
      if (GetArena() == nullptr) {
        delete response_.signatories_response_;
      }
      break;
    }
    case kTransactionsResponse: {
      if (GetArena() == nullptr) {
        delete response_.transactions_response_;
      }
      break;
    }
    case kAssetResponse: {
      if (GetArena() == nullptr) {
        delete response_.asset_response_;
      }
      break;
    }
    case kRolesResponse: {
      if (GetArena() == nullptr) {
        delete response_.roles_response_;
      }
      break;
    }
    case kRolePermissionsResponse: {
      if (GetArena() == nullptr) {
        delete response_.role_permissions_response_;
      }
      break;
    }
    case kTransactionsPageResponse: {
      if (GetArena() == nullptr) {
        delete response_.transactions_page_response_;
      }
      break;
    }
    case kPendingTransactionsPageResponse: {
      if (GetArena() == nullptr) {
        delete response_.pending_transactions_page_response_;
      }
      break;
    }
    case kBlockResponse: {
      if (GetArena() == nullptr) {
        delete response_.block_response_;
      }
      break;
    }
    case kPeersResponse: {
      if (GetArena() == nullptr) {
        delete response_.peers_response_;
      }
      break;
    }
    case kEngineReceiptsResponse: {
      if (GetArena() == nullptr) {
        delete response_.engine_receipts_response_;
      }
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESPONSE_NOT_SET;
}


void QueryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.QueryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_hash_.ClearToEmpty();
  clear_response();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .iroha.protocol.AccountAssetResponse account_assets_response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_account_assets_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.AccountDetailResponse account_detail_response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_account_detail_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.AccountResponse account_response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_account_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.ErrorResponse error_response = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_error_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.SignatoriesResponse signatories_response = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_signatories_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.TransactionsResponse transactions_response = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_transactions_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.AssetResponse asset_response = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_asset_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.RolesResponse roles_response = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_roles_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.RolePermissionsResponse role_permissions_response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_role_permissions_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string query_hash = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_query_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.QueryResponse.query_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.TransactionsPageResponse transactions_page_response = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_transactions_page_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.BlockResponse block_response = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.PendingTransactionsPageResponse pending_transactions_page_response = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_pending_transactions_page_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.PeersResponse peers_response = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_peers_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.EngineReceiptsResponse engine_receipts_response = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_engine_receipts_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.QueryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .iroha.protocol.AccountAssetResponse account_assets_response = 1;
  if (_internal_has_account_assets_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::account_assets_response(this), target, stream);
  }

  // .iroha.protocol.AccountDetailResponse account_detail_response = 2;
  if (_internal_has_account_detail_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::account_detail_response(this), target, stream);
  }

  // .iroha.protocol.AccountResponse account_response = 3;
  if (_internal_has_account_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::account_response(this), target, stream);
  }

  // .iroha.protocol.ErrorResponse error_response = 4;
  if (_internal_has_error_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::error_response(this), target, stream);
  }

  // .iroha.protocol.SignatoriesResponse signatories_response = 5;
  if (_internal_has_signatories_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::signatories_response(this), target, stream);
  }

  // .iroha.protocol.TransactionsResponse transactions_response = 6;
  if (_internal_has_transactions_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::transactions_response(this), target, stream);
  }

  // .iroha.protocol.AssetResponse asset_response = 7;
  if (_internal_has_asset_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::asset_response(this), target, stream);
  }

  // .iroha.protocol.RolesResponse roles_response = 8;
  if (_internal_has_roles_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::roles_response(this), target, stream);
  }

  // .iroha.protocol.RolePermissionsResponse role_permissions_response = 9;
  if (_internal_has_role_permissions_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::role_permissions_response(this), target, stream);
  }

  // string query_hash = 10;
  if (this->query_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query_hash().data(), static_cast<int>(this->_internal_query_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.QueryResponse.query_hash");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_query_hash(), target);
  }

  // .iroha.protocol.TransactionsPageResponse transactions_page_response = 11;
  if (_internal_has_transactions_page_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::transactions_page_response(this), target, stream);
  }

  // .iroha.protocol.BlockResponse block_response = 12;
  if (_internal_has_block_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::block_response(this), target, stream);
  }

  // .iroha.protocol.PendingTransactionsPageResponse pending_transactions_page_response = 13;
  if (_internal_has_pending_transactions_page_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::pending_transactions_page_response(this), target, stream);
  }

  // .iroha.protocol.PeersResponse peers_response = 14;
  if (_internal_has_peers_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::peers_response(this), target, stream);
  }

  // .iroha.protocol.EngineReceiptsResponse engine_receipts_response = 15;
  if (_internal_has_engine_receipts_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::engine_receipts_response(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.QueryResponse)
  return target;
}

size_t QueryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.QueryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string query_hash = 10;
  if (this->query_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query_hash());
  }

  switch (response_case()) {
    // .iroha.protocol.AccountAssetResponse account_assets_response = 1;
    case kAccountAssetsResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.account_assets_response_);
      break;
    }
    // .iroha.protocol.AccountDetailResponse account_detail_response = 2;
    case kAccountDetailResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.account_detail_response_);
      break;
    }
    // .iroha.protocol.AccountResponse account_response = 3;
    case kAccountResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.account_response_);
      break;
    }
    // .iroha.protocol.ErrorResponse error_response = 4;
    case kErrorResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.error_response_);
      break;
    }
    // .iroha.protocol.SignatoriesResponse signatories_response = 5;
    case kSignatoriesResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.signatories_response_);
      break;
    }
    // .iroha.protocol.TransactionsResponse transactions_response = 6;
    case kTransactionsResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.transactions_response_);
      break;
    }
    // .iroha.protocol.AssetResponse asset_response = 7;
    case kAssetResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.asset_response_);
      break;
    }
    // .iroha.protocol.RolesResponse roles_response = 8;
    case kRolesResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.roles_response_);
      break;
    }
    // .iroha.protocol.RolePermissionsResponse role_permissions_response = 9;
    case kRolePermissionsResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.role_permissions_response_);
      break;
    }
    // .iroha.protocol.TransactionsPageResponse transactions_page_response = 11;
    case kTransactionsPageResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.transactions_page_response_);
      break;
    }
    // .iroha.protocol.PendingTransactionsPageResponse pending_transactions_page_response = 13;
    case kPendingTransactionsPageResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.pending_transactions_page_response_);
      break;
    }
    // .iroha.protocol.BlockResponse block_response = 12;
    case kBlockResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.block_response_);
      break;
    }
    // .iroha.protocol.PeersResponse peers_response = 14;
    case kPeersResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.peers_response_);
      break;
    }
    // .iroha.protocol.EngineReceiptsResponse engine_receipts_response = 15;
    case kEngineReceiptsResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.engine_receipts_response_);
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.QueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.QueryResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.QueryResponse)
    MergeFrom(*source);
  }
}

void QueryResponse::MergeFrom(const QueryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.QueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query_hash().size() > 0) {
    _internal_set_query_hash(from._internal_query_hash());
  }
  switch (from.response_case()) {
    case kAccountAssetsResponse: {
      _internal_mutable_account_assets_response()->::iroha::protocol::AccountAssetResponse::MergeFrom(from._internal_account_assets_response());
      break;
    }
    case kAccountDetailResponse: {
      _internal_mutable_account_detail_response()->::iroha::protocol::AccountDetailResponse::MergeFrom(from._internal_account_detail_response());
      break;
    }
    case kAccountResponse: {
      _internal_mutable_account_response()->::iroha::protocol::AccountResponse::MergeFrom(from._internal_account_response());
      break;
    }
    case kErrorResponse: {
      _internal_mutable_error_response()->::iroha::protocol::ErrorResponse::MergeFrom(from._internal_error_response());
      break;
    }
    case kSignatoriesResponse: {
      _internal_mutable_signatories_response()->::iroha::protocol::SignatoriesResponse::MergeFrom(from._internal_signatories_response());
      break;
    }
    case kTransactionsResponse: {
      _internal_mutable_transactions_response()->::iroha::protocol::TransactionsResponse::MergeFrom(from._internal_transactions_response());
      break;
    }
    case kAssetResponse: {
      _internal_mutable_asset_response()->::iroha::protocol::AssetResponse::MergeFrom(from._internal_asset_response());
      break;
    }
    case kRolesResponse: {
      _internal_mutable_roles_response()->::iroha::protocol::RolesResponse::MergeFrom(from._internal_roles_response());
      break;
    }
    case kRolePermissionsResponse: {
      _internal_mutable_role_permissions_response()->::iroha::protocol::RolePermissionsResponse::MergeFrom(from._internal_role_permissions_response());
      break;
    }
    case kTransactionsPageResponse: {
      _internal_mutable_transactions_page_response()->::iroha::protocol::TransactionsPageResponse::MergeFrom(from._internal_transactions_page_response());
      break;
    }
    case kPendingTransactionsPageResponse: {
      _internal_mutable_pending_transactions_page_response()->::iroha::protocol::PendingTransactionsPageResponse::MergeFrom(from._internal_pending_transactions_page_response());
      break;
    }
    case kBlockResponse: {
      _internal_mutable_block_response()->::iroha::protocol::BlockResponse::MergeFrom(from._internal_block_response());
      break;
    }
    case kPeersResponse: {
      _internal_mutable_peers_response()->::iroha::protocol::PeersResponse::MergeFrom(from._internal_peers_response());
      break;
    }
    case kEngineReceiptsResponse: {
      _internal_mutable_engine_receipts_response()->::iroha::protocol::EngineReceiptsResponse::MergeFrom(from._internal_engine_receipts_response());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
}

void QueryResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.QueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryResponse::CopyFrom(const QueryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.QueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResponse::IsInitialized() const {
  return true;
}

void QueryResponse::InternalSwap(QueryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  query_hash_.Swap(&other->query_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(response_, other->response_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BlockResponse::_Internal {
 public:
  static const ::iroha::protocol::Block& block(const BlockResponse* msg);
};

const ::iroha::protocol::Block&
BlockResponse::_Internal::block(const BlockResponse* msg) {
  return *msg->block_;
}
void BlockResponse::clear_block() {
  if (GetArena() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
}
BlockResponse::BlockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.BlockResponse)
}
BlockResponse::BlockResponse(const BlockResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block()) {
    block_ = new ::iroha::protocol::Block(*from.block_);
  } else {
    block_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.BlockResponse)
}

void BlockResponse::SharedCtor() {
block_ = nullptr;
}

BlockResponse::~BlockResponse() {
  // @@protoc_insertion_point(destructor:iroha.protocol.BlockResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlockResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete block_;
}

void BlockResponse::ArenaDtor(void* object) {
  BlockResponse* _this = reinterpret_cast< BlockResponse* >(object);
  (void)_this;
}
void BlockResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.BlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .iroha.protocol.Block block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.BlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .iroha.protocol.Block block = 1;
  if (this->has_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::block(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.BlockResponse)
  return target;
}

size_t BlockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.BlockResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .iroha.protocol.Block block = 1;
  if (this->has_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.BlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.BlockResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.BlockResponse)
    MergeFrom(*source);
  }
}

void BlockResponse::MergeFrom(const BlockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.BlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_block()) {
    _internal_mutable_block()->::iroha::protocol::Block::MergeFrom(from._internal_block());
  }
}

void BlockResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.BlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockResponse::CopyFrom(const BlockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.BlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockResponse::IsInitialized() const {
  return true;
}

void BlockResponse::InternalSwap(BlockResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(block_, other->block_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BlockErrorResponse::_Internal {
 public:
};

BlockErrorResponse::BlockErrorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.BlockErrorResponse)
}
BlockErrorResponse::BlockErrorResponse(const BlockErrorResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.BlockErrorResponse)
}

void BlockErrorResponse::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BlockErrorResponse::~BlockErrorResponse() {
  // @@protoc_insertion_point(destructor:iroha.protocol.BlockErrorResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlockErrorResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BlockErrorResponse::ArenaDtor(void* object) {
  BlockErrorResponse* _this = reinterpret_cast< BlockErrorResponse* >(object);
  (void)_this;
}
void BlockErrorResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockErrorResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockErrorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.BlockErrorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockErrorResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.BlockErrorResponse.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockErrorResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.BlockErrorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.BlockErrorResponse.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.BlockErrorResponse)
  return target;
}

size_t BlockErrorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.BlockErrorResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockErrorResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.BlockErrorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockErrorResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockErrorResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.BlockErrorResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.BlockErrorResponse)
    MergeFrom(*source);
  }
}

void BlockErrorResponse::MergeFrom(const BlockErrorResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.BlockErrorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
}

void BlockErrorResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.BlockErrorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockErrorResponse::CopyFrom(const BlockErrorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.BlockErrorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockErrorResponse::IsInitialized() const {
  return true;
}

void BlockErrorResponse::InternalSwap(BlockErrorResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockErrorResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BlockQueryResponse::_Internal {
 public:
  static const ::iroha::protocol::BlockResponse& block_response(const BlockQueryResponse* msg);
  static const ::iroha::protocol::BlockErrorResponse& block_error_response(const BlockQueryResponse* msg);
};

const ::iroha::protocol::BlockResponse&
BlockQueryResponse::_Internal::block_response(const BlockQueryResponse* msg) {
  return *msg->response_.block_response_;
}
const ::iroha::protocol::BlockErrorResponse&
BlockQueryResponse::_Internal::block_error_response(const BlockQueryResponse* msg) {
  return *msg->response_.block_error_response_;
}
void BlockQueryResponse::set_allocated_block_response(::iroha::protocol::BlockResponse* block_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_response();
  if (block_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(block_response);
    if (message_arena != submessage_arena) {
      block_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_response, submessage_arena);
    }
    set_has_block_response();
    response_.block_response_ = block_response;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.BlockQueryResponse.block_response)
}
void BlockQueryResponse::set_allocated_block_error_response(::iroha::protocol::BlockErrorResponse* block_error_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_response();
  if (block_error_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(block_error_response);
    if (message_arena != submessage_arena) {
      block_error_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_error_response, submessage_arena);
    }
    set_has_block_error_response();
    response_.block_error_response_ = block_error_response;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.BlockQueryResponse.block_error_response)
}
BlockQueryResponse::BlockQueryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.BlockQueryResponse)
}
BlockQueryResponse::BlockQueryResponse(const BlockQueryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_response();
  switch (from.response_case()) {
    case kBlockResponse: {
      _internal_mutable_block_response()->::iroha::protocol::BlockResponse::MergeFrom(from._internal_block_response());
      break;
    }
    case kBlockErrorResponse: {
      _internal_mutable_block_error_response()->::iroha::protocol::BlockErrorResponse::MergeFrom(from._internal_block_error_response());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.BlockQueryResponse)
}

void BlockQueryResponse::SharedCtor() {
clear_has_response();
}

BlockQueryResponse::~BlockQueryResponse() {
  // @@protoc_insertion_point(destructor:iroha.protocol.BlockQueryResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlockQueryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_response()) {
    clear_response();
  }
}

void BlockQueryResponse::ArenaDtor(void* object) {
  BlockQueryResponse* _this = reinterpret_cast< BlockQueryResponse* >(object);
  (void)_this;
}
void BlockQueryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockQueryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockQueryResponse::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:iroha.protocol.BlockQueryResponse)
  switch (response_case()) {
    case kBlockResponse: {
      if (GetArena() == nullptr) {
        delete response_.block_response_;
      }
      break;
    }
    case kBlockErrorResponse: {
      if (GetArena() == nullptr) {
        delete response_.block_error_response_;
      }
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESPONSE_NOT_SET;
}


void BlockQueryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.BlockQueryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_response();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockQueryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .iroha.protocol.BlockResponse block_response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.BlockErrorResponse block_error_response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_error_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockQueryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.BlockQueryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .iroha.protocol.BlockResponse block_response = 1;
  if (_internal_has_block_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::block_response(this), target, stream);
  }

  // .iroha.protocol.BlockErrorResponse block_error_response = 2;
  if (_internal_has_block_error_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::block_error_response(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.BlockQueryResponse)
  return target;
}

size_t BlockQueryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.BlockQueryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (response_case()) {
    // .iroha.protocol.BlockResponse block_response = 1;
    case kBlockResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.block_response_);
      break;
    }
    // .iroha.protocol.BlockErrorResponse block_error_response = 2;
    case kBlockErrorResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.block_error_response_);
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockQueryResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.BlockQueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockQueryResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockQueryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.BlockQueryResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.BlockQueryResponse)
    MergeFrom(*source);
  }
}

void BlockQueryResponse::MergeFrom(const BlockQueryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.BlockQueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.response_case()) {
    case kBlockResponse: {
      _internal_mutable_block_response()->::iroha::protocol::BlockResponse::MergeFrom(from._internal_block_response());
      break;
    }
    case kBlockErrorResponse: {
      _internal_mutable_block_error_response()->::iroha::protocol::BlockErrorResponse::MergeFrom(from._internal_block_error_response());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
}

void BlockQueryResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.BlockQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockQueryResponse::CopyFrom(const BlockQueryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.BlockQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockQueryResponse::IsInitialized() const {
  return true;
}

void BlockQueryResponse::InternalSwap(BlockQueryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(response_, other->response_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockQueryResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HealthcheckData::_Internal {
 public:
};

HealthcheckData::HealthcheckData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.HealthcheckData)
}
HealthcheckData::HealthcheckData(const HealthcheckData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_opt_memory_consumption();
  switch (from.opt_memory_consumption_case()) {
    case kMemoryConsumption: {
      _internal_set_memory_consumption(from._internal_memory_consumption());
      break;
    }
    case OPT_MEMORY_CONSUMPTION_NOT_SET: {
      break;
    }
  }
  clear_has_opt_is_healthy();
  switch (from.opt_is_healthy_case()) {
    case kIsHealthy: {
      _internal_set_is_healthy(from._internal_is_healthy());
      break;
    }
    case OPT_IS_HEALTHY_NOT_SET: {
      break;
    }
  }
  clear_has_opt_is_syncing();
  switch (from.opt_is_syncing_case()) {
    case kIsSyncing: {
      _internal_set_is_syncing(from._internal_is_syncing());
      break;
    }
    case OPT_IS_SYNCING_NOT_SET: {
      break;
    }
  }
  clear_has_opt_last_block_height();
  switch (from.opt_last_block_height_case()) {
    case kLastBlockHeight: {
      _internal_set_last_block_height(from._internal_last_block_height());
      break;
    }
    case OPT_LAST_BLOCK_HEIGHT_NOT_SET: {
      break;
    }
  }
  clear_has_opt_last_block_reject();
  switch (from.opt_last_block_reject_case()) {
    case kLastBlockReject: {
      _internal_set_last_block_reject(from._internal_last_block_reject());
      break;
    }
    case OPT_LAST_BLOCK_REJECT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.HealthcheckData)
}

void HealthcheckData::SharedCtor() {
clear_has_opt_memory_consumption();
clear_has_opt_is_healthy();
clear_has_opt_is_syncing();
clear_has_opt_last_block_height();
clear_has_opt_last_block_reject();
}

HealthcheckData::~HealthcheckData() {
  // @@protoc_insertion_point(destructor:iroha.protocol.HealthcheckData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HealthcheckData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_opt_memory_consumption()) {
    clear_opt_memory_consumption();
  }
  if (has_opt_is_healthy()) {
    clear_opt_is_healthy();
  }
  if (has_opt_is_syncing()) {
    clear_opt_is_syncing();
  }
  if (has_opt_last_block_height()) {
    clear_opt_last_block_height();
  }
  if (has_opt_last_block_reject()) {
    clear_opt_last_block_reject();
  }
}

void HealthcheckData::ArenaDtor(void* object) {
  HealthcheckData* _this = reinterpret_cast< HealthcheckData* >(object);
  (void)_this;
}
void HealthcheckData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HealthcheckData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HealthcheckData::clear_opt_memory_consumption() {
// @@protoc_insertion_point(one_of_clear_start:iroha.protocol.HealthcheckData)
  switch (opt_memory_consumption_case()) {
    case kMemoryConsumption: {
      // No need to clear
      break;
    }
    case OPT_MEMORY_CONSUMPTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPT_MEMORY_CONSUMPTION_NOT_SET;
}

void HealthcheckData::clear_opt_is_healthy() {
// @@protoc_insertion_point(one_of_clear_start:iroha.protocol.HealthcheckData)
  switch (opt_is_healthy_case()) {
    case kIsHealthy: {
      // No need to clear
      break;
    }
    case OPT_IS_HEALTHY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = OPT_IS_HEALTHY_NOT_SET;
}

void HealthcheckData::clear_opt_is_syncing() {
// @@protoc_insertion_point(one_of_clear_start:iroha.protocol.HealthcheckData)
  switch (opt_is_syncing_case()) {
    case kIsSyncing: {
      // No need to clear
      break;
    }
    case OPT_IS_SYNCING_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = OPT_IS_SYNCING_NOT_SET;
}

void HealthcheckData::clear_opt_last_block_height() {
// @@protoc_insertion_point(one_of_clear_start:iroha.protocol.HealthcheckData)
  switch (opt_last_block_height_case()) {
    case kLastBlockHeight: {
      // No need to clear
      break;
    }
    case OPT_LAST_BLOCK_HEIGHT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[3] = OPT_LAST_BLOCK_HEIGHT_NOT_SET;
}

void HealthcheckData::clear_opt_last_block_reject() {
// @@protoc_insertion_point(one_of_clear_start:iroha.protocol.HealthcheckData)
  switch (opt_last_block_reject_case()) {
    case kLastBlockReject: {
      // No need to clear
      break;
    }
    case OPT_LAST_BLOCK_REJECT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[4] = OPT_LAST_BLOCK_REJECT_NOT_SET;
}


void HealthcheckData::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.HealthcheckData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_opt_memory_consumption();
  clear_opt_is_healthy();
  clear_opt_is_syncing();
  clear_opt_last_block_height();
  clear_opt_last_block_reject();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HealthcheckData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 memory_consumption = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _internal_set_memory_consumption(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_healthy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_is_healthy(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_syncing = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_is_syncing(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 last_block_height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _internal_set_last_block_height(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 last_block_reject = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _internal_set_last_block_reject(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HealthcheckData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.HealthcheckData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 memory_consumption = 1;
  if (_internal_has_memory_consumption()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_memory_consumption(), target);
  }

  // bool is_healthy = 2;
  if (_internal_has_is_healthy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_healthy(), target);
  }

  // bool is_syncing = 3;
  if (_internal_has_is_syncing()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_syncing(), target);
  }

  // uint64 last_block_height = 4;
  if (_internal_has_last_block_height()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_last_block_height(), target);
  }

  // uint64 last_block_reject = 5;
  if (_internal_has_last_block_reject()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_last_block_reject(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.HealthcheckData)
  return target;
}

size_t HealthcheckData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.HealthcheckData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (opt_memory_consumption_case()) {
    // uint64 memory_consumption = 1;
    case kMemoryConsumption: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_memory_consumption());
      break;
    }
    case OPT_MEMORY_CONSUMPTION_NOT_SET: {
      break;
    }
  }
  switch (opt_is_healthy_case()) {
    // bool is_healthy = 2;
    case kIsHealthy: {
      total_size += 1 + 1;
      break;
    }
    case OPT_IS_HEALTHY_NOT_SET: {
      break;
    }
  }
  switch (opt_is_syncing_case()) {
    // bool is_syncing = 3;
    case kIsSyncing: {
      total_size += 1 + 1;
      break;
    }
    case OPT_IS_SYNCING_NOT_SET: {
      break;
    }
  }
  switch (opt_last_block_height_case()) {
    // uint64 last_block_height = 4;
    case kLastBlockHeight: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_last_block_height());
      break;
    }
    case OPT_LAST_BLOCK_HEIGHT_NOT_SET: {
      break;
    }
  }
  switch (opt_last_block_reject_case()) {
    // uint64 last_block_reject = 5;
    case kLastBlockReject: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_last_block_reject());
      break;
    }
    case OPT_LAST_BLOCK_REJECT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HealthcheckData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.HealthcheckData)
  GOOGLE_DCHECK_NE(&from, this);
  const HealthcheckData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HealthcheckData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.HealthcheckData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.HealthcheckData)
    MergeFrom(*source);
  }
}

void HealthcheckData::MergeFrom(const HealthcheckData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.HealthcheckData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.opt_memory_consumption_case()) {
    case kMemoryConsumption: {
      _internal_set_memory_consumption(from._internal_memory_consumption());
      break;
    }
    case OPT_MEMORY_CONSUMPTION_NOT_SET: {
      break;
    }
  }
  switch (from.opt_is_healthy_case()) {
    case kIsHealthy: {
      _internal_set_is_healthy(from._internal_is_healthy());
      break;
    }
    case OPT_IS_HEALTHY_NOT_SET: {
      break;
    }
  }
  switch (from.opt_is_syncing_case()) {
    case kIsSyncing: {
      _internal_set_is_syncing(from._internal_is_syncing());
      break;
    }
    case OPT_IS_SYNCING_NOT_SET: {
      break;
    }
  }
  switch (from.opt_last_block_height_case()) {
    case kLastBlockHeight: {
      _internal_set_last_block_height(from._internal_last_block_height());
      break;
    }
    case OPT_LAST_BLOCK_HEIGHT_NOT_SET: {
      break;
    }
  }
  switch (from.opt_last_block_reject_case()) {
    case kLastBlockReject: {
      _internal_set_last_block_reject(from._internal_last_block_reject());
      break;
    }
    case OPT_LAST_BLOCK_REJECT_NOT_SET: {
      break;
    }
  }
}

void HealthcheckData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.HealthcheckData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HealthcheckData::CopyFrom(const HealthcheckData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.HealthcheckData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthcheckData::IsInitialized() const {
  return true;
}

void HealthcheckData::InternalSwap(HealthcheckData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(opt_memory_consumption_, other->opt_memory_consumption_);
  swap(opt_is_healthy_, other->opt_is_healthy_);
  swap(opt_is_syncing_, other->opt_is_syncing_);
  swap(opt_last_block_height_, other->opt_last_block_height_);
  swap(opt_last_block_reject_, other->opt_last_block_reject_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  swap(_oneof_case_[2], other->_oneof_case_[2]);
  swap(_oneof_case_[3], other->_oneof_case_[3]);
  swap(_oneof_case_[4], other->_oneof_case_[4]);
}

::PROTOBUF_NAMESPACE_ID::Metadata HealthcheckData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
}  // namespace iroha
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::iroha::protocol::Asset* Arena::CreateMaybeMessage< ::iroha::protocol::Asset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::Asset >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::Domain* Arena::CreateMaybeMessage< ::iroha::protocol::Domain >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::Domain >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::Account* Arena::CreateMaybeMessage< ::iroha::protocol::Account >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::Account >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::AccountAsset* Arena::CreateMaybeMessage< ::iroha::protocol::AccountAsset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::AccountAsset >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::AccountAssetResponse* Arena::CreateMaybeMessage< ::iroha::protocol::AccountAssetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::AccountAssetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::AccountDetailResponse* Arena::CreateMaybeMessage< ::iroha::protocol::AccountDetailResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::AccountDetailResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::AccountResponse* Arena::CreateMaybeMessage< ::iroha::protocol::AccountResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::AccountResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::AssetResponse* Arena::CreateMaybeMessage< ::iroha::protocol::AssetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::AssetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::RolesResponse* Arena::CreateMaybeMessage< ::iroha::protocol::RolesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::RolesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::RolePermissionsResponse* Arena::CreateMaybeMessage< ::iroha::protocol::RolePermissionsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::RolePermissionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::ErrorResponse* Arena::CreateMaybeMessage< ::iroha::protocol::ErrorResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::ErrorResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::SignatoriesResponse* Arena::CreateMaybeMessage< ::iroha::protocol::SignatoriesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::SignatoriesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::TransactionsResponse* Arena::CreateMaybeMessage< ::iroha::protocol::TransactionsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::TransactionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::TransactionsPageResponse* Arena::CreateMaybeMessage< ::iroha::protocol::TransactionsPageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::TransactionsPageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::PendingTransactionsPageResponse_BatchInfo* Arena::CreateMaybeMessage< ::iroha::protocol::PendingTransactionsPageResponse_BatchInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::PendingTransactionsPageResponse_BatchInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::PendingTransactionsPageResponse* Arena::CreateMaybeMessage< ::iroha::protocol::PendingTransactionsPageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::PendingTransactionsPageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::PeersResponse* Arena::CreateMaybeMessage< ::iroha::protocol::PeersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::PeersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::EngineReceiptsResponse* Arena::CreateMaybeMessage< ::iroha::protocol::EngineReceiptsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::EngineReceiptsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::QueryResponse* Arena::CreateMaybeMessage< ::iroha::protocol::QueryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::QueryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::BlockResponse* Arena::CreateMaybeMessage< ::iroha::protocol::BlockResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::BlockResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::BlockErrorResponse* Arena::CreateMaybeMessage< ::iroha::protocol::BlockErrorResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::BlockErrorResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::BlockQueryResponse* Arena::CreateMaybeMessage< ::iroha::protocol::BlockQueryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::BlockQueryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::HealthcheckData* Arena::CreateMaybeMessage< ::iroha::protocol::HealthcheckData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::HealthcheckData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
