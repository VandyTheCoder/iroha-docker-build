// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ordering.proto

#include "ordering.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace iroha {
namespace ordering {
namespace proto {
constexpr ProposalRound::ProposalRound(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_round_(PROTOBUF_ULONGLONG(0))
  , reject_round_(0u){}
struct ProposalRoundDefaultTypeInternal {
  constexpr ProposalRoundDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProposalRoundDefaultTypeInternal() {}
  union {
    ProposalRound _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProposalRoundDefaultTypeInternal _ProposalRound_default_instance_;
constexpr BatchesRequest::BatchesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transactions_(){}
struct BatchesRequestDefaultTypeInternal {
  constexpr BatchesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BatchesRequestDefaultTypeInternal() {}
  union {
    BatchesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BatchesRequestDefaultTypeInternal _BatchesRequest_default_instance_;
constexpr ProposalRequest::ProposalRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : round_(nullptr){}
struct ProposalRequestDefaultTypeInternal {
  constexpr ProposalRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProposalRequestDefaultTypeInternal() {}
  union {
    ProposalRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProposalRequestDefaultTypeInternal _ProposalRequest_default_instance_;
constexpr ProposalResponse::ProposalResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ProposalResponseDefaultTypeInternal {
  constexpr ProposalResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProposalResponseDefaultTypeInternal() {}
  union {
    ProposalResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProposalResponseDefaultTypeInternal _ProposalResponse_default_instance_;
}  // namespace proto
}  // namespace ordering
}  // namespace iroha
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ordering_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ordering_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ordering_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ordering_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::ordering::proto::ProposalRound, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::ordering::proto::ProposalRound, block_round_),
  PROTOBUF_FIELD_OFFSET(::iroha::ordering::proto::ProposalRound, reject_round_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::ordering::proto::BatchesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::ordering::proto::BatchesRequest, transactions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::ordering::proto::ProposalRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::ordering::proto::ProposalRequest, round_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::ordering::proto::ProposalResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::iroha::ordering::proto::ProposalResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::iroha::ordering::proto::ProposalResponse, optional_proposal_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::iroha::ordering::proto::ProposalRound)},
  { 7, -1, sizeof(::iroha::ordering::proto::BatchesRequest)},
  { 13, -1, sizeof(::iroha::ordering::proto::ProposalRequest)},
  { 19, -1, sizeof(::iroha::ordering::proto::ProposalResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::ordering::proto::_ProposalRound_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::ordering::proto::_BatchesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::ordering::proto::_ProposalRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::ordering::proto::_ProposalResponse_default_instance_),
};

const char descriptor_table_protodef_ordering_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016ordering.proto\022\024iroha.ordering.proto\032\021"
  "transaction.proto\032\016proposal.proto\032\016endpo"
  "int.proto\032\033google/protobuf/empty.proto\":"
  "\n\rProposalRound\022\023\n\013block_round\030\001 \001(\004\022\024\n\014"
  "reject_round\030\002 \001(\r\"C\n\016BatchesRequest\0221\n\014"
  "transactions\030\001 \003(\0132\033.iroha.protocol.Tran"
  "saction\"E\n\017ProposalRequest\0222\n\005round\030\001 \001("
  "\0132#.iroha.ordering.proto.ProposalRound\"U"
  "\n\020ProposalResponse\022,\n\010proposal\030\001 \001(\0132\030.i"
  "roha.protocol.ProposalH\000B\023\n\021optional_pro"
  "posal2[\n\031OrderingGateTransportGrpc\022>\n\non"
  "Proposal\022\030.iroha.protocol.Proposal\032\026.goo"
  "gle.protobuf.Empty2Y\n\034OrderingServiceTra"
  "nsportGrpc\0229\n\007onBatch\022\026.iroha.protocol.T"
  "xList\032\026.google.protobuf.Empty2\301\001\n\020OnDema"
  "ndOrdering\022K\n\013SendBatches\022$.iroha.orderi"
  "ng.proto.BatchesRequest\032\026.google.protobu"
  "f.Empty\022`\n\017RequestProposal\022%.iroha.order"
  "ing.proto.ProposalRequest\032&.iroha.orderi"
  "ng.proto.ProposalResponseb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ordering_2eproto_deps[4] = {
  &::descriptor_table_endpoint_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_proposal_2eproto,
  &::descriptor_table_transaction_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ordering_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ordering_2eproto = {
  false, false, 793, descriptor_table_protodef_ordering_2eproto, "ordering.proto", 
  &descriptor_table_ordering_2eproto_once, descriptor_table_ordering_2eproto_deps, 4, 4,
  schemas, file_default_instances, TableStruct_ordering_2eproto::offsets,
  file_level_metadata_ordering_2eproto, file_level_enum_descriptors_ordering_2eproto, file_level_service_descriptors_ordering_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_ordering_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ordering_2eproto);
  return descriptor_table_ordering_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ordering_2eproto(&descriptor_table_ordering_2eproto);
namespace iroha {
namespace ordering {
namespace proto {

// ===================================================================

class ProposalRound::_Internal {
 public:
};

ProposalRound::ProposalRound(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.ordering.proto.ProposalRound)
}
ProposalRound::ProposalRound(const ProposalRound& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&block_round_, &from.block_round_,
    static_cast<size_t>(reinterpret_cast<char*>(&reject_round_) -
    reinterpret_cast<char*>(&block_round_)) + sizeof(reject_round_));
  // @@protoc_insertion_point(copy_constructor:iroha.ordering.proto.ProposalRound)
}

void ProposalRound::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&block_round_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reject_round_) -
    reinterpret_cast<char*>(&block_round_)) + sizeof(reject_round_));
}

ProposalRound::~ProposalRound() {
  // @@protoc_insertion_point(destructor:iroha.ordering.proto.ProposalRound)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProposalRound::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProposalRound::ArenaDtor(void* object) {
  ProposalRound* _this = reinterpret_cast< ProposalRound* >(object);
  (void)_this;
}
void ProposalRound::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProposalRound::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProposalRound::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.ordering.proto.ProposalRound)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&block_round_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reject_round_) -
      reinterpret_cast<char*>(&block_round_)) + sizeof(reject_round_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProposalRound::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 block_round = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          block_round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 reject_round = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          reject_round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProposalRound::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.ordering.proto.ProposalRound)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 block_round = 1;
  if (this->block_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_block_round(), target);
  }

  // uint32 reject_round = 2;
  if (this->reject_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_reject_round(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.ordering.proto.ProposalRound)
  return target;
}

size_t ProposalRound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.ordering.proto.ProposalRound)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 block_round = 1;
  if (this->block_round() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_block_round());
  }

  // uint32 reject_round = 2;
  if (this->reject_round() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reject_round());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProposalRound::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.ordering.proto.ProposalRound)
  GOOGLE_DCHECK_NE(&from, this);
  const ProposalRound* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProposalRound>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.ordering.proto.ProposalRound)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.ordering.proto.ProposalRound)
    MergeFrom(*source);
  }
}

void ProposalRound::MergeFrom(const ProposalRound& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.ordering.proto.ProposalRound)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.block_round() != 0) {
    _internal_set_block_round(from._internal_block_round());
  }
  if (from.reject_round() != 0) {
    _internal_set_reject_round(from._internal_reject_round());
  }
}

void ProposalRound::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.ordering.proto.ProposalRound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProposalRound::CopyFrom(const ProposalRound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.ordering.proto.ProposalRound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProposalRound::IsInitialized() const {
  return true;
}

void ProposalRound::InternalSwap(ProposalRound* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProposalRound, reject_round_)
      + sizeof(ProposalRound::reject_round_)
      - PROTOBUF_FIELD_OFFSET(ProposalRound, block_round_)>(
          reinterpret_cast<char*>(&block_round_),
          reinterpret_cast<char*>(&other->block_round_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProposalRound::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BatchesRequest::_Internal {
 public:
};

void BatchesRequest::clear_transactions() {
  transactions_.Clear();
}
BatchesRequest::BatchesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  transactions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.ordering.proto.BatchesRequest)
}
BatchesRequest::BatchesRequest(const BatchesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      transactions_(from.transactions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iroha.ordering.proto.BatchesRequest)
}

void BatchesRequest::SharedCtor() {
}

BatchesRequest::~BatchesRequest() {
  // @@protoc_insertion_point(destructor:iroha.ordering.proto.BatchesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BatchesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BatchesRequest::ArenaDtor(void* object) {
  BatchesRequest* _this = reinterpret_cast< BatchesRequest* >(object);
  (void)_this;
}
void BatchesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatchesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BatchesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.ordering.proto.BatchesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transactions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .iroha.protocol.Transaction transactions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BatchesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.ordering.proto.BatchesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .iroha.protocol.Transaction transactions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transactions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_transactions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.ordering.proto.BatchesRequest)
  return target;
}

size_t BatchesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.ordering.proto.BatchesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iroha.protocol.Transaction transactions = 1;
  total_size += 1UL * this->_internal_transactions_size();
  for (const auto& msg : this->transactions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatchesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.ordering.proto.BatchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BatchesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.ordering.proto.BatchesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.ordering.proto.BatchesRequest)
    MergeFrom(*source);
  }
}

void BatchesRequest::MergeFrom(const BatchesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.ordering.proto.BatchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transactions_.MergeFrom(from.transactions_);
}

void BatchesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.ordering.proto.BatchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchesRequest::CopyFrom(const BatchesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.ordering.proto.BatchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchesRequest::IsInitialized() const {
  return true;
}

void BatchesRequest::InternalSwap(BatchesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  transactions_.InternalSwap(&other->transactions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProposalRequest::_Internal {
 public:
  static const ::iroha::ordering::proto::ProposalRound& round(const ProposalRequest* msg);
};

const ::iroha::ordering::proto::ProposalRound&
ProposalRequest::_Internal::round(const ProposalRequest* msg) {
  return *msg->round_;
}
ProposalRequest::ProposalRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.ordering.proto.ProposalRequest)
}
ProposalRequest::ProposalRequest(const ProposalRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_round()) {
    round_ = new ::iroha::ordering::proto::ProposalRound(*from.round_);
  } else {
    round_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:iroha.ordering.proto.ProposalRequest)
}

void ProposalRequest::SharedCtor() {
round_ = nullptr;
}

ProposalRequest::~ProposalRequest() {
  // @@protoc_insertion_point(destructor:iroha.ordering.proto.ProposalRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProposalRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete round_;
}

void ProposalRequest::ArenaDtor(void* object) {
  ProposalRequest* _this = reinterpret_cast< ProposalRequest* >(object);
  (void)_this;
}
void ProposalRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProposalRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProposalRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.ordering.proto.ProposalRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && round_ != nullptr) {
    delete round_;
  }
  round_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProposalRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .iroha.ordering.proto.ProposalRound round = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_round(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProposalRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.ordering.proto.ProposalRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .iroha.ordering.proto.ProposalRound round = 1;
  if (this->has_round()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::round(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.ordering.proto.ProposalRequest)
  return target;
}

size_t ProposalRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.ordering.proto.ProposalRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .iroha.ordering.proto.ProposalRound round = 1;
  if (this->has_round()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *round_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProposalRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.ordering.proto.ProposalRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ProposalRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProposalRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.ordering.proto.ProposalRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.ordering.proto.ProposalRequest)
    MergeFrom(*source);
  }
}

void ProposalRequest::MergeFrom(const ProposalRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.ordering.proto.ProposalRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_round()) {
    _internal_mutable_round()->::iroha::ordering::proto::ProposalRound::MergeFrom(from._internal_round());
  }
}

void ProposalRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.ordering.proto.ProposalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProposalRequest::CopyFrom(const ProposalRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.ordering.proto.ProposalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProposalRequest::IsInitialized() const {
  return true;
}

void ProposalRequest::InternalSwap(ProposalRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(round_, other->round_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProposalRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProposalResponse::_Internal {
 public:
  static const ::iroha::protocol::Proposal& proposal(const ProposalResponse* msg);
};

const ::iroha::protocol::Proposal&
ProposalResponse::_Internal::proposal(const ProposalResponse* msg) {
  return *msg->optional_proposal_.proposal_;
}
void ProposalResponse::set_allocated_proposal(::iroha::protocol::Proposal* proposal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_optional_proposal();
  if (proposal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proposal)->GetArena();
    if (message_arena != submessage_arena) {
      proposal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proposal, submessage_arena);
    }
    set_has_proposal();
    optional_proposal_.proposal_ = proposal;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.ordering.proto.ProposalResponse.proposal)
}
void ProposalResponse::clear_proposal() {
  if (_internal_has_proposal()) {
    if (GetArena() == nullptr) {
      delete optional_proposal_.proposal_;
    }
    clear_has_optional_proposal();
  }
}
ProposalResponse::ProposalResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.ordering.proto.ProposalResponse)
}
ProposalResponse::ProposalResponse(const ProposalResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_optional_proposal();
  switch (from.optional_proposal_case()) {
    case kProposal: {
      _internal_mutable_proposal()->::iroha::protocol::Proposal::MergeFrom(from._internal_proposal());
      break;
    }
    case OPTIONAL_PROPOSAL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iroha.ordering.proto.ProposalResponse)
}

void ProposalResponse::SharedCtor() {
clear_has_optional_proposal();
}

ProposalResponse::~ProposalResponse() {
  // @@protoc_insertion_point(destructor:iroha.ordering.proto.ProposalResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProposalResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_optional_proposal()) {
    clear_optional_proposal();
  }
}

void ProposalResponse::ArenaDtor(void* object) {
  ProposalResponse* _this = reinterpret_cast< ProposalResponse* >(object);
  (void)_this;
}
void ProposalResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProposalResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProposalResponse::clear_optional_proposal() {
// @@protoc_insertion_point(one_of_clear_start:iroha.ordering.proto.ProposalResponse)
  switch (optional_proposal_case()) {
    case kProposal: {
      if (GetArena() == nullptr) {
        delete optional_proposal_.proposal_;
      }
      break;
    }
    case OPTIONAL_PROPOSAL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPTIONAL_PROPOSAL_NOT_SET;
}


void ProposalResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.ordering.proto.ProposalResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_optional_proposal();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProposalResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .iroha.protocol.Proposal proposal = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_proposal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProposalResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.ordering.proto.ProposalResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .iroha.protocol.Proposal proposal = 1;
  if (_internal_has_proposal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::proposal(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.ordering.proto.ProposalResponse)
  return target;
}

size_t ProposalResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.ordering.proto.ProposalResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (optional_proposal_case()) {
    // .iroha.protocol.Proposal proposal = 1;
    case kProposal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *optional_proposal_.proposal_);
      break;
    }
    case OPTIONAL_PROPOSAL_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProposalResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.ordering.proto.ProposalResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ProposalResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProposalResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.ordering.proto.ProposalResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.ordering.proto.ProposalResponse)
    MergeFrom(*source);
  }
}

void ProposalResponse::MergeFrom(const ProposalResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.ordering.proto.ProposalResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.optional_proposal_case()) {
    case kProposal: {
      _internal_mutable_proposal()->::iroha::protocol::Proposal::MergeFrom(from._internal_proposal());
      break;
    }
    case OPTIONAL_PROPOSAL_NOT_SET: {
      break;
    }
  }
}

void ProposalResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.ordering.proto.ProposalResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProposalResponse::CopyFrom(const ProposalResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.ordering.proto.ProposalResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProposalResponse::IsInitialized() const {
  return true;
}

void ProposalResponse::InternalSwap(ProposalResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(optional_proposal_, other->optional_proposal_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProposalResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace ordering
}  // namespace iroha
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::iroha::ordering::proto::ProposalRound* Arena::CreateMaybeMessage< ::iroha::ordering::proto::ProposalRound >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::ordering::proto::ProposalRound >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::ordering::proto::BatchesRequest* Arena::CreateMaybeMessage< ::iroha::ordering::proto::BatchesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::ordering::proto::BatchesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::ordering::proto::ProposalRequest* Arena::CreateMaybeMessage< ::iroha::ordering::proto::ProposalRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::ordering::proto::ProposalRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::ordering::proto::ProposalResponse* Arena::CreateMaybeMessage< ::iroha::ordering::proto::ProposalResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::ordering::proto::ProposalResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
