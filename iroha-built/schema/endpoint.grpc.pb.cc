// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: endpoint.proto

#include "endpoint.pb.h"
#include "endpoint.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace iroha {
namespace protocol {

static const char* CommandService_v1_method_names[] = {
  "/iroha.protocol.CommandService_v1/Torii",
  "/iroha.protocol.CommandService_v1/ListTorii",
  "/iroha.protocol.CommandService_v1/Status",
  "/iroha.protocol.CommandService_v1/StatusStream",
};

std::unique_ptr< CommandService_v1::Stub> CommandService_v1::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CommandService_v1::Stub> stub(new CommandService_v1::Stub(channel));
  return stub;
}

CommandService_v1::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Torii_(CommandService_v1_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListTorii_(CommandService_v1_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Status_(CommandService_v1_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StatusStream_(CommandService_v1_method_names[3], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status CommandService_v1::Stub::Torii(::grpc::ClientContext* context, const ::iroha::protocol::Transaction& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::iroha::protocol::Transaction, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Torii_, context, request, response);
}

void CommandService_v1::Stub::experimental_async::Torii(::grpc::ClientContext* context, const ::iroha::protocol::Transaction* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::iroha::protocol::Transaction, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Torii_, context, request, response, std::move(f));
}

void CommandService_v1::Stub::experimental_async::Torii(::grpc::ClientContext* context, const ::iroha::protocol::Transaction* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Torii_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CommandService_v1::Stub::PrepareAsyncToriiRaw(::grpc::ClientContext* context, const ::iroha::protocol::Transaction& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::iroha::protocol::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Torii_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CommandService_v1::Stub::AsyncToriiRaw(::grpc::ClientContext* context, const ::iroha::protocol::Transaction& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncToriiRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CommandService_v1::Stub::ListTorii(::grpc::ClientContext* context, const ::iroha::protocol::TxList& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::iroha::protocol::TxList, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListTorii_, context, request, response);
}

void CommandService_v1::Stub::experimental_async::ListTorii(::grpc::ClientContext* context, const ::iroha::protocol::TxList* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::iroha::protocol::TxList, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListTorii_, context, request, response, std::move(f));
}

void CommandService_v1::Stub::experimental_async::ListTorii(::grpc::ClientContext* context, const ::iroha::protocol::TxList* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListTorii_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CommandService_v1::Stub::PrepareAsyncListToriiRaw(::grpc::ClientContext* context, const ::iroha::protocol::TxList& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::iroha::protocol::TxList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListTorii_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CommandService_v1::Stub::AsyncListToriiRaw(::grpc::ClientContext* context, const ::iroha::protocol::TxList& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListToriiRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CommandService_v1::Stub::Status(::grpc::ClientContext* context, const ::iroha::protocol::TxStatusRequest& request, ::iroha::protocol::ToriiResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::iroha::protocol::TxStatusRequest, ::iroha::protocol::ToriiResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Status_, context, request, response);
}

void CommandService_v1::Stub::experimental_async::Status(::grpc::ClientContext* context, const ::iroha::protocol::TxStatusRequest* request, ::iroha::protocol::ToriiResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::iroha::protocol::TxStatusRequest, ::iroha::protocol::ToriiResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Status_, context, request, response, std::move(f));
}

void CommandService_v1::Stub::experimental_async::Status(::grpc::ClientContext* context, const ::iroha::protocol::TxStatusRequest* request, ::iroha::protocol::ToriiResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Status_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::iroha::protocol::ToriiResponse>* CommandService_v1::Stub::PrepareAsyncStatusRaw(::grpc::ClientContext* context, const ::iroha::protocol::TxStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::iroha::protocol::ToriiResponse, ::iroha::protocol::TxStatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Status_, context, request);
}

::grpc::ClientAsyncResponseReader< ::iroha::protocol::ToriiResponse>* CommandService_v1::Stub::AsyncStatusRaw(::grpc::ClientContext* context, const ::iroha::protocol::TxStatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::iroha::protocol::ToriiResponse>* CommandService_v1::Stub::StatusStreamRaw(::grpc::ClientContext* context, const ::iroha::protocol::TxStatusRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::iroha::protocol::ToriiResponse>::Create(channel_.get(), rpcmethod_StatusStream_, context, request);
}

void CommandService_v1::Stub::experimental_async::StatusStream(::grpc::ClientContext* context, const ::iroha::protocol::TxStatusRequest* request, ::grpc::experimental::ClientReadReactor< ::iroha::protocol::ToriiResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::iroha::protocol::ToriiResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_StatusStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::iroha::protocol::ToriiResponse>* CommandService_v1::Stub::AsyncStatusStreamRaw(::grpc::ClientContext* context, const ::iroha::protocol::TxStatusRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::iroha::protocol::ToriiResponse>::Create(channel_.get(), cq, rpcmethod_StatusStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::iroha::protocol::ToriiResponse>* CommandService_v1::Stub::PrepareAsyncStatusStreamRaw(::grpc::ClientContext* context, const ::iroha::protocol::TxStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::iroha::protocol::ToriiResponse>::Create(channel_.get(), cq, rpcmethod_StatusStream_, context, request, false, nullptr);
}

CommandService_v1::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CommandService_v1_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CommandService_v1::Service, ::iroha::protocol::Transaction, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CommandService_v1::Service* service,
             ::grpc::ServerContext* ctx,
             const ::iroha::protocol::Transaction* req,
             ::google::protobuf::Empty* resp) {
               return service->Torii(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CommandService_v1_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CommandService_v1::Service, ::iroha::protocol::TxList, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CommandService_v1::Service* service,
             ::grpc::ServerContext* ctx,
             const ::iroha::protocol::TxList* req,
             ::google::protobuf::Empty* resp) {
               return service->ListTorii(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CommandService_v1_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CommandService_v1::Service, ::iroha::protocol::TxStatusRequest, ::iroha::protocol::ToriiResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CommandService_v1::Service* service,
             ::grpc::ServerContext* ctx,
             const ::iroha::protocol::TxStatusRequest* req,
             ::iroha::protocol::ToriiResponse* resp) {
               return service->Status(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CommandService_v1_method_names[3],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< CommandService_v1::Service, ::iroha::protocol::TxStatusRequest, ::iroha::protocol::ToriiResponse>(
          [](CommandService_v1::Service* service,
             ::grpc::ServerContext* ctx,
             const ::iroha::protocol::TxStatusRequest* req,
             ::grpc::ServerWriter<::iroha::protocol::ToriiResponse>* writer) {
               return service->StatusStream(ctx, req, writer);
             }, this)));
}

CommandService_v1::Service::~Service() {
}

::grpc::Status CommandService_v1::Service::Torii(::grpc::ServerContext* context, const ::iroha::protocol::Transaction* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CommandService_v1::Service::ListTorii(::grpc::ServerContext* context, const ::iroha::protocol::TxList* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CommandService_v1::Service::Status(::grpc::ServerContext* context, const ::iroha::protocol::TxStatusRequest* request, ::iroha::protocol::ToriiResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CommandService_v1::Service::StatusStream(::grpc::ServerContext* context, const ::iroha::protocol::TxStatusRequest* request, ::grpc::ServerWriter< ::iroha::protocol::ToriiResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* QueryService_v1_method_names[] = {
  "/iroha.protocol.QueryService_v1/Find",
  "/iroha.protocol.QueryService_v1/FetchCommits",
  "/iroha.protocol.QueryService_v1/Healthcheck",
};

std::unique_ptr< QueryService_v1::Stub> QueryService_v1::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< QueryService_v1::Stub> stub(new QueryService_v1::Stub(channel));
  return stub;
}

QueryService_v1::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Find_(QueryService_v1_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FetchCommits_(QueryService_v1_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Healthcheck_(QueryService_v1_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status QueryService_v1::Stub::Find(::grpc::ClientContext* context, const ::iroha::protocol::Query& request, ::iroha::protocol::QueryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::iroha::protocol::Query, ::iroha::protocol::QueryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Find_, context, request, response);
}

void QueryService_v1::Stub::experimental_async::Find(::grpc::ClientContext* context, const ::iroha::protocol::Query* request, ::iroha::protocol::QueryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::iroha::protocol::Query, ::iroha::protocol::QueryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Find_, context, request, response, std::move(f));
}

void QueryService_v1::Stub::experimental_async::Find(::grpc::ClientContext* context, const ::iroha::protocol::Query* request, ::iroha::protocol::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Find_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::iroha::protocol::QueryResponse>* QueryService_v1::Stub::PrepareAsyncFindRaw(::grpc::ClientContext* context, const ::iroha::protocol::Query& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::iroha::protocol::QueryResponse, ::iroha::protocol::Query, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Find_, context, request);
}

::grpc::ClientAsyncResponseReader< ::iroha::protocol::QueryResponse>* QueryService_v1::Stub::AsyncFindRaw(::grpc::ClientContext* context, const ::iroha::protocol::Query& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFindRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::iroha::protocol::BlockQueryResponse>* QueryService_v1::Stub::FetchCommitsRaw(::grpc::ClientContext* context, const ::iroha::protocol::BlocksQuery& request) {
  return ::grpc::internal::ClientReaderFactory< ::iroha::protocol::BlockQueryResponse>::Create(channel_.get(), rpcmethod_FetchCommits_, context, request);
}

void QueryService_v1::Stub::experimental_async::FetchCommits(::grpc::ClientContext* context, const ::iroha::protocol::BlocksQuery* request, ::grpc::experimental::ClientReadReactor< ::iroha::protocol::BlockQueryResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::iroha::protocol::BlockQueryResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_FetchCommits_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::iroha::protocol::BlockQueryResponse>* QueryService_v1::Stub::AsyncFetchCommitsRaw(::grpc::ClientContext* context, const ::iroha::protocol::BlocksQuery& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::iroha::protocol::BlockQueryResponse>::Create(channel_.get(), cq, rpcmethod_FetchCommits_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::iroha::protocol::BlockQueryResponse>* QueryService_v1::Stub::PrepareAsyncFetchCommitsRaw(::grpc::ClientContext* context, const ::iroha::protocol::BlocksQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::iroha::protocol::BlockQueryResponse>::Create(channel_.get(), cq, rpcmethod_FetchCommits_, context, request, false, nullptr);
}

::grpc::Status QueryService_v1::Stub::Healthcheck(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::iroha::protocol::HealthcheckData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::iroha::protocol::HealthcheckData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Healthcheck_, context, request, response);
}

void QueryService_v1::Stub::experimental_async::Healthcheck(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::iroha::protocol::HealthcheckData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::iroha::protocol::HealthcheckData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Healthcheck_, context, request, response, std::move(f));
}

void QueryService_v1::Stub::experimental_async::Healthcheck(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::iroha::protocol::HealthcheckData* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Healthcheck_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::iroha::protocol::HealthcheckData>* QueryService_v1::Stub::PrepareAsyncHealthcheckRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::iroha::protocol::HealthcheckData, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Healthcheck_, context, request);
}

::grpc::ClientAsyncResponseReader< ::iroha::protocol::HealthcheckData>* QueryService_v1::Stub::AsyncHealthcheckRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHealthcheckRaw(context, request, cq);
  result->StartCall();
  return result;
}

QueryService_v1::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      QueryService_v1_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< QueryService_v1::Service, ::iroha::protocol::Query, ::iroha::protocol::QueryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](QueryService_v1::Service* service,
             ::grpc::ServerContext* ctx,
             const ::iroha::protocol::Query* req,
             ::iroha::protocol::QueryResponse* resp) {
               return service->Find(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      QueryService_v1_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< QueryService_v1::Service, ::iroha::protocol::BlocksQuery, ::iroha::protocol::BlockQueryResponse>(
          [](QueryService_v1::Service* service,
             ::grpc::ServerContext* ctx,
             const ::iroha::protocol::BlocksQuery* req,
             ::grpc::ServerWriter<::iroha::protocol::BlockQueryResponse>* writer) {
               return service->FetchCommits(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      QueryService_v1_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< QueryService_v1::Service, ::google::protobuf::Empty, ::iroha::protocol::HealthcheckData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](QueryService_v1::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::iroha::protocol::HealthcheckData* resp) {
               return service->Healthcheck(ctx, req, resp);
             }, this)));
}

QueryService_v1::Service::~Service() {
}

::grpc::Status QueryService_v1::Service::Find(::grpc::ServerContext* context, const ::iroha::protocol::Query* request, ::iroha::protocol::QueryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status QueryService_v1::Service::FetchCommits(::grpc::ServerContext* context, const ::iroha::protocol::BlocksQuery* request, ::grpc::ServerWriter< ::iroha::protocol::BlockQueryResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status QueryService_v1::Service::Healthcheck(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::iroha::protocol::HealthcheckData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace iroha
}  // namespace protocol

