// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ordering.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ordering_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ordering_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "transaction.pb.h"
#include "proposal.pb.h"
#include "endpoint.pb.h"
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ordering_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ordering_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ordering_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_ordering_2eproto_metadata_getter(int index);
namespace iroha {
namespace ordering {
namespace proto {
class BatchesRequest;
struct BatchesRequestDefaultTypeInternal;
extern BatchesRequestDefaultTypeInternal _BatchesRequest_default_instance_;
class ProposalRequest;
struct ProposalRequestDefaultTypeInternal;
extern ProposalRequestDefaultTypeInternal _ProposalRequest_default_instance_;
class ProposalResponse;
struct ProposalResponseDefaultTypeInternal;
extern ProposalResponseDefaultTypeInternal _ProposalResponse_default_instance_;
class ProposalRound;
struct ProposalRoundDefaultTypeInternal;
extern ProposalRoundDefaultTypeInternal _ProposalRound_default_instance_;
}  // namespace proto
}  // namespace ordering
}  // namespace iroha
PROTOBUF_NAMESPACE_OPEN
template<> ::iroha::ordering::proto::BatchesRequest* Arena::CreateMaybeMessage<::iroha::ordering::proto::BatchesRequest>(Arena*);
template<> ::iroha::ordering::proto::ProposalRequest* Arena::CreateMaybeMessage<::iroha::ordering::proto::ProposalRequest>(Arena*);
template<> ::iroha::ordering::proto::ProposalResponse* Arena::CreateMaybeMessage<::iroha::ordering::proto::ProposalResponse>(Arena*);
template<> ::iroha::ordering::proto::ProposalRound* Arena::CreateMaybeMessage<::iroha::ordering::proto::ProposalRound>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace iroha {
namespace ordering {
namespace proto {

// ===================================================================

class ProposalRound PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iroha.ordering.proto.ProposalRound) */ {
 public:
  inline ProposalRound() : ProposalRound(nullptr) {}
  virtual ~ProposalRound();
  explicit constexpr ProposalRound(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProposalRound(const ProposalRound& from);
  ProposalRound(ProposalRound&& from) noexcept
    : ProposalRound() {
    *this = ::std::move(from);
  }

  inline ProposalRound& operator=(const ProposalRound& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProposalRound& operator=(ProposalRound&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProposalRound& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProposalRound* internal_default_instance() {
    return reinterpret_cast<const ProposalRound*>(
               &_ProposalRound_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProposalRound& a, ProposalRound& b) {
    a.Swap(&b);
  }
  inline void Swap(ProposalRound* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProposalRound* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProposalRound* New() const final {
    return CreateMaybeMessage<ProposalRound>(nullptr);
  }

  ProposalRound* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProposalRound>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProposalRound& from);
  void MergeFrom(const ProposalRound& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProposalRound* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iroha.ordering.proto.ProposalRound";
  }
  protected:
  explicit ProposalRound(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_ordering_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockRoundFieldNumber = 1,
    kRejectRoundFieldNumber = 2,
  };
  // uint64 block_round = 1;
  void clear_block_round();
  ::PROTOBUF_NAMESPACE_ID::uint64 block_round() const;
  void set_block_round(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_block_round() const;
  void _internal_set_block_round(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 reject_round = 2;
  void clear_reject_round();
  ::PROTOBUF_NAMESPACE_ID::uint32 reject_round() const;
  void set_reject_round(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_reject_round() const;
  void _internal_set_reject_round(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:iroha.ordering.proto.ProposalRound)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 block_round_;
  ::PROTOBUF_NAMESPACE_ID::uint32 reject_round_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ordering_2eproto;
};
// -------------------------------------------------------------------

class BatchesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iroha.ordering.proto.BatchesRequest) */ {
 public:
  inline BatchesRequest() : BatchesRequest(nullptr) {}
  virtual ~BatchesRequest();
  explicit constexpr BatchesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchesRequest(const BatchesRequest& from);
  BatchesRequest(BatchesRequest&& from) noexcept
    : BatchesRequest() {
    *this = ::std::move(from);
  }

  inline BatchesRequest& operator=(const BatchesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchesRequest& operator=(BatchesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BatchesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchesRequest* internal_default_instance() {
    return reinterpret_cast<const BatchesRequest*>(
               &_BatchesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BatchesRequest& a, BatchesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BatchesRequest* New() const final {
    return CreateMaybeMessage<BatchesRequest>(nullptr);
  }

  BatchesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BatchesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BatchesRequest& from);
  void MergeFrom(const BatchesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iroha.ordering.proto.BatchesRequest";
  }
  protected:
  explicit BatchesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_ordering_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionsFieldNumber = 1,
  };
  // repeated .iroha.protocol.Transaction transactions = 1;
  int transactions_size() const;
  private:
  int _internal_transactions_size() const;
  public:
  void clear_transactions();
  ::iroha::protocol::Transaction* mutable_transactions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iroha::protocol::Transaction >*
      mutable_transactions();
  private:
  const ::iroha::protocol::Transaction& _internal_transactions(int index) const;
  ::iroha::protocol::Transaction* _internal_add_transactions();
  public:
  const ::iroha::protocol::Transaction& transactions(int index) const;
  ::iroha::protocol::Transaction* add_transactions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iroha::protocol::Transaction >&
      transactions() const;

  // @@protoc_insertion_point(class_scope:iroha.ordering.proto.BatchesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iroha::protocol::Transaction > transactions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ordering_2eproto;
};
// -------------------------------------------------------------------

class ProposalRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iroha.ordering.proto.ProposalRequest) */ {
 public:
  inline ProposalRequest() : ProposalRequest(nullptr) {}
  virtual ~ProposalRequest();
  explicit constexpr ProposalRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProposalRequest(const ProposalRequest& from);
  ProposalRequest(ProposalRequest&& from) noexcept
    : ProposalRequest() {
    *this = ::std::move(from);
  }

  inline ProposalRequest& operator=(const ProposalRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProposalRequest& operator=(ProposalRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProposalRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProposalRequest* internal_default_instance() {
    return reinterpret_cast<const ProposalRequest*>(
               &_ProposalRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ProposalRequest& a, ProposalRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProposalRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProposalRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProposalRequest* New() const final {
    return CreateMaybeMessage<ProposalRequest>(nullptr);
  }

  ProposalRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProposalRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProposalRequest& from);
  void MergeFrom(const ProposalRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProposalRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iroha.ordering.proto.ProposalRequest";
  }
  protected:
  explicit ProposalRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_ordering_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoundFieldNumber = 1,
  };
  // .iroha.ordering.proto.ProposalRound round = 1;
  bool has_round() const;
  private:
  bool _internal_has_round() const;
  public:
  void clear_round();
  const ::iroha::ordering::proto::ProposalRound& round() const;
  ::iroha::ordering::proto::ProposalRound* release_round();
  ::iroha::ordering::proto::ProposalRound* mutable_round();
  void set_allocated_round(::iroha::ordering::proto::ProposalRound* round);
  private:
  const ::iroha::ordering::proto::ProposalRound& _internal_round() const;
  ::iroha::ordering::proto::ProposalRound* _internal_mutable_round();
  public:
  void unsafe_arena_set_allocated_round(
      ::iroha::ordering::proto::ProposalRound* round);
  ::iroha::ordering::proto::ProposalRound* unsafe_arena_release_round();

  // @@protoc_insertion_point(class_scope:iroha.ordering.proto.ProposalRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::iroha::ordering::proto::ProposalRound* round_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ordering_2eproto;
};
// -------------------------------------------------------------------

class ProposalResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iroha.ordering.proto.ProposalResponse) */ {
 public:
  inline ProposalResponse() : ProposalResponse(nullptr) {}
  virtual ~ProposalResponse();
  explicit constexpr ProposalResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProposalResponse(const ProposalResponse& from);
  ProposalResponse(ProposalResponse&& from) noexcept
    : ProposalResponse() {
    *this = ::std::move(from);
  }

  inline ProposalResponse& operator=(const ProposalResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProposalResponse& operator=(ProposalResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProposalResponse& default_instance() {
    return *internal_default_instance();
  }
  enum OptionalProposalCase {
    kProposal = 1,
    OPTIONAL_PROPOSAL_NOT_SET = 0,
  };

  static inline const ProposalResponse* internal_default_instance() {
    return reinterpret_cast<const ProposalResponse*>(
               &_ProposalResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ProposalResponse& a, ProposalResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ProposalResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProposalResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProposalResponse* New() const final {
    return CreateMaybeMessage<ProposalResponse>(nullptr);
  }

  ProposalResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProposalResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProposalResponse& from);
  void MergeFrom(const ProposalResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProposalResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iroha.ordering.proto.ProposalResponse";
  }
  protected:
  explicit ProposalResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_ordering_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProposalFieldNumber = 1,
  };
  // .iroha.protocol.Proposal proposal = 1;
  bool has_proposal() const;
  private:
  bool _internal_has_proposal() const;
  public:
  void clear_proposal();
  const ::iroha::protocol::Proposal& proposal() const;
  ::iroha::protocol::Proposal* release_proposal();
  ::iroha::protocol::Proposal* mutable_proposal();
  void set_allocated_proposal(::iroha::protocol::Proposal* proposal);
  private:
  const ::iroha::protocol::Proposal& _internal_proposal() const;
  ::iroha::protocol::Proposal* _internal_mutable_proposal();
  public:
  void unsafe_arena_set_allocated_proposal(
      ::iroha::protocol::Proposal* proposal);
  ::iroha::protocol::Proposal* unsafe_arena_release_proposal();

  void clear_optional_proposal();
  OptionalProposalCase optional_proposal_case() const;
  // @@protoc_insertion_point(class_scope:iroha.ordering.proto.ProposalResponse)
 private:
  class _Internal;
  void set_has_proposal();

  inline bool has_optional_proposal() const;
  inline void clear_has_optional_proposal();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union OptionalProposalUnion {
    constexpr OptionalProposalUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::iroha::protocol::Proposal* proposal_;
  } optional_proposal_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_ordering_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProposalRound

// uint64 block_round = 1;
inline void ProposalRound::clear_block_round() {
  block_round_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProposalRound::_internal_block_round() const {
  return block_round_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProposalRound::block_round() const {
  // @@protoc_insertion_point(field_get:iroha.ordering.proto.ProposalRound.block_round)
  return _internal_block_round();
}
inline void ProposalRound::_internal_set_block_round(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  block_round_ = value;
}
inline void ProposalRound::set_block_round(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_block_round(value);
  // @@protoc_insertion_point(field_set:iroha.ordering.proto.ProposalRound.block_round)
}

// uint32 reject_round = 2;
inline void ProposalRound::clear_reject_round() {
  reject_round_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProposalRound::_internal_reject_round() const {
  return reject_round_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProposalRound::reject_round() const {
  // @@protoc_insertion_point(field_get:iroha.ordering.proto.ProposalRound.reject_round)
  return _internal_reject_round();
}
inline void ProposalRound::_internal_set_reject_round(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  reject_round_ = value;
}
inline void ProposalRound::set_reject_round(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_reject_round(value);
  // @@protoc_insertion_point(field_set:iroha.ordering.proto.ProposalRound.reject_round)
}

// -------------------------------------------------------------------

// BatchesRequest

// repeated .iroha.protocol.Transaction transactions = 1;
inline int BatchesRequest::_internal_transactions_size() const {
  return transactions_.size();
}
inline int BatchesRequest::transactions_size() const {
  return _internal_transactions_size();
}
inline ::iroha::protocol::Transaction* BatchesRequest::mutable_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:iroha.ordering.proto.BatchesRequest.transactions)
  return transactions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iroha::protocol::Transaction >*
BatchesRequest::mutable_transactions() {
  // @@protoc_insertion_point(field_mutable_list:iroha.ordering.proto.BatchesRequest.transactions)
  return &transactions_;
}
inline const ::iroha::protocol::Transaction& BatchesRequest::_internal_transactions(int index) const {
  return transactions_.Get(index);
}
inline const ::iroha::protocol::Transaction& BatchesRequest::transactions(int index) const {
  // @@protoc_insertion_point(field_get:iroha.ordering.proto.BatchesRequest.transactions)
  return _internal_transactions(index);
}
inline ::iroha::protocol::Transaction* BatchesRequest::_internal_add_transactions() {
  return transactions_.Add();
}
inline ::iroha::protocol::Transaction* BatchesRequest::add_transactions() {
  // @@protoc_insertion_point(field_add:iroha.ordering.proto.BatchesRequest.transactions)
  return _internal_add_transactions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iroha::protocol::Transaction >&
BatchesRequest::transactions() const {
  // @@protoc_insertion_point(field_list:iroha.ordering.proto.BatchesRequest.transactions)
  return transactions_;
}

// -------------------------------------------------------------------

// ProposalRequest

// .iroha.ordering.proto.ProposalRound round = 1;
inline bool ProposalRequest::_internal_has_round() const {
  return this != internal_default_instance() && round_ != nullptr;
}
inline bool ProposalRequest::has_round() const {
  return _internal_has_round();
}
inline void ProposalRequest::clear_round() {
  if (GetArena() == nullptr && round_ != nullptr) {
    delete round_;
  }
  round_ = nullptr;
}
inline const ::iroha::ordering::proto::ProposalRound& ProposalRequest::_internal_round() const {
  const ::iroha::ordering::proto::ProposalRound* p = round_;
  return p != nullptr ? *p : reinterpret_cast<const ::iroha::ordering::proto::ProposalRound&>(
      ::iroha::ordering::proto::_ProposalRound_default_instance_);
}
inline const ::iroha::ordering::proto::ProposalRound& ProposalRequest::round() const {
  // @@protoc_insertion_point(field_get:iroha.ordering.proto.ProposalRequest.round)
  return _internal_round();
}
inline void ProposalRequest::unsafe_arena_set_allocated_round(
    ::iroha::ordering::proto::ProposalRound* round) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(round_);
  }
  round_ = round;
  if (round) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iroha.ordering.proto.ProposalRequest.round)
}
inline ::iroha::ordering::proto::ProposalRound* ProposalRequest::release_round() {
  
  ::iroha::ordering::proto::ProposalRound* temp = round_;
  round_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::iroha::ordering::proto::ProposalRound* ProposalRequest::unsafe_arena_release_round() {
  // @@protoc_insertion_point(field_release:iroha.ordering.proto.ProposalRequest.round)
  
  ::iroha::ordering::proto::ProposalRound* temp = round_;
  round_ = nullptr;
  return temp;
}
inline ::iroha::ordering::proto::ProposalRound* ProposalRequest::_internal_mutable_round() {
  
  if (round_ == nullptr) {
    auto* p = CreateMaybeMessage<::iroha::ordering::proto::ProposalRound>(GetArena());
    round_ = p;
  }
  return round_;
}
inline ::iroha::ordering::proto::ProposalRound* ProposalRequest::mutable_round() {
  // @@protoc_insertion_point(field_mutable:iroha.ordering.proto.ProposalRequest.round)
  return _internal_mutable_round();
}
inline void ProposalRequest::set_allocated_round(::iroha::ordering::proto::ProposalRound* round) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete round_;
  }
  if (round) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(round);
    if (message_arena != submessage_arena) {
      round = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, round, submessage_arena);
    }
    
  } else {
    
  }
  round_ = round;
  // @@protoc_insertion_point(field_set_allocated:iroha.ordering.proto.ProposalRequest.round)
}

// -------------------------------------------------------------------

// ProposalResponse

// .iroha.protocol.Proposal proposal = 1;
inline bool ProposalResponse::_internal_has_proposal() const {
  return optional_proposal_case() == kProposal;
}
inline bool ProposalResponse::has_proposal() const {
  return _internal_has_proposal();
}
inline void ProposalResponse::set_has_proposal() {
  _oneof_case_[0] = kProposal;
}
inline ::iroha::protocol::Proposal* ProposalResponse::release_proposal() {
  // @@protoc_insertion_point(field_release:iroha.ordering.proto.ProposalResponse.proposal)
  if (_internal_has_proposal()) {
    clear_has_optional_proposal();
      ::iroha::protocol::Proposal* temp = optional_proposal_.proposal_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    optional_proposal_.proposal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iroha::protocol::Proposal& ProposalResponse::_internal_proposal() const {
  return _internal_has_proposal()
      ? *optional_proposal_.proposal_
      : reinterpret_cast< ::iroha::protocol::Proposal&>(::iroha::protocol::_Proposal_default_instance_);
}
inline const ::iroha::protocol::Proposal& ProposalResponse::proposal() const {
  // @@protoc_insertion_point(field_get:iroha.ordering.proto.ProposalResponse.proposal)
  return _internal_proposal();
}
inline ::iroha::protocol::Proposal* ProposalResponse::unsafe_arena_release_proposal() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iroha.ordering.proto.ProposalResponse.proposal)
  if (_internal_has_proposal()) {
    clear_has_optional_proposal();
    ::iroha::protocol::Proposal* temp = optional_proposal_.proposal_;
    optional_proposal_.proposal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProposalResponse::unsafe_arena_set_allocated_proposal(::iroha::protocol::Proposal* proposal) {
  clear_optional_proposal();
  if (proposal) {
    set_has_proposal();
    optional_proposal_.proposal_ = proposal;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iroha.ordering.proto.ProposalResponse.proposal)
}
inline ::iroha::protocol::Proposal* ProposalResponse::_internal_mutable_proposal() {
  if (!_internal_has_proposal()) {
    clear_optional_proposal();
    set_has_proposal();
    optional_proposal_.proposal_ = CreateMaybeMessage< ::iroha::protocol::Proposal >(GetArena());
  }
  return optional_proposal_.proposal_;
}
inline ::iroha::protocol::Proposal* ProposalResponse::mutable_proposal() {
  // @@protoc_insertion_point(field_mutable:iroha.ordering.proto.ProposalResponse.proposal)
  return _internal_mutable_proposal();
}

inline bool ProposalResponse::has_optional_proposal() const {
  return optional_proposal_case() != OPTIONAL_PROPOSAL_NOT_SET;
}
inline void ProposalResponse::clear_has_optional_proposal() {
  _oneof_case_[0] = OPTIONAL_PROPOSAL_NOT_SET;
}
inline ProposalResponse::OptionalProposalCase ProposalResponse::optional_proposal_case() const {
  return ProposalResponse::OptionalProposalCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace ordering
}  // namespace iroha

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ordering_2eproto
