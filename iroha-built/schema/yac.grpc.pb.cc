// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: yac.proto

#include "yac.pb.h"
#include "yac.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace iroha {
namespace consensus {
namespace yac {
namespace proto {

static const char* Yac_method_names[] = {
  "/iroha.consensus.yac.proto.Yac/SendState",
};

std::unique_ptr< Yac::Stub> Yac::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Yac::Stub> stub(new Yac::Stub(channel));
  return stub;
}

Yac::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SendState_(Yac_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Yac::Stub::SendState(::grpc::ClientContext* context, const ::iroha::consensus::yac::proto::State& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::iroha::consensus::yac::proto::State, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendState_, context, request, response);
}

void Yac::Stub::experimental_async::SendState(::grpc::ClientContext* context, const ::iroha::consensus::yac::proto::State* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::iroha::consensus::yac::proto::State, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendState_, context, request, response, std::move(f));
}

void Yac::Stub::experimental_async::SendState(::grpc::ClientContext* context, const ::iroha::consensus::yac::proto::State* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Yac::Stub::PrepareAsyncSendStateRaw(::grpc::ClientContext* context, const ::iroha::consensus::yac::proto::State& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::iroha::consensus::yac::proto::State, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Yac::Stub::AsyncSendStateRaw(::grpc::ClientContext* context, const ::iroha::consensus::yac::proto::State& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

Yac::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Yac_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Yac::Service, ::iroha::consensus::yac::proto::State, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Yac::Service* service,
             ::grpc::ServerContext* ctx,
             const ::iroha::consensus::yac::proto::State* req,
             ::google::protobuf::Empty* resp) {
               return service->SendState(ctx, req, resp);
             }, this)));
}

Yac::Service::~Service() {
}

::grpc::Status Yac::Service::SendState(::grpc::ServerContext* context, const ::iroha::consensus::yac::proto::State* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace iroha
}  // namespace consensus
}  // namespace yac
}  // namespace proto

