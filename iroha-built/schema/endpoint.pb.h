// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: endpoint.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_endpoint_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_endpoint_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "transaction.pb.h"
#include "queries.pb.h"
#include "qry_responses.pb.h"
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_endpoint_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_endpoint_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_endpoint_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_endpoint_2eproto_metadata_getter(int index);
namespace iroha {
namespace protocol {
class ToriiResponse;
struct ToriiResponseDefaultTypeInternal;
extern ToriiResponseDefaultTypeInternal _ToriiResponse_default_instance_;
class TxList;
struct TxListDefaultTypeInternal;
extern TxListDefaultTypeInternal _TxList_default_instance_;
class TxStatusRequest;
struct TxStatusRequestDefaultTypeInternal;
extern TxStatusRequestDefaultTypeInternal _TxStatusRequest_default_instance_;
}  // namespace protocol
}  // namespace iroha
PROTOBUF_NAMESPACE_OPEN
template<> ::iroha::protocol::ToriiResponse* Arena::CreateMaybeMessage<::iroha::protocol::ToriiResponse>(Arena*);
template<> ::iroha::protocol::TxList* Arena::CreateMaybeMessage<::iroha::protocol::TxList>(Arena*);
template<> ::iroha::protocol::TxStatusRequest* Arena::CreateMaybeMessage<::iroha::protocol::TxStatusRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace iroha {
namespace protocol {

enum TxStatus : int {
  STATELESS_VALIDATION_FAILED = 0,
  STATELESS_VALIDATION_SUCCESS = 1,
  STATEFUL_VALIDATION_FAILED = 2,
  STATEFUL_VALIDATION_SUCCESS = 3,
  REJECTED = 4,
  COMMITTED = 5,
  MST_EXPIRED = 6,
  NOT_RECEIVED = 7,
  MST_PENDING = 8,
  ENOUGH_SIGNATURES_COLLECTED = 9,
  TxStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TxStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TxStatus_IsValid(int value);
constexpr TxStatus TxStatus_MIN = STATELESS_VALIDATION_FAILED;
constexpr TxStatus TxStatus_MAX = ENOUGH_SIGNATURES_COLLECTED;
constexpr int TxStatus_ARRAYSIZE = TxStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TxStatus_descriptor();
template<typename T>
inline const std::string& TxStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TxStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TxStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TxStatus_descriptor(), enum_t_value);
}
inline bool TxStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TxStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TxStatus>(
    TxStatus_descriptor(), name, value);
}
// ===================================================================

class ToriiResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iroha.protocol.ToriiResponse) */ {
 public:
  inline ToriiResponse() : ToriiResponse(nullptr) {}
  virtual ~ToriiResponse();
  explicit constexpr ToriiResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ToriiResponse(const ToriiResponse& from);
  ToriiResponse(ToriiResponse&& from) noexcept
    : ToriiResponse() {
    *this = ::std::move(from);
  }

  inline ToriiResponse& operator=(const ToriiResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ToriiResponse& operator=(ToriiResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ToriiResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ToriiResponse* internal_default_instance() {
    return reinterpret_cast<const ToriiResponse*>(
               &_ToriiResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ToriiResponse& a, ToriiResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ToriiResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ToriiResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ToriiResponse* New() const final {
    return CreateMaybeMessage<ToriiResponse>(nullptr);
  }

  ToriiResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ToriiResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ToriiResponse& from);
  void MergeFrom(const ToriiResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ToriiResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iroha.protocol.ToriiResponse";
  }
  protected:
  explicit ToriiResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_endpoint_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxHashFieldNumber = 2,
    kErrOrCmdNameFieldNumber = 3,
    kTxStatusFieldNumber = 1,
    kErrorCodeFieldNumber = 5,
    kFailedCmdIndexFieldNumber = 4,
  };
  // string tx_hash = 2;
  void clear_tx_hash();
  const std::string& tx_hash() const;
  void set_tx_hash(const std::string& value);
  void set_tx_hash(std::string&& value);
  void set_tx_hash(const char* value);
  void set_tx_hash(const char* value, size_t size);
  std::string* mutable_tx_hash();
  std::string* release_tx_hash();
  void set_allocated_tx_hash(std::string* tx_hash);
  private:
  const std::string& _internal_tx_hash() const;
  void _internal_set_tx_hash(const std::string& value);
  std::string* _internal_mutable_tx_hash();
  public:

  // string err_or_cmd_name = 3;
  void clear_err_or_cmd_name();
  const std::string& err_or_cmd_name() const;
  void set_err_or_cmd_name(const std::string& value);
  void set_err_or_cmd_name(std::string&& value);
  void set_err_or_cmd_name(const char* value);
  void set_err_or_cmd_name(const char* value, size_t size);
  std::string* mutable_err_or_cmd_name();
  std::string* release_err_or_cmd_name();
  void set_allocated_err_or_cmd_name(std::string* err_or_cmd_name);
  private:
  const std::string& _internal_err_or_cmd_name() const;
  void _internal_set_err_or_cmd_name(const std::string& value);
  std::string* _internal_mutable_err_or_cmd_name();
  public:

  // .iroha.protocol.TxStatus tx_status = 1;
  void clear_tx_status();
  ::iroha::protocol::TxStatus tx_status() const;
  void set_tx_status(::iroha::protocol::TxStatus value);
  private:
  ::iroha::protocol::TxStatus _internal_tx_status() const;
  void _internal_set_tx_status(::iroha::protocol::TxStatus value);
  public:

  // uint32 error_code = 5;
  void clear_error_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 error_code() const;
  void set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_error_code() const;
  void _internal_set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 failed_cmd_index = 4;
  void clear_failed_cmd_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 failed_cmd_index() const;
  void set_failed_cmd_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_failed_cmd_index() const;
  void _internal_set_failed_cmd_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:iroha.protocol.ToriiResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tx_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_or_cmd_name_;
  int tx_status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 error_code_;
  ::PROTOBUF_NAMESPACE_ID::uint64 failed_cmd_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_endpoint_2eproto;
};
// -------------------------------------------------------------------

class TxStatusRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iroha.protocol.TxStatusRequest) */ {
 public:
  inline TxStatusRequest() : TxStatusRequest(nullptr) {}
  virtual ~TxStatusRequest();
  explicit constexpr TxStatusRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TxStatusRequest(const TxStatusRequest& from);
  TxStatusRequest(TxStatusRequest&& from) noexcept
    : TxStatusRequest() {
    *this = ::std::move(from);
  }

  inline TxStatusRequest& operator=(const TxStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxStatusRequest& operator=(TxStatusRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TxStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TxStatusRequest* internal_default_instance() {
    return reinterpret_cast<const TxStatusRequest*>(
               &_TxStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TxStatusRequest& a, TxStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TxStatusRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TxStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TxStatusRequest* New() const final {
    return CreateMaybeMessage<TxStatusRequest>(nullptr);
  }

  TxStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TxStatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TxStatusRequest& from);
  void MergeFrom(const TxStatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxStatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iroha.protocol.TxStatusRequest";
  }
  protected:
  explicit TxStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_endpoint_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxHashFieldNumber = 1,
  };
  // string tx_hash = 1;
  void clear_tx_hash();
  const std::string& tx_hash() const;
  void set_tx_hash(const std::string& value);
  void set_tx_hash(std::string&& value);
  void set_tx_hash(const char* value);
  void set_tx_hash(const char* value, size_t size);
  std::string* mutable_tx_hash();
  std::string* release_tx_hash();
  void set_allocated_tx_hash(std::string* tx_hash);
  private:
  const std::string& _internal_tx_hash() const;
  void _internal_set_tx_hash(const std::string& value);
  std::string* _internal_mutable_tx_hash();
  public:

  // @@protoc_insertion_point(class_scope:iroha.protocol.TxStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tx_hash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_endpoint_2eproto;
};
// -------------------------------------------------------------------

class TxList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iroha.protocol.TxList) */ {
 public:
  inline TxList() : TxList(nullptr) {}
  virtual ~TxList();
  explicit constexpr TxList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TxList(const TxList& from);
  TxList(TxList&& from) noexcept
    : TxList() {
    *this = ::std::move(from);
  }

  inline TxList& operator=(const TxList& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxList& operator=(TxList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TxList& default_instance() {
    return *internal_default_instance();
  }
  static inline const TxList* internal_default_instance() {
    return reinterpret_cast<const TxList*>(
               &_TxList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TxList& a, TxList& b) {
    a.Swap(&b);
  }
  inline void Swap(TxList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TxList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TxList* New() const final {
    return CreateMaybeMessage<TxList>(nullptr);
  }

  TxList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TxList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TxList& from);
  void MergeFrom(const TxList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iroha.protocol.TxList";
  }
  protected:
  explicit TxList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_endpoint_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionsFieldNumber = 1,
  };
  // repeated .iroha.protocol.Transaction transactions = 1;
  int transactions_size() const;
  private:
  int _internal_transactions_size() const;
  public:
  void clear_transactions();
  ::iroha::protocol::Transaction* mutable_transactions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iroha::protocol::Transaction >*
      mutable_transactions();
  private:
  const ::iroha::protocol::Transaction& _internal_transactions(int index) const;
  ::iroha::protocol::Transaction* _internal_add_transactions();
  public:
  const ::iroha::protocol::Transaction& transactions(int index) const;
  ::iroha::protocol::Transaction* add_transactions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iroha::protocol::Transaction >&
      transactions() const;

  // @@protoc_insertion_point(class_scope:iroha.protocol.TxList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iroha::protocol::Transaction > transactions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_endpoint_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ToriiResponse

// .iroha.protocol.TxStatus tx_status = 1;
inline void ToriiResponse::clear_tx_status() {
  tx_status_ = 0;
}
inline ::iroha::protocol::TxStatus ToriiResponse::_internal_tx_status() const {
  return static_cast< ::iroha::protocol::TxStatus >(tx_status_);
}
inline ::iroha::protocol::TxStatus ToriiResponse::tx_status() const {
  // @@protoc_insertion_point(field_get:iroha.protocol.ToriiResponse.tx_status)
  return _internal_tx_status();
}
inline void ToriiResponse::_internal_set_tx_status(::iroha::protocol::TxStatus value) {
  
  tx_status_ = value;
}
inline void ToriiResponse::set_tx_status(::iroha::protocol::TxStatus value) {
  _internal_set_tx_status(value);
  // @@protoc_insertion_point(field_set:iroha.protocol.ToriiResponse.tx_status)
}

// string tx_hash = 2;
inline void ToriiResponse::clear_tx_hash() {
  tx_hash_.ClearToEmpty();
}
inline const std::string& ToriiResponse::tx_hash() const {
  // @@protoc_insertion_point(field_get:iroha.protocol.ToriiResponse.tx_hash)
  return _internal_tx_hash();
}
inline void ToriiResponse::set_tx_hash(const std::string& value) {
  _internal_set_tx_hash(value);
  // @@protoc_insertion_point(field_set:iroha.protocol.ToriiResponse.tx_hash)
}
inline std::string* ToriiResponse::mutable_tx_hash() {
  // @@protoc_insertion_point(field_mutable:iroha.protocol.ToriiResponse.tx_hash)
  return _internal_mutable_tx_hash();
}
inline const std::string& ToriiResponse::_internal_tx_hash() const {
  return tx_hash_.Get();
}
inline void ToriiResponse::_internal_set_tx_hash(const std::string& value) {
  
  tx_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ToriiResponse::set_tx_hash(std::string&& value) {
  
  tx_hash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:iroha.protocol.ToriiResponse.tx_hash)
}
inline void ToriiResponse::set_tx_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tx_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:iroha.protocol.ToriiResponse.tx_hash)
}
inline void ToriiResponse::set_tx_hash(const char* value,
    size_t size) {
  
  tx_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:iroha.protocol.ToriiResponse.tx_hash)
}
inline std::string* ToriiResponse::_internal_mutable_tx_hash() {
  
  return tx_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ToriiResponse::release_tx_hash() {
  // @@protoc_insertion_point(field_release:iroha.protocol.ToriiResponse.tx_hash)
  return tx_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ToriiResponse::set_allocated_tx_hash(std::string* tx_hash) {
  if (tx_hash != nullptr) {
    
  } else {
    
  }
  tx_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tx_hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.ToriiResponse.tx_hash)
}

// string err_or_cmd_name = 3;
inline void ToriiResponse::clear_err_or_cmd_name() {
  err_or_cmd_name_.ClearToEmpty();
}
inline const std::string& ToriiResponse::err_or_cmd_name() const {
  // @@protoc_insertion_point(field_get:iroha.protocol.ToriiResponse.err_or_cmd_name)
  return _internal_err_or_cmd_name();
}
inline void ToriiResponse::set_err_or_cmd_name(const std::string& value) {
  _internal_set_err_or_cmd_name(value);
  // @@protoc_insertion_point(field_set:iroha.protocol.ToriiResponse.err_or_cmd_name)
}
inline std::string* ToriiResponse::mutable_err_or_cmd_name() {
  // @@protoc_insertion_point(field_mutable:iroha.protocol.ToriiResponse.err_or_cmd_name)
  return _internal_mutable_err_or_cmd_name();
}
inline const std::string& ToriiResponse::_internal_err_or_cmd_name() const {
  return err_or_cmd_name_.Get();
}
inline void ToriiResponse::_internal_set_err_or_cmd_name(const std::string& value) {
  
  err_or_cmd_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ToriiResponse::set_err_or_cmd_name(std::string&& value) {
  
  err_or_cmd_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:iroha.protocol.ToriiResponse.err_or_cmd_name)
}
inline void ToriiResponse::set_err_or_cmd_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  err_or_cmd_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:iroha.protocol.ToriiResponse.err_or_cmd_name)
}
inline void ToriiResponse::set_err_or_cmd_name(const char* value,
    size_t size) {
  
  err_or_cmd_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:iroha.protocol.ToriiResponse.err_or_cmd_name)
}
inline std::string* ToriiResponse::_internal_mutable_err_or_cmd_name() {
  
  return err_or_cmd_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ToriiResponse::release_err_or_cmd_name() {
  // @@protoc_insertion_point(field_release:iroha.protocol.ToriiResponse.err_or_cmd_name)
  return err_or_cmd_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ToriiResponse::set_allocated_err_or_cmd_name(std::string* err_or_cmd_name) {
  if (err_or_cmd_name != nullptr) {
    
  } else {
    
  }
  err_or_cmd_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err_or_cmd_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.ToriiResponse.err_or_cmd_name)
}

// uint64 failed_cmd_index = 4;
inline void ToriiResponse::clear_failed_cmd_index() {
  failed_cmd_index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ToriiResponse::_internal_failed_cmd_index() const {
  return failed_cmd_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ToriiResponse::failed_cmd_index() const {
  // @@protoc_insertion_point(field_get:iroha.protocol.ToriiResponse.failed_cmd_index)
  return _internal_failed_cmd_index();
}
inline void ToriiResponse::_internal_set_failed_cmd_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  failed_cmd_index_ = value;
}
inline void ToriiResponse::set_failed_cmd_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_failed_cmd_index(value);
  // @@protoc_insertion_point(field_set:iroha.protocol.ToriiResponse.failed_cmd_index)
}

// uint32 error_code = 5;
inline void ToriiResponse::clear_error_code() {
  error_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ToriiResponse::_internal_error_code() const {
  return error_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ToriiResponse::error_code() const {
  // @@protoc_insertion_point(field_get:iroha.protocol.ToriiResponse.error_code)
  return _internal_error_code();
}
inline void ToriiResponse::_internal_set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  error_code_ = value;
}
inline void ToriiResponse::set_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:iroha.protocol.ToriiResponse.error_code)
}

// -------------------------------------------------------------------

// TxStatusRequest

// string tx_hash = 1;
inline void TxStatusRequest::clear_tx_hash() {
  tx_hash_.ClearToEmpty();
}
inline const std::string& TxStatusRequest::tx_hash() const {
  // @@protoc_insertion_point(field_get:iroha.protocol.TxStatusRequest.tx_hash)
  return _internal_tx_hash();
}
inline void TxStatusRequest::set_tx_hash(const std::string& value) {
  _internal_set_tx_hash(value);
  // @@protoc_insertion_point(field_set:iroha.protocol.TxStatusRequest.tx_hash)
}
inline std::string* TxStatusRequest::mutable_tx_hash() {
  // @@protoc_insertion_point(field_mutable:iroha.protocol.TxStatusRequest.tx_hash)
  return _internal_mutable_tx_hash();
}
inline const std::string& TxStatusRequest::_internal_tx_hash() const {
  return tx_hash_.Get();
}
inline void TxStatusRequest::_internal_set_tx_hash(const std::string& value) {
  
  tx_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TxStatusRequest::set_tx_hash(std::string&& value) {
  
  tx_hash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:iroha.protocol.TxStatusRequest.tx_hash)
}
inline void TxStatusRequest::set_tx_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tx_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:iroha.protocol.TxStatusRequest.tx_hash)
}
inline void TxStatusRequest::set_tx_hash(const char* value,
    size_t size) {
  
  tx_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:iroha.protocol.TxStatusRequest.tx_hash)
}
inline std::string* TxStatusRequest::_internal_mutable_tx_hash() {
  
  return tx_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TxStatusRequest::release_tx_hash() {
  // @@protoc_insertion_point(field_release:iroha.protocol.TxStatusRequest.tx_hash)
  return tx_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TxStatusRequest::set_allocated_tx_hash(std::string* tx_hash) {
  if (tx_hash != nullptr) {
    
  } else {
    
  }
  tx_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tx_hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.TxStatusRequest.tx_hash)
}

// -------------------------------------------------------------------

// TxList

// repeated .iroha.protocol.Transaction transactions = 1;
inline int TxList::_internal_transactions_size() const {
  return transactions_.size();
}
inline int TxList::transactions_size() const {
  return _internal_transactions_size();
}
inline ::iroha::protocol::Transaction* TxList::mutable_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:iroha.protocol.TxList.transactions)
  return transactions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iroha::protocol::Transaction >*
TxList::mutable_transactions() {
  // @@protoc_insertion_point(field_mutable_list:iroha.protocol.TxList.transactions)
  return &transactions_;
}
inline const ::iroha::protocol::Transaction& TxList::_internal_transactions(int index) const {
  return transactions_.Get(index);
}
inline const ::iroha::protocol::Transaction& TxList::transactions(int index) const {
  // @@protoc_insertion_point(field_get:iroha.protocol.TxList.transactions)
  return _internal_transactions(index);
}
inline ::iroha::protocol::Transaction* TxList::_internal_add_transactions() {
  return transactions_.Add();
}
inline ::iroha::protocol::Transaction* TxList::add_transactions() {
  // @@protoc_insertion_point(field_add:iroha.protocol.TxList.transactions)
  return _internal_add_transactions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iroha::protocol::Transaction >&
TxList::transactions() const {
  // @@protoc_insertion_point(field_list:iroha.protocol.TxList.transactions)
  return transactions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace iroha

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::iroha::protocol::TxStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::iroha::protocol::TxStatus>() {
  return ::iroha::protocol::TxStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_endpoint_2eproto
