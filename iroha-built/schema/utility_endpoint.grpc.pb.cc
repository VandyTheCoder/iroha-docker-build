// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: utility_endpoint.proto

#include "utility_endpoint.pb.h"
#include "utility_endpoint.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace iroha {
namespace utility_service {
namespace proto {

static const char* UtilityService_v1_method_names[] = {
  "/iroha.utility_service.proto.UtilityService_v1/Status",
  "/iroha.utility_service.proto.UtilityService_v1/Shutdown",
};

std::unique_ptr< UtilityService_v1::Stub> UtilityService_v1::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< UtilityService_v1::Stub> stub(new UtilityService_v1::Stub(channel));
  return stub;
}

UtilityService_v1::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Status_(UtilityService_v1_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Shutdown_(UtilityService_v1_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::iroha::utility_service::proto::Status>* UtilityService_v1::Stub::StatusRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::iroha::utility_service::proto::Status>::Create(channel_.get(), rpcmethod_Status_, context, request);
}

void UtilityService_v1::Stub::experimental_async::Status(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::iroha::utility_service::proto::Status>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::iroha::utility_service::proto::Status>::Create(stub_->channel_.get(), stub_->rpcmethod_Status_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::iroha::utility_service::proto::Status>* UtilityService_v1::Stub::AsyncStatusRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::iroha::utility_service::proto::Status>::Create(channel_.get(), cq, rpcmethod_Status_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::iroha::utility_service::proto::Status>* UtilityService_v1::Stub::PrepareAsyncStatusRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::iroha::utility_service::proto::Status>::Create(channel_.get(), cq, rpcmethod_Status_, context, request, false, nullptr);
}

::grpc::Status UtilityService_v1::Stub::Shutdown(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Shutdown_, context, request, response);
}

void UtilityService_v1::Stub::experimental_async::Shutdown(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Shutdown_, context, request, response, std::move(f));
}

void UtilityService_v1::Stub::experimental_async::Shutdown(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Shutdown_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* UtilityService_v1::Stub::PrepareAsyncShutdownRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Shutdown_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* UtilityService_v1::Stub::AsyncShutdownRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncShutdownRaw(context, request, cq);
  result->StartCall();
  return result;
}

UtilityService_v1::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UtilityService_v1_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< UtilityService_v1::Service, ::google::protobuf::Empty, ::iroha::utility_service::proto::Status>(
          [](UtilityService_v1::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::iroha::utility_service::proto::Status>* writer) {
               return service->Status(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UtilityService_v1_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UtilityService_v1::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UtilityService_v1::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->Shutdown(ctx, req, resp);
             }, this)));
}

UtilityService_v1::Service::~Service() {
}

::grpc::Status UtilityService_v1::Service::Status(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::iroha::utility_service::proto::Status>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UtilityService_v1::Service::Shutdown(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace iroha
}  // namespace utility_service
}  // namespace proto

