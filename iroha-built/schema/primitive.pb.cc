// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: primitive.proto

#include "primitive.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace iroha {
namespace protocol {
constexpr Signature::Signature(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : public_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , signature_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SignatureDefaultTypeInternal {
  constexpr SignatureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SignatureDefaultTypeInternal() {}
  union {
    Signature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SignatureDefaultTypeInternal _Signature_default_instance_;
constexpr Peer::Peer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , peer_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , syncing_peer_(false)
  , _oneof_case_{}{}
struct PeerDefaultTypeInternal {
  constexpr PeerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PeerDefaultTypeInternal() {}
  union {
    Peer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PeerDefaultTypeInternal _Peer_default_instance_;
constexpr AccountDetailRecordId::AccountDetailRecordId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : writer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AccountDetailRecordIdDefaultTypeInternal {
  constexpr AccountDetailRecordIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccountDetailRecordIdDefaultTypeInternal() {}
  union {
    AccountDetailRecordId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccountDetailRecordIdDefaultTypeInternal _AccountDetailRecordId_default_instance_;
constexpr EngineLog::EngineLog(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : topics_()
  , address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct EngineLogDefaultTypeInternal {
  constexpr EngineLogDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EngineLogDefaultTypeInternal() {}
  union {
    EngineLog _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EngineLogDefaultTypeInternal _EngineLog_default_instance_;
constexpr CallResult::CallResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : callee_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CallResultDefaultTypeInternal {
  constexpr CallResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CallResultDefaultTypeInternal() {}
  union {
    CallResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CallResultDefaultTypeInternal _CallResult_default_instance_;
constexpr EngineReceipt::EngineReceipt(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : logs_()
  , caller_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , command_index_(0)
  , _oneof_case_{}{}
struct EngineReceiptDefaultTypeInternal {
  constexpr EngineReceiptDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EngineReceiptDefaultTypeInternal() {}
  union {
    EngineReceipt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EngineReceiptDefaultTypeInternal _EngineReceipt_default_instance_;
}  // namespace protocol
}  // namespace iroha
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_primitive_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_primitive_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_primitive_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_primitive_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Signature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Signature, public_key_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Signature, signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Peer, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Peer, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Peer, address_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Peer, peer_key_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Peer, syncing_peer_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Peer, certificate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::AccountDetailRecordId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::AccountDetailRecordId, writer_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::AccountDetailRecordId, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::EngineLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::EngineLog, address_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::EngineLog, data_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::EngineLog, topics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::CallResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::CallResult, callee_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::CallResult, result_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::EngineReceipt, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::EngineReceipt, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::EngineReceipt, command_index_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::EngineReceipt, caller_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::EngineReceipt, logs_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::EngineReceipt, result_or_contract_address_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::iroha::protocol::Signature)},
  { 7, -1, sizeof(::iroha::protocol::Peer)},
  { 17, -1, sizeof(::iroha::protocol::AccountDetailRecordId)},
  { 24, -1, sizeof(::iroha::protocol::EngineLog)},
  { 32, -1, sizeof(::iroha::protocol::CallResult)},
  { 39, -1, sizeof(::iroha::protocol::EngineReceipt)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_Signature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_Peer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_AccountDetailRecordId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_EngineLog_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_CallResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_EngineReceipt_default_instance_),
};

const char descriptor_table_protodef_primitive_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017primitive.proto\022\016iroha.protocol\"2\n\tSig"
  "nature\022\022\n\npublic_key\030\001 \001(\t\022\021\n\tsignature\030"
  "\002 \001(\t\"i\n\004Peer\022\017\n\007address\030\001 \001(\t\022\020\n\010peer_k"
  "ey\030\002 \001(\t\022\031\n\017tls_certificate\030\003 \001(\tH\000\022\024\n\014s"
  "yncing_peer\030\004 \001(\010B\r\n\013certificate\"4\n\025Acco"
  "untDetailRecordId\022\016\n\006writer\030\001 \001(\t\022\013\n\003key"
  "\030\002 \001(\t\":\n\tEngineLog\022\017\n\007address\030\001 \001(\t\022\014\n\004"
  "data\030\002 \001(\t\022\016\n\006topics\030\003 \003(\t\"1\n\nCallResult"
  "\022\016\n\006callee\030\001 \001(\t\022\023\n\013result_data\030\002 \001(\t\"\314\001"
  "\n\rEngineReceipt\022\025\n\rcommand_index\030\001 \001(\005\022\016"
  "\n\006caller\030\002 \001(\t\0221\n\013call_result\030\003 \001(\0132\032.ir"
  "oha.protocol.CallResultH\000\022\032\n\020contract_ad"
  "dress\030\004 \001(\tH\000\022\'\n\004logs\030\005 \003(\0132\031.iroha.prot"
  "ocol.EngineLogB\034\n\032result_or_contract_add"
  "ress*\377\n\n\016RolePermission\022\023\n\017can_append_ro"
  "le\020\000\022\023\n\017can_create_role\020\001\022\023\n\017can_detach_"
  "role\020\002\022\025\n\021can_add_asset_qty\020\003\022\032\n\026can_sub"
  "tract_asset_qty\020\004\022\020\n\014can_add_peer\020\005\022\023\n\017c"
  "an_remove_peer\020.\022\025\n\021can_add_signatory\020\006\022"
  "\030\n\024can_remove_signatory\020\007\022\022\n\016can_set_quo"
  "rum\020\010\022\026\n\022can_create_account\020\t\022\022\n\016can_set"
  "_detail\020\n\022\024\n\020can_create_asset\020\013\022\020\n\014can_t"
  "ransfer\020\014\022\017\n\013can_receive\020\r\022\025\n\021can_create"
  "_domain\020\016\022\034\n\030can_add_domain_asset_qty\020+\022"
  "!\n\035can_subtract_domain_asset_qty\020,\022\023\n\017ca"
  "n_call_engine\0200\022\023\n\017can_read_assets\020\017\022\021\n\r"
  "can_get_roles\020\020\022\026\n\022can_get_my_account\020\021\022"
  "\030\n\024can_get_all_accounts\020\022\022\033\n\027can_get_dom"
  "ain_accounts\020\023\022\032\n\026can_get_my_signatories"
  "\020\024\022\033\n\027can_get_all_signatories\020\025\022\036\n\032can_g"
  "et_domain_signatories\020\026\022\026\n\022can_get_my_ac"
  "c_ast\020\027\022\027\n\023can_get_all_acc_ast\020\030\022\032\n\026can_"
  "get_domain_acc_ast\020\031\022\031\n\025can_get_my_acc_d"
  "etail\020\032\022\032\n\026can_get_all_acc_detail\020\033\022\035\n\031c"
  "an_get_domain_acc_detail\020\034\022\026\n\022can_get_my"
  "_acc_txs\020\035\022\027\n\023can_get_all_acc_txs\020\036\022\032\n\026c"
  "an_get_domain_acc_txs\020\037\022\032\n\026can_get_my_ac"
  "c_ast_txs\020 \022\033\n\027can_get_all_acc_ast_txs\020!"
  "\022\036\n\032can_get_domain_acc_ast_txs\020\"\022\022\n\016can_"
  "get_my_txs\020#\022\023\n\017can_get_all_txs\020$\022\022\n\016can"
  "_get_blocks\020*\022\021\n\rcan_get_peers\020-\022\036\n\032can_"
  "get_my_engine_receipts\0202\022\"\n\036can_get_doma"
  "in_engine_receipts\0203\022\037\n\033can_get_all_engi"
  "ne_receipts\0204\022\037\n\033can_grant_can_set_my_qu"
  "orum\020%\022\"\n\036can_grant_can_add_my_signatory"
  "\020&\022%\n!can_grant_can_remove_my_signatory\020"
  "\'\022$\n can_grant_can_transfer_my_assets\020(\022"
  "\'\n#can_grant_can_set_my_account_detail\020)"
  "\022*\n&can_grant_can_call_engine_on_my_beha"
  "lf\0201\022\010\n\004root\020/*\300\001\n\023GrantablePermission\022\030"
  "\n\024can_add_my_signatory\020\000\022\033\n\027can_remove_m"
  "y_signatory\020\001\022\025\n\021can_set_my_quorum\020\002\022\035\n\031"
  "can_set_my_account_detail\020\003\022\032\n\026can_trans"
  "fer_my_assets\020\004\022 \n\034can_call_engine_on_my"
  "_behalf\020\005B\032Z\030iroha.generated/protocolb\006p"
  "roto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_primitive_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_primitive_2eproto = {
  false, false, 2205, descriptor_table_protodef_primitive_2eproto, "primitive.proto", 
  &descriptor_table_primitive_2eproto_once, nullptr, 0, 6,
  schemas, file_default_instances, TableStruct_primitive_2eproto::offsets,
  file_level_metadata_primitive_2eproto, file_level_enum_descriptors_primitive_2eproto, file_level_service_descriptors_primitive_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_primitive_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primitive_2eproto);
  return descriptor_table_primitive_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_primitive_2eproto(&descriptor_table_primitive_2eproto);
namespace iroha {
namespace protocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RolePermission_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primitive_2eproto);
  return file_level_enum_descriptors_primitive_2eproto[0];
}
bool RolePermission_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GrantablePermission_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_primitive_2eproto);
  return file_level_enum_descriptors_primitive_2eproto[1];
}
bool GrantablePermission_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Signature::_Internal {
 public:
};

Signature::Signature(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.Signature)
}
Signature::Signature(const Signature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_key().empty()) {
    public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_public_key(), 
      GetArena());
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature().empty()) {
    signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.Signature)
}

void Signature::SharedCtor() {
public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Signature::~Signature() {
  // @@protoc_insertion_point(destructor:iroha.protocol.Signature)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Signature::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Signature::ArenaDtor(void* object) {
  Signature* _this = reinterpret_cast< Signature* >(object);
  (void)_this;
}
void Signature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Signature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Signature::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.Signature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  public_key_.ClearToEmpty();
  signature_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Signature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string public_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.Signature.public_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.Signature.signature"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Signature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.Signature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string public_key = 1;
  if (this->public_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_key().data(), static_cast<int>(this->_internal_public_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.Signature.public_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_public_key(), target);
  }

  // string signature = 2;
  if (this->signature().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signature().data(), static_cast<int>(this->_internal_signature().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.Signature.signature");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.Signature)
  return target;
}

size_t Signature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.Signature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string public_key = 1;
  if (this->public_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_key());
  }

  // string signature = 2;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signature());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Signature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.Signature)
  GOOGLE_DCHECK_NE(&from, this);
  const Signature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Signature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.Signature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.Signature)
    MergeFrom(*source);
  }
}

void Signature::MergeFrom(const Signature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.Signature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.public_key().size() > 0) {
    _internal_set_public_key(from._internal_public_key());
  }
  if (from.signature().size() > 0) {
    _internal_set_signature(from._internal_signature());
  }
}

void Signature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.Signature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signature::CopyFrom(const Signature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.Signature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signature::IsInitialized() const {
  return true;
}

void Signature::InternalSwap(Signature* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  public_key_.Swap(&other->public_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Signature::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Peer::_Internal {
 public:
};

Peer::Peer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.Peer)
}
Peer::Peer(const Peer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArena());
  }
  peer_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_peer_key().empty()) {
    peer_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_peer_key(), 
      GetArena());
  }
  syncing_peer_ = from.syncing_peer_;
  clear_has_certificate();
  switch (from.certificate_case()) {
    case kTlsCertificate: {
      _internal_set_tls_certificate(from._internal_tls_certificate());
      break;
    }
    case CERTIFICATE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.Peer)
}

void Peer::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
peer_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
syncing_peer_ = false;
clear_has_certificate();
}

Peer::~Peer() {
  // @@protoc_insertion_point(destructor:iroha.protocol.Peer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Peer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  peer_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_certificate()) {
    clear_certificate();
  }
}

void Peer::ArenaDtor(void* object) {
  Peer* _this = reinterpret_cast< Peer* >(object);
  (void)_this;
}
void Peer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Peer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Peer::clear_certificate() {
// @@protoc_insertion_point(one_of_clear_start:iroha.protocol.Peer)
  switch (certificate_case()) {
    case kTlsCertificate: {
      certificate_.tls_certificate_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case CERTIFICATE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CERTIFICATE_NOT_SET;
}


void Peer::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.Peer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  peer_key_.ClearToEmpty();
  syncing_peer_ = false;
  clear_certificate();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Peer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.Peer.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string peer_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_peer_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.Peer.peer_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tls_certificate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_tls_certificate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.Peer.tls_certificate"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool syncing_peer = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          syncing_peer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Peer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.Peer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.Peer.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // string peer_key = 2;
  if (this->peer_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_peer_key().data(), static_cast<int>(this->_internal_peer_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.Peer.peer_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_peer_key(), target);
  }

  // string tls_certificate = 3;
  if (_internal_has_tls_certificate()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tls_certificate().data(), static_cast<int>(this->_internal_tls_certificate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.Peer.tls_certificate");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tls_certificate(), target);
  }

  // bool syncing_peer = 4;
  if (this->syncing_peer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_syncing_peer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.Peer)
  return target;
}

size_t Peer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.Peer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string peer_key = 2;
  if (this->peer_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_peer_key());
  }

  // bool syncing_peer = 4;
  if (this->syncing_peer() != 0) {
    total_size += 1 + 1;
  }

  switch (certificate_case()) {
    // string tls_certificate = 3;
    case kTlsCertificate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tls_certificate());
      break;
    }
    case CERTIFICATE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Peer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.Peer)
  GOOGLE_DCHECK_NE(&from, this);
  const Peer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Peer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.Peer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.Peer)
    MergeFrom(*source);
  }
}

void Peer::MergeFrom(const Peer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.Peer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.peer_key().size() > 0) {
    _internal_set_peer_key(from._internal_peer_key());
  }
  if (from.syncing_peer() != 0) {
    _internal_set_syncing_peer(from._internal_syncing_peer());
  }
  switch (from.certificate_case()) {
    case kTlsCertificate: {
      _internal_set_tls_certificate(from._internal_tls_certificate());
      break;
    }
    case CERTIFICATE_NOT_SET: {
      break;
    }
  }
}

void Peer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.Peer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Peer::CopyFrom(const Peer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.Peer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Peer::IsInitialized() const {
  return true;
}

void Peer::InternalSwap(Peer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  peer_key_.Swap(&other->peer_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(syncing_peer_, other->syncing_peer_);
  swap(certificate_, other->certificate_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Peer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AccountDetailRecordId::_Internal {
 public:
};

AccountDetailRecordId::AccountDetailRecordId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.AccountDetailRecordId)
}
AccountDetailRecordId::AccountDetailRecordId(const AccountDetailRecordId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  writer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_writer().empty()) {
    writer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_writer(), 
      GetArena());
  }
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.AccountDetailRecordId)
}

void AccountDetailRecordId::SharedCtor() {
writer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AccountDetailRecordId::~AccountDetailRecordId() {
  // @@protoc_insertion_point(destructor:iroha.protocol.AccountDetailRecordId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AccountDetailRecordId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  writer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AccountDetailRecordId::ArenaDtor(void* object) {
  AccountDetailRecordId* _this = reinterpret_cast< AccountDetailRecordId* >(object);
  (void)_this;
}
void AccountDetailRecordId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountDetailRecordId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AccountDetailRecordId::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.AccountDetailRecordId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  writer_.ClearToEmpty();
  key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountDetailRecordId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string writer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_writer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.AccountDetailRecordId.writer"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.AccountDetailRecordId.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountDetailRecordId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.AccountDetailRecordId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string writer = 1;
  if (this->writer().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_writer().data(), static_cast<int>(this->_internal_writer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.AccountDetailRecordId.writer");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_writer(), target);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.AccountDetailRecordId.key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.AccountDetailRecordId)
  return target;
}

size_t AccountDetailRecordId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.AccountDetailRecordId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string writer = 1;
  if (this->writer().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_writer());
  }

  // string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountDetailRecordId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.AccountDetailRecordId)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountDetailRecordId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountDetailRecordId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.AccountDetailRecordId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.AccountDetailRecordId)
    MergeFrom(*source);
  }
}

void AccountDetailRecordId::MergeFrom(const AccountDetailRecordId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.AccountDetailRecordId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.writer().size() > 0) {
    _internal_set_writer(from._internal_writer());
  }
  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
}

void AccountDetailRecordId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.AccountDetailRecordId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountDetailRecordId::CopyFrom(const AccountDetailRecordId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.AccountDetailRecordId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountDetailRecordId::IsInitialized() const {
  return true;
}

void AccountDetailRecordId::InternalSwap(AccountDetailRecordId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  writer_.Swap(&other->writer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountDetailRecordId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EngineLog::_Internal {
 public:
};

EngineLog::EngineLog(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  topics_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.EngineLog)
}
EngineLog::EngineLog(const EngineLog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      topics_(from.topics_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.EngineLog)
}

void EngineLog::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

EngineLog::~EngineLog() {
  // @@protoc_insertion_point(destructor:iroha.protocol.EngineLog)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EngineLog::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EngineLog::ArenaDtor(void* object) {
  EngineLog* _this = reinterpret_cast< EngineLog* >(object);
  (void)_this;
}
void EngineLog::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EngineLog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EngineLog::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.EngineLog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topics_.Clear();
  address_.ClearToEmpty();
  data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EngineLog::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.EngineLog.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.EngineLog.data"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string topics = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_topics();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.EngineLog.topics"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EngineLog::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.EngineLog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.EngineLog.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // string data = 2;
  if (this->data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.EngineLog.data");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_data(), target);
  }

  // repeated string topics = 3;
  for (int i = 0, n = this->_internal_topics_size(); i < n; i++) {
    const auto& s = this->_internal_topics(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.EngineLog.topics");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.EngineLog)
  return target;
}

size_t EngineLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.EngineLog)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string topics = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(topics_.size());
  for (int i = 0, n = topics_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      topics_.Get(i));
  }

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EngineLog::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.EngineLog)
  GOOGLE_DCHECK_NE(&from, this);
  const EngineLog* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EngineLog>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.EngineLog)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.EngineLog)
    MergeFrom(*source);
  }
}

void EngineLog::MergeFrom(const EngineLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.EngineLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  topics_.MergeFrom(from.topics_);
  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
}

void EngineLog::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.EngineLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EngineLog::CopyFrom(const EngineLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.EngineLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EngineLog::IsInitialized() const {
  return true;
}

void EngineLog::InternalSwap(EngineLog* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  topics_.InternalSwap(&other->topics_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata EngineLog::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CallResult::_Internal {
 public:
};

CallResult::CallResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.CallResult)
}
CallResult::CallResult(const CallResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  callee_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_callee().empty()) {
    callee_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_callee(), 
      GetArena());
  }
  result_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_result_data().empty()) {
    result_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_result_data(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.CallResult)
}

void CallResult::SharedCtor() {
callee_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
result_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CallResult::~CallResult() {
  // @@protoc_insertion_point(destructor:iroha.protocol.CallResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CallResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  callee_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CallResult::ArenaDtor(void* object) {
  CallResult* _this = reinterpret_cast< CallResult* >(object);
  (void)_this;
}
void CallResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CallResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CallResult::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.CallResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  callee_.ClearToEmpty();
  result_data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CallResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string callee = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_callee();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.CallResult.callee"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string result_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_result_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.CallResult.result_data"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CallResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.CallResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string callee = 1;
  if (this->callee().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_callee().data(), static_cast<int>(this->_internal_callee().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.CallResult.callee");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_callee(), target);
  }

  // string result_data = 2;
  if (this->result_data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result_data().data(), static_cast<int>(this->_internal_result_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.CallResult.result_data");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_result_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.CallResult)
  return target;
}

size_t CallResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.CallResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string callee = 1;
  if (this->callee().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_callee());
  }

  // string result_data = 2;
  if (this->result_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.CallResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CallResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CallResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.CallResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.CallResult)
    MergeFrom(*source);
  }
}

void CallResult::MergeFrom(const CallResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.CallResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.callee().size() > 0) {
    _internal_set_callee(from._internal_callee());
  }
  if (from.result_data().size() > 0) {
    _internal_set_result_data(from._internal_result_data());
  }
}

void CallResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.CallResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CallResult::CopyFrom(const CallResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.CallResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallResult::IsInitialized() const {
  return true;
}

void CallResult::InternalSwap(CallResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  callee_.Swap(&other->callee_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  result_data_.Swap(&other->result_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CallResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EngineReceipt::_Internal {
 public:
  static const ::iroha::protocol::CallResult& call_result(const EngineReceipt* msg);
};

const ::iroha::protocol::CallResult&
EngineReceipt::_Internal::call_result(const EngineReceipt* msg) {
  return *msg->result_or_contract_address_.call_result_;
}
void EngineReceipt::set_allocated_call_result(::iroha::protocol::CallResult* call_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_result_or_contract_address();
  if (call_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(call_result);
    if (message_arena != submessage_arena) {
      call_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call_result, submessage_arena);
    }
    set_has_call_result();
    result_or_contract_address_.call_result_ = call_result;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.EngineReceipt.call_result)
}
EngineReceipt::EngineReceipt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  logs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.EngineReceipt)
}
EngineReceipt::EngineReceipt(const EngineReceipt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      logs_(from.logs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  caller_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_caller().empty()) {
    caller_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_caller(), 
      GetArena());
  }
  command_index_ = from.command_index_;
  clear_has_result_or_contract_address();
  switch (from.result_or_contract_address_case()) {
    case kCallResult: {
      _internal_mutable_call_result()->::iroha::protocol::CallResult::MergeFrom(from._internal_call_result());
      break;
    }
    case kContractAddress: {
      _internal_set_contract_address(from._internal_contract_address());
      break;
    }
    case RESULT_OR_CONTRACT_ADDRESS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.EngineReceipt)
}

void EngineReceipt::SharedCtor() {
caller_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
command_index_ = 0;
clear_has_result_or_contract_address();
}

EngineReceipt::~EngineReceipt() {
  // @@protoc_insertion_point(destructor:iroha.protocol.EngineReceipt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EngineReceipt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  caller_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_result_or_contract_address()) {
    clear_result_or_contract_address();
  }
}

void EngineReceipt::ArenaDtor(void* object) {
  EngineReceipt* _this = reinterpret_cast< EngineReceipt* >(object);
  (void)_this;
}
void EngineReceipt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EngineReceipt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EngineReceipt::clear_result_or_contract_address() {
// @@protoc_insertion_point(one_of_clear_start:iroha.protocol.EngineReceipt)
  switch (result_or_contract_address_case()) {
    case kCallResult: {
      if (GetArena() == nullptr) {
        delete result_or_contract_address_.call_result_;
      }
      break;
    }
    case kContractAddress: {
      result_or_contract_address_.contract_address_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case RESULT_OR_CONTRACT_ADDRESS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESULT_OR_CONTRACT_ADDRESS_NOT_SET;
}


void EngineReceipt::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.EngineReceipt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  logs_.Clear();
  caller_.ClearToEmpty();
  command_index_ = 0;
  clear_result_or_contract_address();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EngineReceipt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 command_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          command_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string caller = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_caller();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.EngineReceipt.caller"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.CallResult call_result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_call_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string contract_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_contract_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.EngineReceipt.contract_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .iroha.protocol.EngineLog logs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EngineReceipt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.EngineReceipt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 command_index = 1;
  if (this->command_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_command_index(), target);
  }

  // string caller = 2;
  if (this->caller().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_caller().data(), static_cast<int>(this->_internal_caller().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.EngineReceipt.caller");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_caller(), target);
  }

  // .iroha.protocol.CallResult call_result = 3;
  if (_internal_has_call_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::call_result(this), target, stream);
  }

  // string contract_address = 4;
  if (_internal_has_contract_address()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contract_address().data(), static_cast<int>(this->_internal_contract_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.EngineReceipt.contract_address");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_contract_address(), target);
  }

  // repeated .iroha.protocol.EngineLog logs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_logs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_logs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.EngineReceipt)
  return target;
}

size_t EngineReceipt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.EngineReceipt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iroha.protocol.EngineLog logs = 5;
  total_size += 1UL * this->_internal_logs_size();
  for (const auto& msg : this->logs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string caller = 2;
  if (this->caller().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_caller());
  }

  // int32 command_index = 1;
  if (this->command_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_command_index());
  }

  switch (result_or_contract_address_case()) {
    // .iroha.protocol.CallResult call_result = 3;
    case kCallResult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *result_or_contract_address_.call_result_);
      break;
    }
    // string contract_address = 4;
    case kContractAddress: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_contract_address());
      break;
    }
    case RESULT_OR_CONTRACT_ADDRESS_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EngineReceipt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.EngineReceipt)
  GOOGLE_DCHECK_NE(&from, this);
  const EngineReceipt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EngineReceipt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.EngineReceipt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.EngineReceipt)
    MergeFrom(*source);
  }
}

void EngineReceipt::MergeFrom(const EngineReceipt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.EngineReceipt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  logs_.MergeFrom(from.logs_);
  if (from.caller().size() > 0) {
    _internal_set_caller(from._internal_caller());
  }
  if (from.command_index() != 0) {
    _internal_set_command_index(from._internal_command_index());
  }
  switch (from.result_or_contract_address_case()) {
    case kCallResult: {
      _internal_mutable_call_result()->::iroha::protocol::CallResult::MergeFrom(from._internal_call_result());
      break;
    }
    case kContractAddress: {
      _internal_set_contract_address(from._internal_contract_address());
      break;
    }
    case RESULT_OR_CONTRACT_ADDRESS_NOT_SET: {
      break;
    }
  }
}

void EngineReceipt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.EngineReceipt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EngineReceipt::CopyFrom(const EngineReceipt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.EngineReceipt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EngineReceipt::IsInitialized() const {
  return true;
}

void EngineReceipt::InternalSwap(EngineReceipt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  logs_.InternalSwap(&other->logs_);
  caller_.Swap(&other->caller_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(command_index_, other->command_index_);
  swap(result_or_contract_address_, other->result_or_contract_address_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata EngineReceipt::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
}  // namespace iroha
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::iroha::protocol::Signature* Arena::CreateMaybeMessage< ::iroha::protocol::Signature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::Signature >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::Peer* Arena::CreateMaybeMessage< ::iroha::protocol::Peer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::Peer >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::AccountDetailRecordId* Arena::CreateMaybeMessage< ::iroha::protocol::AccountDetailRecordId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::AccountDetailRecordId >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::EngineLog* Arena::CreateMaybeMessage< ::iroha::protocol::EngineLog >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::EngineLog >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::CallResult* Arena::CreateMaybeMessage< ::iroha::protocol::CallResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::CallResult >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::EngineReceipt* Arena::CreateMaybeMessage< ::iroha::protocol::EngineReceipt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::EngineReceipt >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
