// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: endpoint.proto
// Original file comments:
// *
// Copyright Soramitsu Co., Ltd. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
//
#ifndef GRPC_endpoint_2eproto__INCLUDED
#define GRPC_endpoint_2eproto__INCLUDED

#include "endpoint.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace iroha {
namespace protocol {

class CommandService_v1 final {
 public:
  static constexpr char const* service_full_name() {
    return "iroha.protocol.CommandService_v1";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Torii(::grpc::ClientContext* context, const ::iroha::protocol::Transaction& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncTorii(::grpc::ClientContext* context, const ::iroha::protocol::Transaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncToriiRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncTorii(::grpc::ClientContext* context, const ::iroha::protocol::Transaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncToriiRaw(context, request, cq));
    }
    virtual ::grpc::Status ListTorii(::grpc::ClientContext* context, const ::iroha::protocol::TxList& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncListTorii(::grpc::ClientContext* context, const ::iroha::protocol::TxList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncListToriiRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncListTorii(::grpc::ClientContext* context, const ::iroha::protocol::TxList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncListToriiRaw(context, request, cq));
    }
    virtual ::grpc::Status Status(::grpc::ClientContext* context, const ::iroha::protocol::TxStatusRequest& request, ::iroha::protocol::ToriiResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::iroha::protocol::ToriiResponse>> AsyncStatus(::grpc::ClientContext* context, const ::iroha::protocol::TxStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::iroha::protocol::ToriiResponse>>(AsyncStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::iroha::protocol::ToriiResponse>> PrepareAsyncStatus(::grpc::ClientContext* context, const ::iroha::protocol::TxStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::iroha::protocol::ToriiResponse>>(PrepareAsyncStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::iroha::protocol::ToriiResponse>> StatusStream(::grpc::ClientContext* context, const ::iroha::protocol::TxStatusRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::iroha::protocol::ToriiResponse>>(StatusStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::iroha::protocol::ToriiResponse>> AsyncStatusStream(::grpc::ClientContext* context, const ::iroha::protocol::TxStatusRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::iroha::protocol::ToriiResponse>>(AsyncStatusStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::iroha::protocol::ToriiResponse>> PrepareAsyncStatusStream(::grpc::ClientContext* context, const ::iroha::protocol::TxStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::iroha::protocol::ToriiResponse>>(PrepareAsyncStatusStreamRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Torii(::grpc::ClientContext* context, const ::iroha::protocol::Transaction* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Torii(::grpc::ClientContext* context, const ::iroha::protocol::Transaction* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Torii(::grpc::ClientContext* context, const ::iroha::protocol::Transaction* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ListTorii(::grpc::ClientContext* context, const ::iroha::protocol::TxList* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListTorii(::grpc::ClientContext* context, const ::iroha::protocol::TxList* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListTorii(::grpc::ClientContext* context, const ::iroha::protocol::TxList* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Status(::grpc::ClientContext* context, const ::iroha::protocol::TxStatusRequest* request, ::iroha::protocol::ToriiResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Status(::grpc::ClientContext* context, const ::iroha::protocol::TxStatusRequest* request, ::iroha::protocol::ToriiResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Status(::grpc::ClientContext* context, const ::iroha::protocol::TxStatusRequest* request, ::iroha::protocol::ToriiResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StatusStream(::grpc::ClientContext* context, const ::iroha::protocol::TxStatusRequest* request, ::grpc::ClientReadReactor< ::iroha::protocol::ToriiResponse>* reactor) = 0;
      #else
      virtual void StatusStream(::grpc::ClientContext* context, const ::iroha::protocol::TxStatusRequest* request, ::grpc::experimental::ClientReadReactor< ::iroha::protocol::ToriiResponse>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncToriiRaw(::grpc::ClientContext* context, const ::iroha::protocol::Transaction& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncToriiRaw(::grpc::ClientContext* context, const ::iroha::protocol::Transaction& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncListToriiRaw(::grpc::ClientContext* context, const ::iroha::protocol::TxList& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncListToriiRaw(::grpc::ClientContext* context, const ::iroha::protocol::TxList& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::iroha::protocol::ToriiResponse>* AsyncStatusRaw(::grpc::ClientContext* context, const ::iroha::protocol::TxStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::iroha::protocol::ToriiResponse>* PrepareAsyncStatusRaw(::grpc::ClientContext* context, const ::iroha::protocol::TxStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::iroha::protocol::ToriiResponse>* StatusStreamRaw(::grpc::ClientContext* context, const ::iroha::protocol::TxStatusRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::iroha::protocol::ToriiResponse>* AsyncStatusStreamRaw(::grpc::ClientContext* context, const ::iroha::protocol::TxStatusRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::iroha::protocol::ToriiResponse>* PrepareAsyncStatusStreamRaw(::grpc::ClientContext* context, const ::iroha::protocol::TxStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Torii(::grpc::ClientContext* context, const ::iroha::protocol::Transaction& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncTorii(::grpc::ClientContext* context, const ::iroha::protocol::Transaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncToriiRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncTorii(::grpc::ClientContext* context, const ::iroha::protocol::Transaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncToriiRaw(context, request, cq));
    }
    ::grpc::Status ListTorii(::grpc::ClientContext* context, const ::iroha::protocol::TxList& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncListTorii(::grpc::ClientContext* context, const ::iroha::protocol::TxList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncListToriiRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncListTorii(::grpc::ClientContext* context, const ::iroha::protocol::TxList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncListToriiRaw(context, request, cq));
    }
    ::grpc::Status Status(::grpc::ClientContext* context, const ::iroha::protocol::TxStatusRequest& request, ::iroha::protocol::ToriiResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::iroha::protocol::ToriiResponse>> AsyncStatus(::grpc::ClientContext* context, const ::iroha::protocol::TxStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::iroha::protocol::ToriiResponse>>(AsyncStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::iroha::protocol::ToriiResponse>> PrepareAsyncStatus(::grpc::ClientContext* context, const ::iroha::protocol::TxStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::iroha::protocol::ToriiResponse>>(PrepareAsyncStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::iroha::protocol::ToriiResponse>> StatusStream(::grpc::ClientContext* context, const ::iroha::protocol::TxStatusRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::iroha::protocol::ToriiResponse>>(StatusStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::iroha::protocol::ToriiResponse>> AsyncStatusStream(::grpc::ClientContext* context, const ::iroha::protocol::TxStatusRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::iroha::protocol::ToriiResponse>>(AsyncStatusStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::iroha::protocol::ToriiResponse>> PrepareAsyncStatusStream(::grpc::ClientContext* context, const ::iroha::protocol::TxStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::iroha::protocol::ToriiResponse>>(PrepareAsyncStatusStreamRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Torii(::grpc::ClientContext* context, const ::iroha::protocol::Transaction* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Torii(::grpc::ClientContext* context, const ::iroha::protocol::Transaction* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Torii(::grpc::ClientContext* context, const ::iroha::protocol::Transaction* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ListTorii(::grpc::ClientContext* context, const ::iroha::protocol::TxList* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListTorii(::grpc::ClientContext* context, const ::iroha::protocol::TxList* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListTorii(::grpc::ClientContext* context, const ::iroha::protocol::TxList* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Status(::grpc::ClientContext* context, const ::iroha::protocol::TxStatusRequest* request, ::iroha::protocol::ToriiResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Status(::grpc::ClientContext* context, const ::iroha::protocol::TxStatusRequest* request, ::iroha::protocol::ToriiResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Status(::grpc::ClientContext* context, const ::iroha::protocol::TxStatusRequest* request, ::iroha::protocol::ToriiResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StatusStream(::grpc::ClientContext* context, const ::iroha::protocol::TxStatusRequest* request, ::grpc::ClientReadReactor< ::iroha::protocol::ToriiResponse>* reactor) override;
      #else
      void StatusStream(::grpc::ClientContext* context, const ::iroha::protocol::TxStatusRequest* request, ::grpc::experimental::ClientReadReactor< ::iroha::protocol::ToriiResponse>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncToriiRaw(::grpc::ClientContext* context, const ::iroha::protocol::Transaction& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncToriiRaw(::grpc::ClientContext* context, const ::iroha::protocol::Transaction& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncListToriiRaw(::grpc::ClientContext* context, const ::iroha::protocol::TxList& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncListToriiRaw(::grpc::ClientContext* context, const ::iroha::protocol::TxList& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::iroha::protocol::ToriiResponse>* AsyncStatusRaw(::grpc::ClientContext* context, const ::iroha::protocol::TxStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::iroha::protocol::ToriiResponse>* PrepareAsyncStatusRaw(::grpc::ClientContext* context, const ::iroha::protocol::TxStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::iroha::protocol::ToriiResponse>* StatusStreamRaw(::grpc::ClientContext* context, const ::iroha::protocol::TxStatusRequest& request) override;
    ::grpc::ClientAsyncReader< ::iroha::protocol::ToriiResponse>* AsyncStatusStreamRaw(::grpc::ClientContext* context, const ::iroha::protocol::TxStatusRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::iroha::protocol::ToriiResponse>* PrepareAsyncStatusStreamRaw(::grpc::ClientContext* context, const ::iroha::protocol::TxStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Torii_;
    const ::grpc::internal::RpcMethod rpcmethod_ListTorii_;
    const ::grpc::internal::RpcMethod rpcmethod_Status_;
    const ::grpc::internal::RpcMethod rpcmethod_StatusStream_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Torii(::grpc::ServerContext* context, const ::iroha::protocol::Transaction* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status ListTorii(::grpc::ServerContext* context, const ::iroha::protocol::TxList* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status Status(::grpc::ServerContext* context, const ::iroha::protocol::TxStatusRequest* request, ::iroha::protocol::ToriiResponse* response);
    virtual ::grpc::Status StatusStream(::grpc::ServerContext* context, const ::iroha::protocol::TxStatusRequest* request, ::grpc::ServerWriter< ::iroha::protocol::ToriiResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_Torii : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Torii() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Torii() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Torii(::grpc::ServerContext* /*context*/, const ::iroha::protocol::Transaction* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTorii(::grpc::ServerContext* context, ::iroha::protocol::Transaction* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListTorii : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListTorii() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListTorii() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTorii(::grpc::ServerContext* /*context*/, const ::iroha::protocol::TxList* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListTorii(::grpc::ServerContext* context, ::iroha::protocol::TxList* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Status() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::iroha::protocol::TxStatusRequest* /*request*/, ::iroha::protocol::ToriiResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStatus(::grpc::ServerContext* context, ::iroha::protocol::TxStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::iroha::protocol::ToriiResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StatusStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StatusStream() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_StatusStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StatusStream(::grpc::ServerContext* /*context*/, const ::iroha::protocol::TxStatusRequest* /*request*/, ::grpc::ServerWriter< ::iroha::protocol::ToriiResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStatusStream(::grpc::ServerContext* context, ::iroha::protocol::TxStatusRequest* request, ::grpc::ServerAsyncWriter< ::iroha::protocol::ToriiResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Torii<WithAsyncMethod_ListTorii<WithAsyncMethod_Status<WithAsyncMethod_StatusStream<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Torii : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Torii() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::iroha::protocol::Transaction, ::google::protobuf::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::iroha::protocol::Transaction* request, ::google::protobuf::Empty* response) { return this->Torii(context, request, response); }));}
    void SetMessageAllocatorFor_Torii(
        ::grpc::experimental::MessageAllocator< ::iroha::protocol::Transaction, ::google::protobuf::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::iroha::protocol::Transaction, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Torii() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Torii(::grpc::ServerContext* /*context*/, const ::iroha::protocol::Transaction* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Torii(
      ::grpc::CallbackServerContext* /*context*/, const ::iroha::protocol::Transaction* /*request*/, ::google::protobuf::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Torii(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::iroha::protocol::Transaction* /*request*/, ::google::protobuf::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListTorii : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListTorii() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::iroha::protocol::TxList, ::google::protobuf::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::iroha::protocol::TxList* request, ::google::protobuf::Empty* response) { return this->ListTorii(context, request, response); }));}
    void SetMessageAllocatorFor_ListTorii(
        ::grpc::experimental::MessageAllocator< ::iroha::protocol::TxList, ::google::protobuf::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::iroha::protocol::TxList, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListTorii() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTorii(::grpc::ServerContext* /*context*/, const ::iroha::protocol::TxList* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListTorii(
      ::grpc::CallbackServerContext* /*context*/, const ::iroha::protocol::TxList* /*request*/, ::google::protobuf::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListTorii(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::iroha::protocol::TxList* /*request*/, ::google::protobuf::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Status() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::iroha::protocol::TxStatusRequest, ::iroha::protocol::ToriiResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::iroha::protocol::TxStatusRequest* request, ::iroha::protocol::ToriiResponse* response) { return this->Status(context, request, response); }));}
    void SetMessageAllocatorFor_Status(
        ::grpc::experimental::MessageAllocator< ::iroha::protocol::TxStatusRequest, ::iroha::protocol::ToriiResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::iroha::protocol::TxStatusRequest, ::iroha::protocol::ToriiResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::iroha::protocol::TxStatusRequest* /*request*/, ::iroha::protocol::ToriiResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Status(
      ::grpc::CallbackServerContext* /*context*/, const ::iroha::protocol::TxStatusRequest* /*request*/, ::iroha::protocol::ToriiResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Status(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::iroha::protocol::TxStatusRequest* /*request*/, ::iroha::protocol::ToriiResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StatusStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_StatusStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::iroha::protocol::TxStatusRequest, ::iroha::protocol::ToriiResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::iroha::protocol::TxStatusRequest* request) { return this->StatusStream(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_StatusStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StatusStream(::grpc::ServerContext* /*context*/, const ::iroha::protocol::TxStatusRequest* /*request*/, ::grpc::ServerWriter< ::iroha::protocol::ToriiResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::iroha::protocol::ToriiResponse>* StatusStream(
      ::grpc::CallbackServerContext* /*context*/, const ::iroha::protocol::TxStatusRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::iroha::protocol::ToriiResponse>* StatusStream(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::iroha::protocol::TxStatusRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Torii<ExperimentalWithCallbackMethod_ListTorii<ExperimentalWithCallbackMethod_Status<ExperimentalWithCallbackMethod_StatusStream<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Torii<ExperimentalWithCallbackMethod_ListTorii<ExperimentalWithCallbackMethod_Status<ExperimentalWithCallbackMethod_StatusStream<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Torii : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Torii() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Torii() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Torii(::grpc::ServerContext* /*context*/, const ::iroha::protocol::Transaction* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListTorii : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListTorii() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListTorii() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTorii(::grpc::ServerContext* /*context*/, const ::iroha::protocol::TxList* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Status() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::iroha::protocol::TxStatusRequest* /*request*/, ::iroha::protocol::ToriiResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StatusStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StatusStream() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_StatusStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StatusStream(::grpc::ServerContext* /*context*/, const ::iroha::protocol::TxStatusRequest* /*request*/, ::grpc::ServerWriter< ::iroha::protocol::ToriiResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Torii : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Torii() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Torii() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Torii(::grpc::ServerContext* /*context*/, const ::iroha::protocol::Transaction* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTorii(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListTorii : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListTorii() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ListTorii() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTorii(::grpc::ServerContext* /*context*/, const ::iroha::protocol::TxList* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListTorii(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Status() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::iroha::protocol::TxStatusRequest* /*request*/, ::iroha::protocol::ToriiResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StatusStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StatusStream() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_StatusStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StatusStream(::grpc::ServerContext* /*context*/, const ::iroha::protocol::TxStatusRequest* /*request*/, ::grpc::ServerWriter< ::iroha::protocol::ToriiResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStatusStream(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Torii : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Torii() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Torii(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Torii() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Torii(::grpc::ServerContext* /*context*/, const ::iroha::protocol::Transaction* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Torii(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Torii(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListTorii : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListTorii() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListTorii(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListTorii() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTorii(::grpc::ServerContext* /*context*/, const ::iroha::protocol::TxList* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListTorii(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListTorii(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Status() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Status(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::iroha::protocol::TxStatusRequest* /*request*/, ::iroha::protocol::ToriiResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Status(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Status(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StatusStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_StatusStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->StatusStream(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_StatusStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StatusStream(::grpc::ServerContext* /*context*/, const ::iroha::protocol::TxStatusRequest* /*request*/, ::grpc::ServerWriter< ::iroha::protocol::ToriiResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* StatusStream(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* StatusStream(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Torii : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Torii() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::iroha::protocol::Transaction, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::iroha::protocol::Transaction, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedTorii(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Torii() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Torii(::grpc::ServerContext* /*context*/, const ::iroha::protocol::Transaction* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTorii(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::iroha::protocol::Transaction,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListTorii : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListTorii() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::iroha::protocol::TxList, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::iroha::protocol::TxList, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedListTorii(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListTorii() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListTorii(::grpc::ServerContext* /*context*/, const ::iroha::protocol::TxList* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListTorii(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::iroha::protocol::TxList,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Status() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::iroha::protocol::TxStatusRequest, ::iroha::protocol::ToriiResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::iroha::protocol::TxStatusRequest, ::iroha::protocol::ToriiResponse>* streamer) {
                       return this->StreamedStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::iroha::protocol::TxStatusRequest* /*request*/, ::iroha::protocol::ToriiResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::iroha::protocol::TxStatusRequest,::iroha::protocol::ToriiResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Torii<WithStreamedUnaryMethod_ListTorii<WithStreamedUnaryMethod_Status<Service > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_StatusStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_StatusStream() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::iroha::protocol::TxStatusRequest, ::iroha::protocol::ToriiResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::iroha::protocol::TxStatusRequest, ::iroha::protocol::ToriiResponse>* streamer) {
                       return this->StreamedStatusStream(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_StatusStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StatusStream(::grpc::ServerContext* /*context*/, const ::iroha::protocol::TxStatusRequest* /*request*/, ::grpc::ServerWriter< ::iroha::protocol::ToriiResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStatusStream(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::iroha::protocol::TxStatusRequest,::iroha::protocol::ToriiResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_StatusStream<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Torii<WithStreamedUnaryMethod_ListTorii<WithStreamedUnaryMethod_Status<WithSplitStreamingMethod_StatusStream<Service > > > > StreamedService;
};

class QueryService_v1 final {
 public:
  static constexpr char const* service_full_name() {
    return "iroha.protocol.QueryService_v1";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Find(::grpc::ClientContext* context, const ::iroha::protocol::Query& request, ::iroha::protocol::QueryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::iroha::protocol::QueryResponse>> AsyncFind(::grpc::ClientContext* context, const ::iroha::protocol::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::iroha::protocol::QueryResponse>>(AsyncFindRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::iroha::protocol::QueryResponse>> PrepareAsyncFind(::grpc::ClientContext* context, const ::iroha::protocol::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::iroha::protocol::QueryResponse>>(PrepareAsyncFindRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::iroha::protocol::BlockQueryResponse>> FetchCommits(::grpc::ClientContext* context, const ::iroha::protocol::BlocksQuery& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::iroha::protocol::BlockQueryResponse>>(FetchCommitsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::iroha::protocol::BlockQueryResponse>> AsyncFetchCommits(::grpc::ClientContext* context, const ::iroha::protocol::BlocksQuery& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::iroha::protocol::BlockQueryResponse>>(AsyncFetchCommitsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::iroha::protocol::BlockQueryResponse>> PrepareAsyncFetchCommits(::grpc::ClientContext* context, const ::iroha::protocol::BlocksQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::iroha::protocol::BlockQueryResponse>>(PrepareAsyncFetchCommitsRaw(context, request, cq));
    }
    virtual ::grpc::Status Healthcheck(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::iroha::protocol::HealthcheckData* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::iroha::protocol::HealthcheckData>> AsyncHealthcheck(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::iroha::protocol::HealthcheckData>>(AsyncHealthcheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::iroha::protocol::HealthcheckData>> PrepareAsyncHealthcheck(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::iroha::protocol::HealthcheckData>>(PrepareAsyncHealthcheckRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Find(::grpc::ClientContext* context, const ::iroha::protocol::Query* request, ::iroha::protocol::QueryResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Find(::grpc::ClientContext* context, const ::iroha::protocol::Query* request, ::iroha::protocol::QueryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Find(::grpc::ClientContext* context, const ::iroha::protocol::Query* request, ::iroha::protocol::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void FetchCommits(::grpc::ClientContext* context, const ::iroha::protocol::BlocksQuery* request, ::grpc::ClientReadReactor< ::iroha::protocol::BlockQueryResponse>* reactor) = 0;
      #else
      virtual void FetchCommits(::grpc::ClientContext* context, const ::iroha::protocol::BlocksQuery* request, ::grpc::experimental::ClientReadReactor< ::iroha::protocol::BlockQueryResponse>* reactor) = 0;
      #endif
      virtual void Healthcheck(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::iroha::protocol::HealthcheckData* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Healthcheck(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::iroha::protocol::HealthcheckData* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Healthcheck(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::iroha::protocol::HealthcheckData* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::iroha::protocol::QueryResponse>* AsyncFindRaw(::grpc::ClientContext* context, const ::iroha::protocol::Query& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::iroha::protocol::QueryResponse>* PrepareAsyncFindRaw(::grpc::ClientContext* context, const ::iroha::protocol::Query& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::iroha::protocol::BlockQueryResponse>* FetchCommitsRaw(::grpc::ClientContext* context, const ::iroha::protocol::BlocksQuery& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::iroha::protocol::BlockQueryResponse>* AsyncFetchCommitsRaw(::grpc::ClientContext* context, const ::iroha::protocol::BlocksQuery& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::iroha::protocol::BlockQueryResponse>* PrepareAsyncFetchCommitsRaw(::grpc::ClientContext* context, const ::iroha::protocol::BlocksQuery& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::iroha::protocol::HealthcheckData>* AsyncHealthcheckRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::iroha::protocol::HealthcheckData>* PrepareAsyncHealthcheckRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Find(::grpc::ClientContext* context, const ::iroha::protocol::Query& request, ::iroha::protocol::QueryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::iroha::protocol::QueryResponse>> AsyncFind(::grpc::ClientContext* context, const ::iroha::protocol::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::iroha::protocol::QueryResponse>>(AsyncFindRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::iroha::protocol::QueryResponse>> PrepareAsyncFind(::grpc::ClientContext* context, const ::iroha::protocol::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::iroha::protocol::QueryResponse>>(PrepareAsyncFindRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::iroha::protocol::BlockQueryResponse>> FetchCommits(::grpc::ClientContext* context, const ::iroha::protocol::BlocksQuery& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::iroha::protocol::BlockQueryResponse>>(FetchCommitsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::iroha::protocol::BlockQueryResponse>> AsyncFetchCommits(::grpc::ClientContext* context, const ::iroha::protocol::BlocksQuery& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::iroha::protocol::BlockQueryResponse>>(AsyncFetchCommitsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::iroha::protocol::BlockQueryResponse>> PrepareAsyncFetchCommits(::grpc::ClientContext* context, const ::iroha::protocol::BlocksQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::iroha::protocol::BlockQueryResponse>>(PrepareAsyncFetchCommitsRaw(context, request, cq));
    }
    ::grpc::Status Healthcheck(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::iroha::protocol::HealthcheckData* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::iroha::protocol::HealthcheckData>> AsyncHealthcheck(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::iroha::protocol::HealthcheckData>>(AsyncHealthcheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::iroha::protocol::HealthcheckData>> PrepareAsyncHealthcheck(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::iroha::protocol::HealthcheckData>>(PrepareAsyncHealthcheckRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Find(::grpc::ClientContext* context, const ::iroha::protocol::Query* request, ::iroha::protocol::QueryResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Find(::grpc::ClientContext* context, const ::iroha::protocol::Query* request, ::iroha::protocol::QueryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Find(::grpc::ClientContext* context, const ::iroha::protocol::Query* request, ::iroha::protocol::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void FetchCommits(::grpc::ClientContext* context, const ::iroha::protocol::BlocksQuery* request, ::grpc::ClientReadReactor< ::iroha::protocol::BlockQueryResponse>* reactor) override;
      #else
      void FetchCommits(::grpc::ClientContext* context, const ::iroha::protocol::BlocksQuery* request, ::grpc::experimental::ClientReadReactor< ::iroha::protocol::BlockQueryResponse>* reactor) override;
      #endif
      void Healthcheck(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::iroha::protocol::HealthcheckData* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Healthcheck(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::iroha::protocol::HealthcheckData* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Healthcheck(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::iroha::protocol::HealthcheckData* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::iroha::protocol::QueryResponse>* AsyncFindRaw(::grpc::ClientContext* context, const ::iroha::protocol::Query& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::iroha::protocol::QueryResponse>* PrepareAsyncFindRaw(::grpc::ClientContext* context, const ::iroha::protocol::Query& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::iroha::protocol::BlockQueryResponse>* FetchCommitsRaw(::grpc::ClientContext* context, const ::iroha::protocol::BlocksQuery& request) override;
    ::grpc::ClientAsyncReader< ::iroha::protocol::BlockQueryResponse>* AsyncFetchCommitsRaw(::grpc::ClientContext* context, const ::iroha::protocol::BlocksQuery& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::iroha::protocol::BlockQueryResponse>* PrepareAsyncFetchCommitsRaw(::grpc::ClientContext* context, const ::iroha::protocol::BlocksQuery& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::iroha::protocol::HealthcheckData>* AsyncHealthcheckRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::iroha::protocol::HealthcheckData>* PrepareAsyncHealthcheckRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Find_;
    const ::grpc::internal::RpcMethod rpcmethod_FetchCommits_;
    const ::grpc::internal::RpcMethod rpcmethod_Healthcheck_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Find(::grpc::ServerContext* context, const ::iroha::protocol::Query* request, ::iroha::protocol::QueryResponse* response);
    virtual ::grpc::Status FetchCommits(::grpc::ServerContext* context, const ::iroha::protocol::BlocksQuery* request, ::grpc::ServerWriter< ::iroha::protocol::BlockQueryResponse>* writer);
    virtual ::grpc::Status Healthcheck(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::iroha::protocol::HealthcheckData* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Find : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Find() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Find() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Find(::grpc::ServerContext* /*context*/, const ::iroha::protocol::Query* /*request*/, ::iroha::protocol::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFind(::grpc::ServerContext* context, ::iroha::protocol::Query* request, ::grpc::ServerAsyncResponseWriter< ::iroha::protocol::QueryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FetchCommits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FetchCommits() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_FetchCommits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchCommits(::grpc::ServerContext* /*context*/, const ::iroha::protocol::BlocksQuery* /*request*/, ::grpc::ServerWriter< ::iroha::protocol::BlockQueryResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchCommits(::grpc::ServerContext* context, ::iroha::protocol::BlocksQuery* request, ::grpc::ServerAsyncWriter< ::iroha::protocol::BlockQueryResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Healthcheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Healthcheck() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Healthcheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Healthcheck(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::iroha::protocol::HealthcheckData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHealthcheck(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::iroha::protocol::HealthcheckData>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Find<WithAsyncMethod_FetchCommits<WithAsyncMethod_Healthcheck<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Find : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Find() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::iroha::protocol::Query, ::iroha::protocol::QueryResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::iroha::protocol::Query* request, ::iroha::protocol::QueryResponse* response) { return this->Find(context, request, response); }));}
    void SetMessageAllocatorFor_Find(
        ::grpc::experimental::MessageAllocator< ::iroha::protocol::Query, ::iroha::protocol::QueryResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::iroha::protocol::Query, ::iroha::protocol::QueryResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Find() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Find(::grpc::ServerContext* /*context*/, const ::iroha::protocol::Query* /*request*/, ::iroha::protocol::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Find(
      ::grpc::CallbackServerContext* /*context*/, const ::iroha::protocol::Query* /*request*/, ::iroha::protocol::QueryResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Find(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::iroha::protocol::Query* /*request*/, ::iroha::protocol::QueryResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_FetchCommits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_FetchCommits() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::iroha::protocol::BlocksQuery, ::iroha::protocol::BlockQueryResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::iroha::protocol::BlocksQuery* request) { return this->FetchCommits(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_FetchCommits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchCommits(::grpc::ServerContext* /*context*/, const ::iroha::protocol::BlocksQuery* /*request*/, ::grpc::ServerWriter< ::iroha::protocol::BlockQueryResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::iroha::protocol::BlockQueryResponse>* FetchCommits(
      ::grpc::CallbackServerContext* /*context*/, const ::iroha::protocol::BlocksQuery* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::iroha::protocol::BlockQueryResponse>* FetchCommits(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::iroha::protocol::BlocksQuery* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Healthcheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Healthcheck() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::iroha::protocol::HealthcheckData>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::protobuf::Empty* request, ::iroha::protocol::HealthcheckData* response) { return this->Healthcheck(context, request, response); }));}
    void SetMessageAllocatorFor_Healthcheck(
        ::grpc::experimental::MessageAllocator< ::google::protobuf::Empty, ::iroha::protocol::HealthcheckData>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::iroha::protocol::HealthcheckData>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Healthcheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Healthcheck(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::iroha::protocol::HealthcheckData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Healthcheck(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::iroha::protocol::HealthcheckData* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Healthcheck(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::iroha::protocol::HealthcheckData* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Find<ExperimentalWithCallbackMethod_FetchCommits<ExperimentalWithCallbackMethod_Healthcheck<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Find<ExperimentalWithCallbackMethod_FetchCommits<ExperimentalWithCallbackMethod_Healthcheck<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Find : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Find() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Find() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Find(::grpc::ServerContext* /*context*/, const ::iroha::protocol::Query* /*request*/, ::iroha::protocol::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FetchCommits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FetchCommits() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_FetchCommits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchCommits(::grpc::ServerContext* /*context*/, const ::iroha::protocol::BlocksQuery* /*request*/, ::grpc::ServerWriter< ::iroha::protocol::BlockQueryResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Healthcheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Healthcheck() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Healthcheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Healthcheck(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::iroha::protocol::HealthcheckData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Find : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Find() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Find() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Find(::grpc::ServerContext* /*context*/, const ::iroha::protocol::Query* /*request*/, ::iroha::protocol::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFind(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FetchCommits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FetchCommits() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_FetchCommits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchCommits(::grpc::ServerContext* /*context*/, const ::iroha::protocol::BlocksQuery* /*request*/, ::grpc::ServerWriter< ::iroha::protocol::BlockQueryResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchCommits(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Healthcheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Healthcheck() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Healthcheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Healthcheck(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::iroha::protocol::HealthcheckData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHealthcheck(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Find : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Find() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Find(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Find() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Find(::grpc::ServerContext* /*context*/, const ::iroha::protocol::Query* /*request*/, ::iroha::protocol::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Find(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Find(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_FetchCommits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_FetchCommits() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->FetchCommits(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_FetchCommits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchCommits(::grpc::ServerContext* /*context*/, const ::iroha::protocol::BlocksQuery* /*request*/, ::grpc::ServerWriter< ::iroha::protocol::BlockQueryResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* FetchCommits(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* FetchCommits(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Healthcheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Healthcheck() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Healthcheck(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Healthcheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Healthcheck(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::iroha::protocol::HealthcheckData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Healthcheck(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Healthcheck(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Find : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Find() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::iroha::protocol::Query, ::iroha::protocol::QueryResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::iroha::protocol::Query, ::iroha::protocol::QueryResponse>* streamer) {
                       return this->StreamedFind(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Find() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Find(::grpc::ServerContext* /*context*/, const ::iroha::protocol::Query* /*request*/, ::iroha::protocol::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFind(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::iroha::protocol::Query,::iroha::protocol::QueryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Healthcheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Healthcheck() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::iroha::protocol::HealthcheckData>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::iroha::protocol::HealthcheckData>* streamer) {
                       return this->StreamedHealthcheck(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Healthcheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Healthcheck(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::iroha::protocol::HealthcheckData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHealthcheck(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::iroha::protocol::HealthcheckData>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Find<WithStreamedUnaryMethod_Healthcheck<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_FetchCommits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_FetchCommits() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::iroha::protocol::BlocksQuery, ::iroha::protocol::BlockQueryResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::iroha::protocol::BlocksQuery, ::iroha::protocol::BlockQueryResponse>* streamer) {
                       return this->StreamedFetchCommits(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_FetchCommits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FetchCommits(::grpc::ServerContext* /*context*/, const ::iroha::protocol::BlocksQuery* /*request*/, ::grpc::ServerWriter< ::iroha::protocol::BlockQueryResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedFetchCommits(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::iroha::protocol::BlocksQuery,::iroha::protocol::BlockQueryResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_FetchCommits<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Find<WithSplitStreamingMethod_FetchCommits<WithStreamedUnaryMethod_Healthcheck<Service > > > StreamedService;
};

}  // namespace protocol
}  // namespace iroha


#endif  // GRPC_endpoint_2eproto__INCLUDED
