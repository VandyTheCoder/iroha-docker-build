// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: commands.proto

#include "commands.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace iroha {
namespace protocol {
constexpr AddAssetQuantity::AddAssetQuantity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : asset_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , amount_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AddAssetQuantityDefaultTypeInternal {
  constexpr AddAssetQuantityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddAssetQuantityDefaultTypeInternal() {}
  union {
    AddAssetQuantity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddAssetQuantityDefaultTypeInternal _AddAssetQuantity_default_instance_;
constexpr AddPeer::AddPeer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : peer_(nullptr){}
struct AddPeerDefaultTypeInternal {
  constexpr AddPeerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddPeerDefaultTypeInternal() {}
  union {
    AddPeer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddPeerDefaultTypeInternal _AddPeer_default_instance_;
constexpr RemovePeer::RemovePeer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : public_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct RemovePeerDefaultTypeInternal {
  constexpr RemovePeerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RemovePeerDefaultTypeInternal() {}
  union {
    RemovePeer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RemovePeerDefaultTypeInternal _RemovePeer_default_instance_;
constexpr AddSignatory::AddSignatory(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , public_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AddSignatoryDefaultTypeInternal {
  constexpr AddSignatoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddSignatoryDefaultTypeInternal() {}
  union {
    AddSignatory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddSignatoryDefaultTypeInternal _AddSignatory_default_instance_;
constexpr CreateAsset::CreateAsset(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : asset_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , domain_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , precision_(0u){}
struct CreateAssetDefaultTypeInternal {
  constexpr CreateAssetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateAssetDefaultTypeInternal() {}
  union {
    CreateAsset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateAssetDefaultTypeInternal _CreateAsset_default_instance_;
constexpr CreateAccount::CreateAccount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , domain_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , public_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CreateAccountDefaultTypeInternal {
  constexpr CreateAccountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateAccountDefaultTypeInternal() {}
  union {
    CreateAccount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateAccountDefaultTypeInternal _CreateAccount_default_instance_;
constexpr SetAccountDetail::SetAccountDetail(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SetAccountDetailDefaultTypeInternal {
  constexpr SetAccountDetailDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetAccountDetailDefaultTypeInternal() {}
  union {
    SetAccountDetail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetAccountDetailDefaultTypeInternal _SetAccountDetail_default_instance_;
constexpr CreateDomain::CreateDomain(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : domain_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , default_role_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CreateDomainDefaultTypeInternal {
  constexpr CreateDomainDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateDomainDefaultTypeInternal() {}
  union {
    CreateDomain _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateDomainDefaultTypeInternal _CreateDomain_default_instance_;
constexpr RemoveSignatory::RemoveSignatory(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , public_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct RemoveSignatoryDefaultTypeInternal {
  constexpr RemoveSignatoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RemoveSignatoryDefaultTypeInternal() {}
  union {
    RemoveSignatory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RemoveSignatoryDefaultTypeInternal _RemoveSignatory_default_instance_;
constexpr SetAccountQuorum::SetAccountQuorum(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , quorum_(0u){}
struct SetAccountQuorumDefaultTypeInternal {
  constexpr SetAccountQuorumDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetAccountQuorumDefaultTypeInternal() {}
  union {
    SetAccountQuorum _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetAccountQuorumDefaultTypeInternal _SetAccountQuorum_default_instance_;
constexpr TransferAsset::TransferAsset(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : src_account_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dest_account_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , asset_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , amount_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TransferAssetDefaultTypeInternal {
  constexpr TransferAssetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransferAssetDefaultTypeInternal() {}
  union {
    TransferAsset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransferAssetDefaultTypeInternal _TransferAsset_default_instance_;
constexpr AppendRole::AppendRole(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , role_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AppendRoleDefaultTypeInternal {
  constexpr AppendRoleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppendRoleDefaultTypeInternal() {}
  union {
    AppendRole _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppendRoleDefaultTypeInternal _AppendRole_default_instance_;
constexpr DetachRole::DetachRole(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , role_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DetachRoleDefaultTypeInternal {
  constexpr DetachRoleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DetachRoleDefaultTypeInternal() {}
  union {
    DetachRole _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DetachRoleDefaultTypeInternal _DetachRole_default_instance_;
constexpr CreateRole::CreateRole(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : permissions_()
  , _permissions_cached_byte_size_()
  , role_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CreateRoleDefaultTypeInternal {
  constexpr CreateRoleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateRoleDefaultTypeInternal() {}
  union {
    CreateRole _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateRoleDefaultTypeInternal _CreateRole_default_instance_;
constexpr GrantPermission::GrantPermission(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , permission_(0)
{}
struct GrantPermissionDefaultTypeInternal {
  constexpr GrantPermissionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GrantPermissionDefaultTypeInternal() {}
  union {
    GrantPermission _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GrantPermissionDefaultTypeInternal _GrantPermission_default_instance_;
constexpr RevokePermission::RevokePermission(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , permission_(0)
{}
struct RevokePermissionDefaultTypeInternal {
  constexpr RevokePermissionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RevokePermissionDefaultTypeInternal() {}
  union {
    RevokePermission _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RevokePermissionDefaultTypeInternal _RevokePermission_default_instance_;
constexpr SubtractAssetQuantity::SubtractAssetQuantity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : asset_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , amount_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SubtractAssetQuantityDefaultTypeInternal {
  constexpr SubtractAssetQuantityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubtractAssetQuantityDefaultTypeInternal() {}
  union {
    SubtractAssetQuantity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubtractAssetQuantityDefaultTypeInternal _SubtractAssetQuantity_default_instance_;
constexpr CompareAndSetAccountDetail::CompareAndSetAccountDetail(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , check_empty_(false)
  , _oneof_case_{}{}
struct CompareAndSetAccountDetailDefaultTypeInternal {
  constexpr CompareAndSetAccountDetailDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CompareAndSetAccountDetailDefaultTypeInternal() {}
  union {
    CompareAndSetAccountDetail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CompareAndSetAccountDetailDefaultTypeInternal _CompareAndSetAccountDetail_default_instance_;
constexpr SetSettingValue::SetSettingValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SetSettingValueDefaultTypeInternal {
  constexpr SetSettingValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetSettingValueDefaultTypeInternal() {}
  union {
    SetSettingValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetSettingValueDefaultTypeInternal _SetSettingValue_default_instance_;
constexpr CallEngine::CallEngine(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : caller_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , input_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)

  , _oneof_case_{}{}
struct CallEngineDefaultTypeInternal {
  constexpr CallEngineDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CallEngineDefaultTypeInternal() {}
  union {
    CallEngine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CallEngineDefaultTypeInternal _CallEngine_default_instance_;
constexpr Command::Command(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct CommandDefaultTypeInternal {
  constexpr CommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandDefaultTypeInternal() {}
  union {
    Command _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandDefaultTypeInternal _Command_default_instance_;
}  // namespace protocol
}  // namespace iroha
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_commands_2eproto[21];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_commands_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_commands_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_commands_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::AddAssetQuantity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::AddAssetQuantity, asset_id_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::AddAssetQuantity, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::AddPeer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::AddPeer, peer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::RemovePeer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::RemovePeer, public_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::AddSignatory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::AddSignatory, account_id_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::AddSignatory, public_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::CreateAsset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::CreateAsset, asset_name_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::CreateAsset, domain_id_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::CreateAsset, precision_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::CreateAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::CreateAccount, account_name_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::CreateAccount, domain_id_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::CreateAccount, public_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::SetAccountDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::SetAccountDetail, account_id_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::SetAccountDetail, key_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::SetAccountDetail, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::CreateDomain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::CreateDomain, domain_id_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::CreateDomain, default_role_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::RemoveSignatory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::RemoveSignatory, account_id_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::RemoveSignatory, public_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::SetAccountQuorum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::SetAccountQuorum, account_id_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::SetAccountQuorum, quorum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::TransferAsset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::TransferAsset, src_account_id_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::TransferAsset, dest_account_id_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::TransferAsset, asset_id_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::TransferAsset, description_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::TransferAsset, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::AppendRole, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::AppendRole, account_id_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::AppendRole, role_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::DetachRole, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::DetachRole, account_id_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::DetachRole, role_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::CreateRole, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::CreateRole, role_name_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::CreateRole, permissions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GrantPermission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GrantPermission, account_id_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::GrantPermission, permission_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::RevokePermission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::RevokePermission, account_id_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::RevokePermission, permission_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::SubtractAssetQuantity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::SubtractAssetQuantity, asset_id_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::SubtractAssetQuantity, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::CompareAndSetAccountDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::CompareAndSetAccountDetail, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::CompareAndSetAccountDetail, account_id_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::CompareAndSetAccountDetail, key_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::CompareAndSetAccountDetail, value_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::CompareAndSetAccountDetail, check_empty_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::CompareAndSetAccountDetail, opt_old_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::SetSettingValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::SetSettingValue, key_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::SetSettingValue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::CallEngine, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::CallEngine, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::CallEngine, type_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::CallEngine, caller_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::CallEngine, input_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::CallEngine, opt_callee_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Command, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Command, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Command, command_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::iroha::protocol::AddAssetQuantity)},
  { 7, -1, sizeof(::iroha::protocol::AddPeer)},
  { 13, -1, sizeof(::iroha::protocol::RemovePeer)},
  { 19, -1, sizeof(::iroha::protocol::AddSignatory)},
  { 26, -1, sizeof(::iroha::protocol::CreateAsset)},
  { 34, -1, sizeof(::iroha::protocol::CreateAccount)},
  { 42, -1, sizeof(::iroha::protocol::SetAccountDetail)},
  { 50, -1, sizeof(::iroha::protocol::CreateDomain)},
  { 57, -1, sizeof(::iroha::protocol::RemoveSignatory)},
  { 64, -1, sizeof(::iroha::protocol::SetAccountQuorum)},
  { 71, -1, sizeof(::iroha::protocol::TransferAsset)},
  { 81, -1, sizeof(::iroha::protocol::AppendRole)},
  { 88, -1, sizeof(::iroha::protocol::DetachRole)},
  { 95, -1, sizeof(::iroha::protocol::CreateRole)},
  { 102, -1, sizeof(::iroha::protocol::GrantPermission)},
  { 109, -1, sizeof(::iroha::protocol::RevokePermission)},
  { 116, -1, sizeof(::iroha::protocol::SubtractAssetQuantity)},
  { 123, -1, sizeof(::iroha::protocol::CompareAndSetAccountDetail)},
  { 134, -1, sizeof(::iroha::protocol::SetSettingValue)},
  { 141, -1, sizeof(::iroha::protocol::CallEngine)},
  { 151, -1, sizeof(::iroha::protocol::Command)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_AddAssetQuantity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_AddPeer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_RemovePeer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_AddSignatory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_CreateAsset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_CreateAccount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_SetAccountDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_CreateDomain_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_RemoveSignatory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_SetAccountQuorum_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_TransferAsset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_AppendRole_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_DetachRole_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_CreateRole_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_GrantPermission_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_RevokePermission_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_SubtractAssetQuantity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_CompareAndSetAccountDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_SetSettingValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_CallEngine_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_Command_default_instance_),
};

const char descriptor_table_protodef_commands_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016commands.proto\022\016iroha.protocol\032\017primit"
  "ive.proto\"4\n\020AddAssetQuantity\022\020\n\010asset_i"
  "d\030\001 \001(\t\022\016\n\006amount\030\002 \001(\t\"-\n\007AddPeer\022\"\n\004pe"
  "er\030\001 \001(\0132\024.iroha.protocol.Peer\" \n\nRemove"
  "Peer\022\022\n\npublic_key\030\001 \001(\t\"6\n\014AddSignatory"
  "\022\022\n\naccount_id\030\001 \001(\t\022\022\n\npublic_key\030\002 \001(\t"
  "\"G\n\013CreateAsset\022\022\n\nasset_name\030\001 \001(\t\022\021\n\td"
  "omain_id\030\002 \001(\t\022\021\n\tprecision\030\003 \001(\r\"L\n\rCre"
  "ateAccount\022\024\n\014account_name\030\001 \001(\t\022\021\n\tdoma"
  "in_id\030\002 \001(\t\022\022\n\npublic_key\030\003 \001(\t\"B\n\020SetAc"
  "countDetail\022\022\n\naccount_id\030\001 \001(\t\022\013\n\003key\030\002"
  " \001(\t\022\r\n\005value\030\003 \001(\t\"7\n\014CreateDomain\022\021\n\td"
  "omain_id\030\001 \001(\t\022\024\n\014default_role\030\002 \001(\t\"9\n\017"
  "RemoveSignatory\022\022\n\naccount_id\030\001 \001(\t\022\022\n\np"
  "ublic_key\030\002 \001(\t\"6\n\020SetAccountQuorum\022\022\n\na"
  "ccount_id\030\001 \001(\t\022\016\n\006quorum\030\002 \001(\r\"w\n\rTrans"
  "ferAsset\022\026\n\016src_account_id\030\001 \001(\t\022\027\n\017dest"
  "_account_id\030\002 \001(\t\022\020\n\010asset_id\030\003 \001(\t\022\023\n\013d"
  "escription\030\004 \001(\t\022\016\n\006amount\030\005 \001(\t\"3\n\nAppe"
  "ndRole\022\022\n\naccount_id\030\001 \001(\t\022\021\n\trole_name\030"
  "\002 \001(\t\"3\n\nDetachRole\022\022\n\naccount_id\030\001 \001(\t\022"
  "\021\n\trole_name\030\002 \001(\t\"T\n\nCreateRole\022\021\n\trole"
  "_name\030\001 \001(\t\0223\n\013permissions\030\002 \003(\0162\036.iroha"
  ".protocol.RolePermission\"^\n\017GrantPermiss"
  "ion\022\022\n\naccount_id\030\001 \001(\t\0227\n\npermission\030\002 "
  "\001(\0162#.iroha.protocol.GrantablePermission"
  "\"_\n\020RevokePermission\022\022\n\naccount_id\030\001 \001(\t"
  "\0227\n\npermission\030\002 \001(\0162#.iroha.protocol.Gr"
  "antablePermission\"9\n\025SubtractAssetQuanti"
  "ty\022\020\n\010asset_id\030\001 \001(\t\022\016\n\006amount\030\002 \001(\t\"\207\001\n"
  "\032CompareAndSetAccountDetail\022\022\n\naccount_i"
  "d\030\001 \001(\t\022\013\n\003key\030\002 \001(\t\022\r\n\005value\030\003 \001(\t\022\023\n\to"
  "ld_value\030\004 \001(\tH\000\022\023\n\013check_empty\030\005 \001(\010B\017\n"
  "\ropt_old_value\"-\n\017SetSettingValue\022\013\n\003key"
  "\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"\235\001\n\nCallEngine\0223\n\004"
  "type\030\001 \001(\0162%.iroha.protocol.CallEngine.E"
  "ngineType\022\016\n\006caller\030\002 \001(\t\022\020\n\006callee\030\003 \001("
  "\tH\000\022\r\n\005input\030\004 \001(\t\"\033\n\nEngineType\022\r\n\tkSol"
  "idity\020\000B\014\n\nopt_callee\"\254\t\n\007Command\022>\n\022add"
  "_asset_quantity\030\001 \001(\0132 .iroha.protocol.A"
  "ddAssetQuantityH\000\022+\n\010add_peer\030\002 \001(\0132\027.ir"
  "oha.protocol.AddPeerH\000\0225\n\radd_signatory\030"
  "\003 \001(\0132\034.iroha.protocol.AddSignatoryH\000\0221\n"
  "\013append_role\030\004 \001(\0132\032.iroha.protocol.Appe"
  "ndRoleH\000\0227\n\016create_account\030\005 \001(\0132\035.iroha"
  ".protocol.CreateAccountH\000\0223\n\014create_asse"
  "t\030\006 \001(\0132\033.iroha.protocol.CreateAssetH\000\0225"
  "\n\rcreate_domain\030\007 \001(\0132\034.iroha.protocol.C"
  "reateDomainH\000\0221\n\013create_role\030\010 \001(\0132\032.iro"
  "ha.protocol.CreateRoleH\000\0221\n\013detach_role\030"
  "\t \001(\0132\032.iroha.protocol.DetachRoleH\000\022;\n\020g"
  "rant_permission\030\n \001(\0132\037.iroha.protocol.G"
  "rantPermissionH\000\022;\n\020remove_signatory\030\013 \001"
  "(\0132\037.iroha.protocol.RemoveSignatoryH\000\022=\n"
  "\021revoke_permission\030\014 \001(\0132 .iroha.protoco"
  "l.RevokePermissionH\000\022>\n\022set_account_deta"
  "il\030\r \001(\0132 .iroha.protocol.SetAccountDeta"
  "ilH\000\022>\n\022set_account_quorum\030\016 \001(\0132 .iroha"
  ".protocol.SetAccountQuorumH\000\022H\n\027subtract"
  "_asset_quantity\030\017 \001(\0132%.iroha.protocol.S"
  "ubtractAssetQuantityH\000\0227\n\016transfer_asset"
  "\030\020 \001(\0132\035.iroha.protocol.TransferAssetH\000\022"
  "1\n\013remove_peer\030\021 \001(\0132\032.iroha.protocol.Re"
  "movePeerH\000\022T\n\036compare_and_set_account_de"
  "tail\030\022 \001(\0132*.iroha.protocol.CompareAndSe"
  "tAccountDetailH\000\022<\n\021set_setting_value\030\023 "
  "\001(\0132\037.iroha.protocol.SetSettingValueH\000\0221"
  "\n\013call_engine\030\024 \001(\0132\032.iroha.protocol.Cal"
  "lEngineH\000B\t\n\007commandB\032Z\030iroha.generated/"
  "protocolb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_commands_2eproto_deps[1] = {
  &::descriptor_table_primitive_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_commands_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_commands_2eproto = {
  false, false, 2776, descriptor_table_protodef_commands_2eproto, "commands.proto", 
  &descriptor_table_commands_2eproto_once, descriptor_table_commands_2eproto_deps, 1, 21,
  schemas, file_default_instances, TableStruct_commands_2eproto::offsets,
  file_level_metadata_commands_2eproto, file_level_enum_descriptors_commands_2eproto, file_level_service_descriptors_commands_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_commands_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_commands_2eproto);
  return descriptor_table_commands_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_commands_2eproto(&descriptor_table_commands_2eproto);
namespace iroha {
namespace protocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CallEngine_EngineType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_commands_2eproto);
  return file_level_enum_descriptors_commands_2eproto[0];
}
bool CallEngine_EngineType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CallEngine_EngineType CallEngine::kSolidity;
constexpr CallEngine_EngineType CallEngine::EngineType_MIN;
constexpr CallEngine_EngineType CallEngine::EngineType_MAX;
constexpr int CallEngine::EngineType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class AddAssetQuantity::_Internal {
 public:
};

AddAssetQuantity::AddAssetQuantity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.AddAssetQuantity)
}
AddAssetQuantity::AddAssetQuantity(const AddAssetQuantity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset_id().empty()) {
    asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset_id(), 
      GetArena());
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.AddAssetQuantity)
}

void AddAssetQuantity::SharedCtor() {
asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AddAssetQuantity::~AddAssetQuantity() {
  // @@protoc_insertion_point(destructor:iroha.protocol.AddAssetQuantity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddAssetQuantity::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  asset_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AddAssetQuantity::ArenaDtor(void* object) {
  AddAssetQuantity* _this = reinterpret_cast< AddAssetQuantity* >(object);
  (void)_this;
}
void AddAssetQuantity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddAssetQuantity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddAssetQuantity::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.AddAssetQuantity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  asset_id_.ClearToEmpty();
  amount_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddAssetQuantity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string asset_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_asset_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.AddAssetQuantity.asset_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.AddAssetQuantity.amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddAssetQuantity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.AddAssetQuantity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string asset_id = 1;
  if (this->asset_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset_id().data(), static_cast<int>(this->_internal_asset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.AddAssetQuantity.asset_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_asset_id(), target);
  }

  // string amount = 2;
  if (this->amount().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount().data(), static_cast<int>(this->_internal_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.AddAssetQuantity.amount");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.AddAssetQuantity)
  return target;
}

size_t AddAssetQuantity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.AddAssetQuantity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string asset_id = 1;
  if (this->asset_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset_id());
  }

  // string amount = 2;
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddAssetQuantity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.AddAssetQuantity)
  GOOGLE_DCHECK_NE(&from, this);
  const AddAssetQuantity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddAssetQuantity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.AddAssetQuantity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.AddAssetQuantity)
    MergeFrom(*source);
  }
}

void AddAssetQuantity::MergeFrom(const AddAssetQuantity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.AddAssetQuantity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.asset_id().size() > 0) {
    _internal_set_asset_id(from._internal_asset_id());
  }
  if (from.amount().size() > 0) {
    _internal_set_amount(from._internal_amount());
  }
}

void AddAssetQuantity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.AddAssetQuantity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddAssetQuantity::CopyFrom(const AddAssetQuantity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.AddAssetQuantity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddAssetQuantity::IsInitialized() const {
  return true;
}

void AddAssetQuantity::InternalSwap(AddAssetQuantity* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  asset_id_.Swap(&other->asset_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  amount_.Swap(&other->amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AddAssetQuantity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AddPeer::_Internal {
 public:
  static const ::iroha::protocol::Peer& peer(const AddPeer* msg);
};

const ::iroha::protocol::Peer&
AddPeer::_Internal::peer(const AddPeer* msg) {
  return *msg->peer_;
}
void AddPeer::clear_peer() {
  if (GetArena() == nullptr && peer_ != nullptr) {
    delete peer_;
  }
  peer_ = nullptr;
}
AddPeer::AddPeer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.AddPeer)
}
AddPeer::AddPeer(const AddPeer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_peer()) {
    peer_ = new ::iroha::protocol::Peer(*from.peer_);
  } else {
    peer_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.AddPeer)
}

void AddPeer::SharedCtor() {
peer_ = nullptr;
}

AddPeer::~AddPeer() {
  // @@protoc_insertion_point(destructor:iroha.protocol.AddPeer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddPeer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete peer_;
}

void AddPeer::ArenaDtor(void* object) {
  AddPeer* _this = reinterpret_cast< AddPeer* >(object);
  (void)_this;
}
void AddPeer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddPeer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddPeer::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.AddPeer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && peer_ != nullptr) {
    delete peer_;
  }
  peer_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddPeer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .iroha.protocol.Peer peer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddPeer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.AddPeer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .iroha.protocol.Peer peer = 1;
  if (this->has_peer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::peer(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.AddPeer)
  return target;
}

size_t AddPeer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.AddPeer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .iroha.protocol.Peer peer = 1;
  if (this->has_peer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddPeer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.AddPeer)
  GOOGLE_DCHECK_NE(&from, this);
  const AddPeer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddPeer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.AddPeer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.AddPeer)
    MergeFrom(*source);
  }
}

void AddPeer::MergeFrom(const AddPeer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.AddPeer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_peer()) {
    _internal_mutable_peer()->::iroha::protocol::Peer::MergeFrom(from._internal_peer());
  }
}

void AddPeer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.AddPeer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPeer::CopyFrom(const AddPeer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.AddPeer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPeer::IsInitialized() const {
  return true;
}

void AddPeer::InternalSwap(AddPeer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(peer_, other->peer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddPeer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RemovePeer::_Internal {
 public:
};

RemovePeer::RemovePeer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.RemovePeer)
}
RemovePeer::RemovePeer(const RemovePeer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_key().empty()) {
    public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_public_key(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.RemovePeer)
}

void RemovePeer::SharedCtor() {
public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RemovePeer::~RemovePeer() {
  // @@protoc_insertion_point(destructor:iroha.protocol.RemovePeer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemovePeer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RemovePeer::ArenaDtor(void* object) {
  RemovePeer* _this = reinterpret_cast< RemovePeer* >(object);
  (void)_this;
}
void RemovePeer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemovePeer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RemovePeer::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.RemovePeer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  public_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemovePeer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string public_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.RemovePeer.public_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemovePeer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.RemovePeer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string public_key = 1;
  if (this->public_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_key().data(), static_cast<int>(this->_internal_public_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.RemovePeer.public_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_public_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.RemovePeer)
  return target;
}

size_t RemovePeer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.RemovePeer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string public_key = 1;
  if (this->public_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemovePeer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.RemovePeer)
  GOOGLE_DCHECK_NE(&from, this);
  const RemovePeer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemovePeer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.RemovePeer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.RemovePeer)
    MergeFrom(*source);
  }
}

void RemovePeer::MergeFrom(const RemovePeer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.RemovePeer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.public_key().size() > 0) {
    _internal_set_public_key(from._internal_public_key());
  }
}

void RemovePeer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.RemovePeer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemovePeer::CopyFrom(const RemovePeer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.RemovePeer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemovePeer::IsInitialized() const {
  return true;
}

void RemovePeer::InternalSwap(RemovePeer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  public_key_.Swap(&other->public_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RemovePeer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AddSignatory::_Internal {
 public:
};

AddSignatory::AddSignatory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.AddSignatory)
}
AddSignatory::AddSignatory(const AddSignatory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account_id().empty()) {
    account_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account_id(), 
      GetArena());
  }
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_key().empty()) {
    public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_public_key(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.AddSignatory)
}

void AddSignatory::SharedCtor() {
account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AddSignatory::~AddSignatory() {
  // @@protoc_insertion_point(destructor:iroha.protocol.AddSignatory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddSignatory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  account_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AddSignatory::ArenaDtor(void* object) {
  AddSignatory* _this = reinterpret_cast< AddSignatory* >(object);
  (void)_this;
}
void AddSignatory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddSignatory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddSignatory::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.AddSignatory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_.ClearToEmpty();
  public_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddSignatory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.AddSignatory.account_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string public_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.AddSignatory.public_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddSignatory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.AddSignatory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.AddSignatory.account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_id(), target);
  }

  // string public_key = 2;
  if (this->public_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_key().data(), static_cast<int>(this->_internal_public_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.AddSignatory.public_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_public_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.AddSignatory)
  return target;
}

size_t AddSignatory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.AddSignatory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  // string public_key = 2;
  if (this->public_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddSignatory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.AddSignatory)
  GOOGLE_DCHECK_NE(&from, this);
  const AddSignatory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddSignatory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.AddSignatory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.AddSignatory)
    MergeFrom(*source);
  }
}

void AddSignatory::MergeFrom(const AddSignatory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.AddSignatory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account_id().size() > 0) {
    _internal_set_account_id(from._internal_account_id());
  }
  if (from.public_key().size() > 0) {
    _internal_set_public_key(from._internal_public_key());
  }
}

void AddSignatory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.AddSignatory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddSignatory::CopyFrom(const AddSignatory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.AddSignatory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddSignatory::IsInitialized() const {
  return true;
}

void AddSignatory::InternalSwap(AddSignatory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  account_id_.Swap(&other->account_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  public_key_.Swap(&other->public_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AddSignatory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CreateAsset::_Internal {
 public:
};

CreateAsset::CreateAsset(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.CreateAsset)
}
CreateAsset::CreateAsset(const CreateAsset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  asset_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset_name().empty()) {
    asset_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset_name(), 
      GetArena());
  }
  domain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_domain_id().empty()) {
    domain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_domain_id(), 
      GetArena());
  }
  precision_ = from.precision_;
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.CreateAsset)
}

void CreateAsset::SharedCtor() {
asset_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
domain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
precision_ = 0u;
}

CreateAsset::~CreateAsset() {
  // @@protoc_insertion_point(destructor:iroha.protocol.CreateAsset)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateAsset::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  asset_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  domain_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateAsset::ArenaDtor(void* object) {
  CreateAsset* _this = reinterpret_cast< CreateAsset* >(object);
  (void)_this;
}
void CreateAsset::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateAsset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateAsset::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.CreateAsset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  asset_name_.ClearToEmpty();
  domain_id_.ClearToEmpty();
  precision_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateAsset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string asset_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_asset_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.CreateAsset.asset_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string domain_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_domain_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.CreateAsset.domain_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 precision = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          precision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateAsset::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.CreateAsset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string asset_name = 1;
  if (this->asset_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset_name().data(), static_cast<int>(this->_internal_asset_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.CreateAsset.asset_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_asset_name(), target);
  }

  // string domain_id = 2;
  if (this->domain_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_domain_id().data(), static_cast<int>(this->_internal_domain_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.CreateAsset.domain_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_domain_id(), target);
  }

  // uint32 precision = 3;
  if (this->precision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_precision(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.CreateAsset)
  return target;
}

size_t CreateAsset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.CreateAsset)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string asset_name = 1;
  if (this->asset_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset_name());
  }

  // string domain_id = 2;
  if (this->domain_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_domain_id());
  }

  // uint32 precision = 3;
  if (this->precision() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_precision());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateAsset::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.CreateAsset)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateAsset* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateAsset>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.CreateAsset)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.CreateAsset)
    MergeFrom(*source);
  }
}

void CreateAsset::MergeFrom(const CreateAsset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.CreateAsset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.asset_name().size() > 0) {
    _internal_set_asset_name(from._internal_asset_name());
  }
  if (from.domain_id().size() > 0) {
    _internal_set_domain_id(from._internal_domain_id());
  }
  if (from.precision() != 0) {
    _internal_set_precision(from._internal_precision());
  }
}

void CreateAsset::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.CreateAsset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateAsset::CopyFrom(const CreateAsset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.CreateAsset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAsset::IsInitialized() const {
  return true;
}

void CreateAsset::InternalSwap(CreateAsset* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  asset_name_.Swap(&other->asset_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  domain_id_.Swap(&other->domain_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(precision_, other->precision_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateAsset::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CreateAccount::_Internal {
 public:
};

CreateAccount::CreateAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.CreateAccount)
}
CreateAccount::CreateAccount(const CreateAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account_name().empty()) {
    account_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account_name(), 
      GetArena());
  }
  domain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_domain_id().empty()) {
    domain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_domain_id(), 
      GetArena());
  }
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_key().empty()) {
    public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_public_key(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.CreateAccount)
}

void CreateAccount::SharedCtor() {
account_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
domain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreateAccount::~CreateAccount() {
  // @@protoc_insertion_point(destructor:iroha.protocol.CreateAccount)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateAccount::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  account_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  domain_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateAccount::ArenaDtor(void* object) {
  CreateAccount* _this = reinterpret_cast< CreateAccount* >(object);
  (void)_this;
}
void CreateAccount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.CreateAccount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_name_.ClearToEmpty();
  domain_id_.ClearToEmpty();
  public_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateAccount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string account_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.CreateAccount.account_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string domain_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_domain_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.CreateAccount.domain_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string public_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.CreateAccount.public_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateAccount::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.CreateAccount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_name = 1;
  if (this->account_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_name().data(), static_cast<int>(this->_internal_account_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.CreateAccount.account_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_name(), target);
  }

  // string domain_id = 2;
  if (this->domain_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_domain_id().data(), static_cast<int>(this->_internal_domain_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.CreateAccount.domain_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_domain_id(), target);
  }

  // string public_key = 3;
  if (this->public_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_key().data(), static_cast<int>(this->_internal_public_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.CreateAccount.public_key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_public_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.CreateAccount)
  return target;
}

size_t CreateAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.CreateAccount)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_name = 1;
  if (this->account_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_name());
  }

  // string domain_id = 2;
  if (this->domain_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_domain_id());
  }

  // string public_key = 3;
  if (this->public_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateAccount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.CreateAccount)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateAccount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateAccount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.CreateAccount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.CreateAccount)
    MergeFrom(*source);
  }
}

void CreateAccount::MergeFrom(const CreateAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.CreateAccount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account_name().size() > 0) {
    _internal_set_account_name(from._internal_account_name());
  }
  if (from.domain_id().size() > 0) {
    _internal_set_domain_id(from._internal_domain_id());
  }
  if (from.public_key().size() > 0) {
    _internal_set_public_key(from._internal_public_key());
  }
}

void CreateAccount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.CreateAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateAccount::CopyFrom(const CreateAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.CreateAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAccount::IsInitialized() const {
  return true;
}

void CreateAccount::InternalSwap(CreateAccount* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  account_name_.Swap(&other->account_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  domain_id_.Swap(&other->domain_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  public_key_.Swap(&other->public_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateAccount::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetAccountDetail::_Internal {
 public:
};

SetAccountDetail::SetAccountDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.SetAccountDetail)
}
SetAccountDetail::SetAccountDetail(const SetAccountDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account_id().empty()) {
    account_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account_id(), 
      GetArena());
  }
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.SetAccountDetail)
}

void SetAccountDetail::SharedCtor() {
account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetAccountDetail::~SetAccountDetail() {
  // @@protoc_insertion_point(destructor:iroha.protocol.SetAccountDetail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetAccountDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  account_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetAccountDetail::ArenaDtor(void* object) {
  SetAccountDetail* _this = reinterpret_cast< SetAccountDetail* >(object);
  (void)_this;
}
void SetAccountDetail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetAccountDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetAccountDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.SetAccountDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_.ClearToEmpty();
  key_.ClearToEmpty();
  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetAccountDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.SetAccountDetail.account_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.SetAccountDetail.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.SetAccountDetail.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetAccountDetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.SetAccountDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.SetAccountDetail.account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_id(), target);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.SetAccountDetail.key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  // string value = 3;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.SetAccountDetail.value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.SetAccountDetail)
  return target;
}

size_t SetAccountDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.SetAccountDetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  // string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetAccountDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.SetAccountDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const SetAccountDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetAccountDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.SetAccountDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.SetAccountDetail)
    MergeFrom(*source);
  }
}

void SetAccountDetail::MergeFrom(const SetAccountDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.SetAccountDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account_id().size() > 0) {
    _internal_set_account_id(from._internal_account_id());
  }
  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void SetAccountDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.SetAccountDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetAccountDetail::CopyFrom(const SetAccountDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.SetAccountDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAccountDetail::IsInitialized() const {
  return true;
}

void SetAccountDetail::InternalSwap(SetAccountDetail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  account_id_.Swap(&other->account_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SetAccountDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CreateDomain::_Internal {
 public:
};

CreateDomain::CreateDomain(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.CreateDomain)
}
CreateDomain::CreateDomain(const CreateDomain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  domain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_domain_id().empty()) {
    domain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_domain_id(), 
      GetArena());
  }
  default_role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_default_role().empty()) {
    default_role_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_default_role(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.CreateDomain)
}

void CreateDomain::SharedCtor() {
domain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
default_role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreateDomain::~CreateDomain() {
  // @@protoc_insertion_point(destructor:iroha.protocol.CreateDomain)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateDomain::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  domain_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  default_role_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateDomain::ArenaDtor(void* object) {
  CreateDomain* _this = reinterpret_cast< CreateDomain* >(object);
  (void)_this;
}
void CreateDomain::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateDomain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateDomain::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.CreateDomain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  domain_id_.ClearToEmpty();
  default_role_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateDomain::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string domain_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_domain_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.CreateDomain.domain_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string default_role = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_default_role();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.CreateDomain.default_role"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateDomain::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.CreateDomain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string domain_id = 1;
  if (this->domain_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_domain_id().data(), static_cast<int>(this->_internal_domain_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.CreateDomain.domain_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_domain_id(), target);
  }

  // string default_role = 2;
  if (this->default_role().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_default_role().data(), static_cast<int>(this->_internal_default_role().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.CreateDomain.default_role");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_default_role(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.CreateDomain)
  return target;
}

size_t CreateDomain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.CreateDomain)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string domain_id = 1;
  if (this->domain_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_domain_id());
  }

  // string default_role = 2;
  if (this->default_role().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_default_role());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateDomain::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.CreateDomain)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateDomain* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateDomain>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.CreateDomain)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.CreateDomain)
    MergeFrom(*source);
  }
}

void CreateDomain::MergeFrom(const CreateDomain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.CreateDomain)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.domain_id().size() > 0) {
    _internal_set_domain_id(from._internal_domain_id());
  }
  if (from.default_role().size() > 0) {
    _internal_set_default_role(from._internal_default_role());
  }
}

void CreateDomain::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.CreateDomain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateDomain::CopyFrom(const CreateDomain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.CreateDomain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateDomain::IsInitialized() const {
  return true;
}

void CreateDomain::InternalSwap(CreateDomain* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  domain_id_.Swap(&other->domain_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  default_role_.Swap(&other->default_role_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateDomain::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RemoveSignatory::_Internal {
 public:
};

RemoveSignatory::RemoveSignatory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.RemoveSignatory)
}
RemoveSignatory::RemoveSignatory(const RemoveSignatory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account_id().empty()) {
    account_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account_id(), 
      GetArena());
  }
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_key().empty()) {
    public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_public_key(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.RemoveSignatory)
}

void RemoveSignatory::SharedCtor() {
account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RemoveSignatory::~RemoveSignatory() {
  // @@protoc_insertion_point(destructor:iroha.protocol.RemoveSignatory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoveSignatory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  account_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RemoveSignatory::ArenaDtor(void* object) {
  RemoveSignatory* _this = reinterpret_cast< RemoveSignatory* >(object);
  (void)_this;
}
void RemoveSignatory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoveSignatory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RemoveSignatory::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.RemoveSignatory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_.ClearToEmpty();
  public_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveSignatory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.RemoveSignatory.account_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string public_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.RemoveSignatory.public_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveSignatory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.RemoveSignatory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.RemoveSignatory.account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_id(), target);
  }

  // string public_key = 2;
  if (this->public_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_key().data(), static_cast<int>(this->_internal_public_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.RemoveSignatory.public_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_public_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.RemoveSignatory)
  return target;
}

size_t RemoveSignatory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.RemoveSignatory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  // string public_key = 2;
  if (this->public_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveSignatory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.RemoveSignatory)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveSignatory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveSignatory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.RemoveSignatory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.RemoveSignatory)
    MergeFrom(*source);
  }
}

void RemoveSignatory::MergeFrom(const RemoveSignatory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.RemoveSignatory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account_id().size() > 0) {
    _internal_set_account_id(from._internal_account_id());
  }
  if (from.public_key().size() > 0) {
    _internal_set_public_key(from._internal_public_key());
  }
}

void RemoveSignatory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.RemoveSignatory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveSignatory::CopyFrom(const RemoveSignatory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.RemoveSignatory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveSignatory::IsInitialized() const {
  return true;
}

void RemoveSignatory::InternalSwap(RemoveSignatory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  account_id_.Swap(&other->account_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  public_key_.Swap(&other->public_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveSignatory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetAccountQuorum::_Internal {
 public:
};

SetAccountQuorum::SetAccountQuorum(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.SetAccountQuorum)
}
SetAccountQuorum::SetAccountQuorum(const SetAccountQuorum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account_id().empty()) {
    account_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account_id(), 
      GetArena());
  }
  quorum_ = from.quorum_;
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.SetAccountQuorum)
}

void SetAccountQuorum::SharedCtor() {
account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
quorum_ = 0u;
}

SetAccountQuorum::~SetAccountQuorum() {
  // @@protoc_insertion_point(destructor:iroha.protocol.SetAccountQuorum)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetAccountQuorum::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  account_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetAccountQuorum::ArenaDtor(void* object) {
  SetAccountQuorum* _this = reinterpret_cast< SetAccountQuorum* >(object);
  (void)_this;
}
void SetAccountQuorum::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetAccountQuorum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetAccountQuorum::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.SetAccountQuorum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_.ClearToEmpty();
  quorum_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetAccountQuorum::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.SetAccountQuorum.account_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 quorum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          quorum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetAccountQuorum::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.SetAccountQuorum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.SetAccountQuorum.account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_id(), target);
  }

  // uint32 quorum = 2;
  if (this->quorum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_quorum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.SetAccountQuorum)
  return target;
}

size_t SetAccountQuorum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.SetAccountQuorum)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  // uint32 quorum = 2;
  if (this->quorum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_quorum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetAccountQuorum::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.SetAccountQuorum)
  GOOGLE_DCHECK_NE(&from, this);
  const SetAccountQuorum* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetAccountQuorum>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.SetAccountQuorum)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.SetAccountQuorum)
    MergeFrom(*source);
  }
}

void SetAccountQuorum::MergeFrom(const SetAccountQuorum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.SetAccountQuorum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account_id().size() > 0) {
    _internal_set_account_id(from._internal_account_id());
  }
  if (from.quorum() != 0) {
    _internal_set_quorum(from._internal_quorum());
  }
}

void SetAccountQuorum::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.SetAccountQuorum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetAccountQuorum::CopyFrom(const SetAccountQuorum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.SetAccountQuorum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAccountQuorum::IsInitialized() const {
  return true;
}

void SetAccountQuorum::InternalSwap(SetAccountQuorum* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  account_id_.Swap(&other->account_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(quorum_, other->quorum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetAccountQuorum::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TransferAsset::_Internal {
 public:
};

TransferAsset::TransferAsset(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.TransferAsset)
}
TransferAsset::TransferAsset(const TransferAsset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  src_account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_src_account_id().empty()) {
    src_account_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_src_account_id(), 
      GetArena());
  }
  dest_account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dest_account_id().empty()) {
    dest_account_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dest_account_id(), 
      GetArena());
  }
  asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset_id().empty()) {
    asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset_id(), 
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArena());
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.TransferAsset)
}

void TransferAsset::SharedCtor() {
src_account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
dest_account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TransferAsset::~TransferAsset() {
  // @@protoc_insertion_point(destructor:iroha.protocol.TransferAsset)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransferAsset::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  src_account_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dest_account_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransferAsset::ArenaDtor(void* object) {
  TransferAsset* _this = reinterpret_cast< TransferAsset* >(object);
  (void)_this;
}
void TransferAsset::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransferAsset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransferAsset::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.TransferAsset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  src_account_id_.ClearToEmpty();
  dest_account_id_.ClearToEmpty();
  asset_id_.ClearToEmpty();
  description_.ClearToEmpty();
  amount_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferAsset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string src_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_src_account_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.TransferAsset.src_account_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string dest_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_dest_account_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.TransferAsset.dest_account_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string asset_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_asset_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.TransferAsset.asset_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.TransferAsset.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string amount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.TransferAsset.amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransferAsset::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.TransferAsset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string src_account_id = 1;
  if (this->src_account_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_src_account_id().data(), static_cast<int>(this->_internal_src_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.TransferAsset.src_account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_src_account_id(), target);
  }

  // string dest_account_id = 2;
  if (this->dest_account_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dest_account_id().data(), static_cast<int>(this->_internal_dest_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.TransferAsset.dest_account_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dest_account_id(), target);
  }

  // string asset_id = 3;
  if (this->asset_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset_id().data(), static_cast<int>(this->_internal_asset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.TransferAsset.asset_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_asset_id(), target);
  }

  // string description = 4;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.TransferAsset.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  // string amount = 5;
  if (this->amount().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount().data(), static_cast<int>(this->_internal_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.TransferAsset.amount");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.TransferAsset)
  return target;
}

size_t TransferAsset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.TransferAsset)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string src_account_id = 1;
  if (this->src_account_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_src_account_id());
  }

  // string dest_account_id = 2;
  if (this->dest_account_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dest_account_id());
  }

  // string asset_id = 3;
  if (this->asset_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset_id());
  }

  // string description = 4;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string amount = 5;
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferAsset::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.TransferAsset)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferAsset* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransferAsset>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.TransferAsset)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.TransferAsset)
    MergeFrom(*source);
  }
}

void TransferAsset::MergeFrom(const TransferAsset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.TransferAsset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.src_account_id().size() > 0) {
    _internal_set_src_account_id(from._internal_src_account_id());
  }
  if (from.dest_account_id().size() > 0) {
    _internal_set_dest_account_id(from._internal_dest_account_id());
  }
  if (from.asset_id().size() > 0) {
    _internal_set_asset_id(from._internal_asset_id());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.amount().size() > 0) {
    _internal_set_amount(from._internal_amount());
  }
}

void TransferAsset::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.TransferAsset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferAsset::CopyFrom(const TransferAsset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.TransferAsset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferAsset::IsInitialized() const {
  return true;
}

void TransferAsset::InternalSwap(TransferAsset* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  src_account_id_.Swap(&other->src_account_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dest_account_id_.Swap(&other->dest_account_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  asset_id_.Swap(&other->asset_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  amount_.Swap(&other->amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferAsset::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AppendRole::_Internal {
 public:
};

AppendRole::AppendRole(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.AppendRole)
}
AppendRole::AppendRole(const AppendRole& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account_id().empty()) {
    account_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account_id(), 
      GetArena());
  }
  role_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_role_name().empty()) {
    role_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_role_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.AppendRole)
}

void AppendRole::SharedCtor() {
account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
role_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AppendRole::~AppendRole() {
  // @@protoc_insertion_point(destructor:iroha.protocol.AppendRole)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppendRole::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  account_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  role_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppendRole::ArenaDtor(void* object) {
  AppendRole* _this = reinterpret_cast< AppendRole* >(object);
  (void)_this;
}
void AppendRole::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppendRole::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppendRole::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.AppendRole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_.ClearToEmpty();
  role_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppendRole::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.AppendRole.account_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string role_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_role_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.AppendRole.role_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppendRole::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.AppendRole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.AppendRole.account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_id(), target);
  }

  // string role_name = 2;
  if (this->role_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role_name().data(), static_cast<int>(this->_internal_role_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.AppendRole.role_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_role_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.AppendRole)
  return target;
}

size_t AppendRole::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.AppendRole)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  // string role_name = 2;
  if (this->role_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_role_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppendRole::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.AppendRole)
  GOOGLE_DCHECK_NE(&from, this);
  const AppendRole* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppendRole>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.AppendRole)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.AppendRole)
    MergeFrom(*source);
  }
}

void AppendRole::MergeFrom(const AppendRole& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.AppendRole)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account_id().size() > 0) {
    _internal_set_account_id(from._internal_account_id());
  }
  if (from.role_name().size() > 0) {
    _internal_set_role_name(from._internal_role_name());
  }
}

void AppendRole::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.AppendRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendRole::CopyFrom(const AppendRole& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.AppendRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendRole::IsInitialized() const {
  return true;
}

void AppendRole::InternalSwap(AppendRole* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  account_id_.Swap(&other->account_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  role_name_.Swap(&other->role_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendRole::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DetachRole::_Internal {
 public:
};

DetachRole::DetachRole(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.DetachRole)
}
DetachRole::DetachRole(const DetachRole& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account_id().empty()) {
    account_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account_id(), 
      GetArena());
  }
  role_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_role_name().empty()) {
    role_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_role_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.DetachRole)
}

void DetachRole::SharedCtor() {
account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
role_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DetachRole::~DetachRole() {
  // @@protoc_insertion_point(destructor:iroha.protocol.DetachRole)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DetachRole::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  account_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  role_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DetachRole::ArenaDtor(void* object) {
  DetachRole* _this = reinterpret_cast< DetachRole* >(object);
  (void)_this;
}
void DetachRole::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DetachRole::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DetachRole::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.DetachRole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_.ClearToEmpty();
  role_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetachRole::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.DetachRole.account_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string role_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_role_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.DetachRole.role_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DetachRole::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.DetachRole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.DetachRole.account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_id(), target);
  }

  // string role_name = 2;
  if (this->role_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role_name().data(), static_cast<int>(this->_internal_role_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.DetachRole.role_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_role_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.DetachRole)
  return target;
}

size_t DetachRole::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.DetachRole)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  // string role_name = 2;
  if (this->role_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_role_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetachRole::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.DetachRole)
  GOOGLE_DCHECK_NE(&from, this);
  const DetachRole* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetachRole>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.DetachRole)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.DetachRole)
    MergeFrom(*source);
  }
}

void DetachRole::MergeFrom(const DetachRole& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.DetachRole)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account_id().size() > 0) {
    _internal_set_account_id(from._internal_account_id());
  }
  if (from.role_name().size() > 0) {
    _internal_set_role_name(from._internal_role_name());
  }
}

void DetachRole::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.DetachRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetachRole::CopyFrom(const DetachRole& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.DetachRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetachRole::IsInitialized() const {
  return true;
}

void DetachRole::InternalSwap(DetachRole* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  account_id_.Swap(&other->account_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  role_name_.Swap(&other->role_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DetachRole::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CreateRole::_Internal {
 public:
};

CreateRole::CreateRole(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  permissions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.CreateRole)
}
CreateRole::CreateRole(const CreateRole& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      permissions_(from.permissions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  role_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_role_name().empty()) {
    role_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_role_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.CreateRole)
}

void CreateRole::SharedCtor() {
role_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreateRole::~CreateRole() {
  // @@protoc_insertion_point(destructor:iroha.protocol.CreateRole)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateRole::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  role_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateRole::ArenaDtor(void* object) {
  CreateRole* _this = reinterpret_cast< CreateRole* >(object);
  (void)_this;
}
void CreateRole::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateRole::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateRole::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.CreateRole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  permissions_.Clear();
  role_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateRole::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string role_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_role_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.CreateRole.role_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .iroha.protocol.RolePermission permissions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_permissions(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_permissions(static_cast<::iroha::protocol::RolePermission>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateRole::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.CreateRole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string role_name = 1;
  if (this->role_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role_name().data(), static_cast<int>(this->_internal_role_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.CreateRole.role_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_role_name(), target);
  }

  // repeated .iroha.protocol.RolePermission permissions = 2;
  {
    int byte_size = _permissions_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          2, permissions_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.CreateRole)
  return target;
}

size_t CreateRole::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.CreateRole)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iroha.protocol.RolePermission permissions = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_permissions_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_permissions(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _permissions_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string role_name = 1;
  if (this->role_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_role_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateRole::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.CreateRole)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateRole* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateRole>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.CreateRole)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.CreateRole)
    MergeFrom(*source);
  }
}

void CreateRole::MergeFrom(const CreateRole& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.CreateRole)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  permissions_.MergeFrom(from.permissions_);
  if (from.role_name().size() > 0) {
    _internal_set_role_name(from._internal_role_name());
  }
}

void CreateRole::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.CreateRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRole::CopyFrom(const CreateRole& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.CreateRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRole::IsInitialized() const {
  return true;
}

void CreateRole::InternalSwap(CreateRole* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  permissions_.InternalSwap(&other->permissions_);
  role_name_.Swap(&other->role_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateRole::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GrantPermission::_Internal {
 public:
};

GrantPermission::GrantPermission(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.GrantPermission)
}
GrantPermission::GrantPermission(const GrantPermission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account_id().empty()) {
    account_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account_id(), 
      GetArena());
  }
  permission_ = from.permission_;
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.GrantPermission)
}

void GrantPermission::SharedCtor() {
account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
permission_ = 0;
}

GrantPermission::~GrantPermission() {
  // @@protoc_insertion_point(destructor:iroha.protocol.GrantPermission)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GrantPermission::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  account_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GrantPermission::ArenaDtor(void* object) {
  GrantPermission* _this = reinterpret_cast< GrantPermission* >(object);
  (void)_this;
}
void GrantPermission::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GrantPermission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GrantPermission::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.GrantPermission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_.ClearToEmpty();
  permission_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GrantPermission::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.GrantPermission.account_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.GrantablePermission permission = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_permission(static_cast<::iroha::protocol::GrantablePermission>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GrantPermission::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.GrantPermission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.GrantPermission.account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_id(), target);
  }

  // .iroha.protocol.GrantablePermission permission = 2;
  if (this->permission() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_permission(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.GrantPermission)
  return target;
}

size_t GrantPermission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.GrantPermission)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  // .iroha.protocol.GrantablePermission permission = 2;
  if (this->permission() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_permission());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GrantPermission::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.GrantPermission)
  GOOGLE_DCHECK_NE(&from, this);
  const GrantPermission* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GrantPermission>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.GrantPermission)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.GrantPermission)
    MergeFrom(*source);
  }
}

void GrantPermission::MergeFrom(const GrantPermission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.GrantPermission)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account_id().size() > 0) {
    _internal_set_account_id(from._internal_account_id());
  }
  if (from.permission() != 0) {
    _internal_set_permission(from._internal_permission());
  }
}

void GrantPermission::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.GrantPermission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GrantPermission::CopyFrom(const GrantPermission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.GrantPermission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrantPermission::IsInitialized() const {
  return true;
}

void GrantPermission::InternalSwap(GrantPermission* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  account_id_.Swap(&other->account_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(permission_, other->permission_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GrantPermission::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RevokePermission::_Internal {
 public:
};

RevokePermission::RevokePermission(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.RevokePermission)
}
RevokePermission::RevokePermission(const RevokePermission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account_id().empty()) {
    account_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account_id(), 
      GetArena());
  }
  permission_ = from.permission_;
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.RevokePermission)
}

void RevokePermission::SharedCtor() {
account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
permission_ = 0;
}

RevokePermission::~RevokePermission() {
  // @@protoc_insertion_point(destructor:iroha.protocol.RevokePermission)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RevokePermission::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  account_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RevokePermission::ArenaDtor(void* object) {
  RevokePermission* _this = reinterpret_cast< RevokePermission* >(object);
  (void)_this;
}
void RevokePermission::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RevokePermission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RevokePermission::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.RevokePermission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_.ClearToEmpty();
  permission_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RevokePermission::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.RevokePermission.account_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.GrantablePermission permission = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_permission(static_cast<::iroha::protocol::GrantablePermission>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RevokePermission::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.RevokePermission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.RevokePermission.account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_id(), target);
  }

  // .iroha.protocol.GrantablePermission permission = 2;
  if (this->permission() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_permission(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.RevokePermission)
  return target;
}

size_t RevokePermission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.RevokePermission)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  // .iroha.protocol.GrantablePermission permission = 2;
  if (this->permission() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_permission());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RevokePermission::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.RevokePermission)
  GOOGLE_DCHECK_NE(&from, this);
  const RevokePermission* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RevokePermission>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.RevokePermission)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.RevokePermission)
    MergeFrom(*source);
  }
}

void RevokePermission::MergeFrom(const RevokePermission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.RevokePermission)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account_id().size() > 0) {
    _internal_set_account_id(from._internal_account_id());
  }
  if (from.permission() != 0) {
    _internal_set_permission(from._internal_permission());
  }
}

void RevokePermission::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.RevokePermission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RevokePermission::CopyFrom(const RevokePermission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.RevokePermission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RevokePermission::IsInitialized() const {
  return true;
}

void RevokePermission::InternalSwap(RevokePermission* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  account_id_.Swap(&other->account_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(permission_, other->permission_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RevokePermission::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubtractAssetQuantity::_Internal {
 public:
};

SubtractAssetQuantity::SubtractAssetQuantity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.SubtractAssetQuantity)
}
SubtractAssetQuantity::SubtractAssetQuantity(const SubtractAssetQuantity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset_id().empty()) {
    asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset_id(), 
      GetArena());
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.SubtractAssetQuantity)
}

void SubtractAssetQuantity::SharedCtor() {
asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SubtractAssetQuantity::~SubtractAssetQuantity() {
  // @@protoc_insertion_point(destructor:iroha.protocol.SubtractAssetQuantity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubtractAssetQuantity::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  asset_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SubtractAssetQuantity::ArenaDtor(void* object) {
  SubtractAssetQuantity* _this = reinterpret_cast< SubtractAssetQuantity* >(object);
  (void)_this;
}
void SubtractAssetQuantity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubtractAssetQuantity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubtractAssetQuantity::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.SubtractAssetQuantity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  asset_id_.ClearToEmpty();
  amount_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubtractAssetQuantity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string asset_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_asset_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.SubtractAssetQuantity.asset_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.SubtractAssetQuantity.amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubtractAssetQuantity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.SubtractAssetQuantity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string asset_id = 1;
  if (this->asset_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset_id().data(), static_cast<int>(this->_internal_asset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.SubtractAssetQuantity.asset_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_asset_id(), target);
  }

  // string amount = 2;
  if (this->amount().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount().data(), static_cast<int>(this->_internal_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.SubtractAssetQuantity.amount");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.SubtractAssetQuantity)
  return target;
}

size_t SubtractAssetQuantity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.SubtractAssetQuantity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string asset_id = 1;
  if (this->asset_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset_id());
  }

  // string amount = 2;
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubtractAssetQuantity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.SubtractAssetQuantity)
  GOOGLE_DCHECK_NE(&from, this);
  const SubtractAssetQuantity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubtractAssetQuantity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.SubtractAssetQuantity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.SubtractAssetQuantity)
    MergeFrom(*source);
  }
}

void SubtractAssetQuantity::MergeFrom(const SubtractAssetQuantity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.SubtractAssetQuantity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.asset_id().size() > 0) {
    _internal_set_asset_id(from._internal_asset_id());
  }
  if (from.amount().size() > 0) {
    _internal_set_amount(from._internal_amount());
  }
}

void SubtractAssetQuantity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.SubtractAssetQuantity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubtractAssetQuantity::CopyFrom(const SubtractAssetQuantity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.SubtractAssetQuantity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubtractAssetQuantity::IsInitialized() const {
  return true;
}

void SubtractAssetQuantity::InternalSwap(SubtractAssetQuantity* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  asset_id_.Swap(&other->asset_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  amount_.Swap(&other->amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SubtractAssetQuantity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CompareAndSetAccountDetail::_Internal {
 public:
};

CompareAndSetAccountDetail::CompareAndSetAccountDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.CompareAndSetAccountDetail)
}
CompareAndSetAccountDetail::CompareAndSetAccountDetail(const CompareAndSetAccountDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account_id().empty()) {
    account_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account_id(), 
      GetArena());
  }
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  check_empty_ = from.check_empty_;
  clear_has_opt_old_value();
  switch (from.opt_old_value_case()) {
    case kOldValue: {
      _internal_set_old_value(from._internal_old_value());
      break;
    }
    case OPT_OLD_VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.CompareAndSetAccountDetail)
}

void CompareAndSetAccountDetail::SharedCtor() {
account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
check_empty_ = false;
clear_has_opt_old_value();
}

CompareAndSetAccountDetail::~CompareAndSetAccountDetail() {
  // @@protoc_insertion_point(destructor:iroha.protocol.CompareAndSetAccountDetail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CompareAndSetAccountDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  account_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_opt_old_value()) {
    clear_opt_old_value();
  }
}

void CompareAndSetAccountDetail::ArenaDtor(void* object) {
  CompareAndSetAccountDetail* _this = reinterpret_cast< CompareAndSetAccountDetail* >(object);
  (void)_this;
}
void CompareAndSetAccountDetail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CompareAndSetAccountDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CompareAndSetAccountDetail::clear_opt_old_value() {
// @@protoc_insertion_point(one_of_clear_start:iroha.protocol.CompareAndSetAccountDetail)
  switch (opt_old_value_case()) {
    case kOldValue: {
      opt_old_value_.old_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case OPT_OLD_VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPT_OLD_VALUE_NOT_SET;
}


void CompareAndSetAccountDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.CompareAndSetAccountDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_.ClearToEmpty();
  key_.ClearToEmpty();
  value_.ClearToEmpty();
  check_empty_ = false;
  clear_opt_old_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompareAndSetAccountDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.CompareAndSetAccountDetail.account_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.CompareAndSetAccountDetail.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.CompareAndSetAccountDetail.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string old_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_old_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.CompareAndSetAccountDetail.old_value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool check_empty = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          check_empty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CompareAndSetAccountDetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.CompareAndSetAccountDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_id().data(), static_cast<int>(this->_internal_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.CompareAndSetAccountDetail.account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_id(), target);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.CompareAndSetAccountDetail.key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  // string value = 3;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.CompareAndSetAccountDetail.value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value(), target);
  }

  // string old_value = 4;
  if (_internal_has_old_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_old_value().data(), static_cast<int>(this->_internal_old_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.CompareAndSetAccountDetail.old_value");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_old_value(), target);
  }

  // bool check_empty = 5;
  if (this->check_empty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_check_empty(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.CompareAndSetAccountDetail)
  return target;
}

size_t CompareAndSetAccountDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.CompareAndSetAccountDetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_id());
  }

  // string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // bool check_empty = 5;
  if (this->check_empty() != 0) {
    total_size += 1 + 1;
  }

  switch (opt_old_value_case()) {
    // string old_value = 4;
    case kOldValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_old_value());
      break;
    }
    case OPT_OLD_VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompareAndSetAccountDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.CompareAndSetAccountDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const CompareAndSetAccountDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompareAndSetAccountDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.CompareAndSetAccountDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.CompareAndSetAccountDetail)
    MergeFrom(*source);
  }
}

void CompareAndSetAccountDetail::MergeFrom(const CompareAndSetAccountDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.CompareAndSetAccountDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account_id().size() > 0) {
    _internal_set_account_id(from._internal_account_id());
  }
  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.check_empty() != 0) {
    _internal_set_check_empty(from._internal_check_empty());
  }
  switch (from.opt_old_value_case()) {
    case kOldValue: {
      _internal_set_old_value(from._internal_old_value());
      break;
    }
    case OPT_OLD_VALUE_NOT_SET: {
      break;
    }
  }
}

void CompareAndSetAccountDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.CompareAndSetAccountDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompareAndSetAccountDetail::CopyFrom(const CompareAndSetAccountDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.CompareAndSetAccountDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompareAndSetAccountDetail::IsInitialized() const {
  return true;
}

void CompareAndSetAccountDetail::InternalSwap(CompareAndSetAccountDetail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  account_id_.Swap(&other->account_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(check_empty_, other->check_empty_);
  swap(opt_old_value_, other->opt_old_value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompareAndSetAccountDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetSettingValue::_Internal {
 public:
};

SetSettingValue::SetSettingValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.SetSettingValue)
}
SetSettingValue::SetSettingValue(const SetSettingValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.SetSettingValue)
}

void SetSettingValue::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetSettingValue::~SetSettingValue() {
  // @@protoc_insertion_point(destructor:iroha.protocol.SetSettingValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetSettingValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetSettingValue::ArenaDtor(void* object) {
  SetSettingValue* _this = reinterpret_cast< SetSettingValue* >(object);
  (void)_this;
}
void SetSettingValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetSettingValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetSettingValue::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.SetSettingValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetSettingValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.SetSettingValue.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.SetSettingValue.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetSettingValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.SetSettingValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.SetSettingValue.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.SetSettingValue.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.SetSettingValue)
  return target;
}

size_t SetSettingValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.SetSettingValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetSettingValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.SetSettingValue)
  GOOGLE_DCHECK_NE(&from, this);
  const SetSettingValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetSettingValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.SetSettingValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.SetSettingValue)
    MergeFrom(*source);
  }
}

void SetSettingValue::MergeFrom(const SetSettingValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.SetSettingValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void SetSettingValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.SetSettingValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetSettingValue::CopyFrom(const SetSettingValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.SetSettingValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetSettingValue::IsInitialized() const {
  return true;
}

void SetSettingValue::InternalSwap(SetSettingValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SetSettingValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CallEngine::_Internal {
 public:
};

CallEngine::CallEngine(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.CallEngine)
}
CallEngine::CallEngine(const CallEngine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  caller_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_caller().empty()) {
    caller_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_caller(), 
      GetArena());
  }
  input_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_input().empty()) {
    input_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_input(), 
      GetArena());
  }
  type_ = from.type_;
  clear_has_opt_callee();
  switch (from.opt_callee_case()) {
    case kCallee: {
      _internal_set_callee(from._internal_callee());
      break;
    }
    case OPT_CALLEE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.CallEngine)
}

void CallEngine::SharedCtor() {
caller_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
input_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_ = 0;
clear_has_opt_callee();
}

CallEngine::~CallEngine() {
  // @@protoc_insertion_point(destructor:iroha.protocol.CallEngine)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CallEngine::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  caller_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  input_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_opt_callee()) {
    clear_opt_callee();
  }
}

void CallEngine::ArenaDtor(void* object) {
  CallEngine* _this = reinterpret_cast< CallEngine* >(object);
  (void)_this;
}
void CallEngine::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CallEngine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CallEngine::clear_opt_callee() {
// @@protoc_insertion_point(one_of_clear_start:iroha.protocol.CallEngine)
  switch (opt_callee_case()) {
    case kCallee: {
      opt_callee_.callee_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case OPT_CALLEE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPT_CALLEE_NOT_SET;
}


void CallEngine::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.CallEngine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  caller_.ClearToEmpty();
  input_.ClearToEmpty();
  type_ = 0;
  clear_opt_callee();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CallEngine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .iroha.protocol.CallEngine.EngineType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::iroha::protocol::CallEngine_EngineType>(val));
        } else goto handle_unusual;
        continue;
      // string caller = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_caller();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.CallEngine.caller"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string callee = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_callee();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.CallEngine.callee"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string input = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_input();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.CallEngine.input"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CallEngine::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.CallEngine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .iroha.protocol.CallEngine.EngineType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string caller = 2;
  if (this->caller().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_caller().data(), static_cast<int>(this->_internal_caller().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.CallEngine.caller");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_caller(), target);
  }

  // string callee = 3;
  if (_internal_has_callee()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_callee().data(), static_cast<int>(this->_internal_callee().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.CallEngine.callee");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_callee(), target);
  }

  // string input = 4;
  if (this->input().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_input().data(), static_cast<int>(this->_internal_input().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.CallEngine.input");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_input(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.CallEngine)
  return target;
}

size_t CallEngine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.CallEngine)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string caller = 2;
  if (this->caller().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_caller());
  }

  // string input = 4;
  if (this->input().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_input());
  }

  // .iroha.protocol.CallEngine.EngineType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (opt_callee_case()) {
    // string callee = 3;
    case kCallee: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_callee());
      break;
    }
    case OPT_CALLEE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallEngine::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.CallEngine)
  GOOGLE_DCHECK_NE(&from, this);
  const CallEngine* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CallEngine>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.CallEngine)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.CallEngine)
    MergeFrom(*source);
  }
}

void CallEngine::MergeFrom(const CallEngine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.CallEngine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.caller().size() > 0) {
    _internal_set_caller(from._internal_caller());
  }
  if (from.input().size() > 0) {
    _internal_set_input(from._internal_input());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  switch (from.opt_callee_case()) {
    case kCallee: {
      _internal_set_callee(from._internal_callee());
      break;
    }
    case OPT_CALLEE_NOT_SET: {
      break;
    }
  }
}

void CallEngine::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.CallEngine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CallEngine::CopyFrom(const CallEngine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.CallEngine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallEngine::IsInitialized() const {
  return true;
}

void CallEngine::InternalSwap(CallEngine* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  caller_.Swap(&other->caller_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  input_.Swap(&other->input_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
  swap(opt_callee_, other->opt_callee_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CallEngine::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Command::_Internal {
 public:
  static const ::iroha::protocol::AddAssetQuantity& add_asset_quantity(const Command* msg);
  static const ::iroha::protocol::AddPeer& add_peer(const Command* msg);
  static const ::iroha::protocol::AddSignatory& add_signatory(const Command* msg);
  static const ::iroha::protocol::AppendRole& append_role(const Command* msg);
  static const ::iroha::protocol::CreateAccount& create_account(const Command* msg);
  static const ::iroha::protocol::CreateAsset& create_asset(const Command* msg);
  static const ::iroha::protocol::CreateDomain& create_domain(const Command* msg);
  static const ::iroha::protocol::CreateRole& create_role(const Command* msg);
  static const ::iroha::protocol::DetachRole& detach_role(const Command* msg);
  static const ::iroha::protocol::GrantPermission& grant_permission(const Command* msg);
  static const ::iroha::protocol::RemoveSignatory& remove_signatory(const Command* msg);
  static const ::iroha::protocol::RevokePermission& revoke_permission(const Command* msg);
  static const ::iroha::protocol::SetAccountDetail& set_account_detail(const Command* msg);
  static const ::iroha::protocol::SetAccountQuorum& set_account_quorum(const Command* msg);
  static const ::iroha::protocol::SubtractAssetQuantity& subtract_asset_quantity(const Command* msg);
  static const ::iroha::protocol::TransferAsset& transfer_asset(const Command* msg);
  static const ::iroha::protocol::RemovePeer& remove_peer(const Command* msg);
  static const ::iroha::protocol::CompareAndSetAccountDetail& compare_and_set_account_detail(const Command* msg);
  static const ::iroha::protocol::SetSettingValue& set_setting_value(const Command* msg);
  static const ::iroha::protocol::CallEngine& call_engine(const Command* msg);
};

const ::iroha::protocol::AddAssetQuantity&
Command::_Internal::add_asset_quantity(const Command* msg) {
  return *msg->command_.add_asset_quantity_;
}
const ::iroha::protocol::AddPeer&
Command::_Internal::add_peer(const Command* msg) {
  return *msg->command_.add_peer_;
}
const ::iroha::protocol::AddSignatory&
Command::_Internal::add_signatory(const Command* msg) {
  return *msg->command_.add_signatory_;
}
const ::iroha::protocol::AppendRole&
Command::_Internal::append_role(const Command* msg) {
  return *msg->command_.append_role_;
}
const ::iroha::protocol::CreateAccount&
Command::_Internal::create_account(const Command* msg) {
  return *msg->command_.create_account_;
}
const ::iroha::protocol::CreateAsset&
Command::_Internal::create_asset(const Command* msg) {
  return *msg->command_.create_asset_;
}
const ::iroha::protocol::CreateDomain&
Command::_Internal::create_domain(const Command* msg) {
  return *msg->command_.create_domain_;
}
const ::iroha::protocol::CreateRole&
Command::_Internal::create_role(const Command* msg) {
  return *msg->command_.create_role_;
}
const ::iroha::protocol::DetachRole&
Command::_Internal::detach_role(const Command* msg) {
  return *msg->command_.detach_role_;
}
const ::iroha::protocol::GrantPermission&
Command::_Internal::grant_permission(const Command* msg) {
  return *msg->command_.grant_permission_;
}
const ::iroha::protocol::RemoveSignatory&
Command::_Internal::remove_signatory(const Command* msg) {
  return *msg->command_.remove_signatory_;
}
const ::iroha::protocol::RevokePermission&
Command::_Internal::revoke_permission(const Command* msg) {
  return *msg->command_.revoke_permission_;
}
const ::iroha::protocol::SetAccountDetail&
Command::_Internal::set_account_detail(const Command* msg) {
  return *msg->command_.set_account_detail_;
}
const ::iroha::protocol::SetAccountQuorum&
Command::_Internal::set_account_quorum(const Command* msg) {
  return *msg->command_.set_account_quorum_;
}
const ::iroha::protocol::SubtractAssetQuantity&
Command::_Internal::subtract_asset_quantity(const Command* msg) {
  return *msg->command_.subtract_asset_quantity_;
}
const ::iroha::protocol::TransferAsset&
Command::_Internal::transfer_asset(const Command* msg) {
  return *msg->command_.transfer_asset_;
}
const ::iroha::protocol::RemovePeer&
Command::_Internal::remove_peer(const Command* msg) {
  return *msg->command_.remove_peer_;
}
const ::iroha::protocol::CompareAndSetAccountDetail&
Command::_Internal::compare_and_set_account_detail(const Command* msg) {
  return *msg->command_.compare_and_set_account_detail_;
}
const ::iroha::protocol::SetSettingValue&
Command::_Internal::set_setting_value(const Command* msg) {
  return *msg->command_.set_setting_value_;
}
const ::iroha::protocol::CallEngine&
Command::_Internal::call_engine(const Command* msg) {
  return *msg->command_.call_engine_;
}
void Command::set_allocated_add_asset_quantity(::iroha::protocol::AddAssetQuantity* add_asset_quantity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_command();
  if (add_asset_quantity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(add_asset_quantity);
    if (message_arena != submessage_arena) {
      add_asset_quantity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_asset_quantity, submessage_arena);
    }
    set_has_add_asset_quantity();
    command_.add_asset_quantity_ = add_asset_quantity;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Command.add_asset_quantity)
}
void Command::set_allocated_add_peer(::iroha::protocol::AddPeer* add_peer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_command();
  if (add_peer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(add_peer);
    if (message_arena != submessage_arena) {
      add_peer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_peer, submessage_arena);
    }
    set_has_add_peer();
    command_.add_peer_ = add_peer;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Command.add_peer)
}
void Command::set_allocated_add_signatory(::iroha::protocol::AddSignatory* add_signatory) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_command();
  if (add_signatory) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(add_signatory);
    if (message_arena != submessage_arena) {
      add_signatory = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_signatory, submessage_arena);
    }
    set_has_add_signatory();
    command_.add_signatory_ = add_signatory;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Command.add_signatory)
}
void Command::set_allocated_append_role(::iroha::protocol::AppendRole* append_role) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_command();
  if (append_role) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(append_role);
    if (message_arena != submessage_arena) {
      append_role = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, append_role, submessage_arena);
    }
    set_has_append_role();
    command_.append_role_ = append_role;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Command.append_role)
}
void Command::set_allocated_create_account(::iroha::protocol::CreateAccount* create_account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_command();
  if (create_account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(create_account);
    if (message_arena != submessage_arena) {
      create_account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_account, submessage_arena);
    }
    set_has_create_account();
    command_.create_account_ = create_account;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Command.create_account)
}
void Command::set_allocated_create_asset(::iroha::protocol::CreateAsset* create_asset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_command();
  if (create_asset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(create_asset);
    if (message_arena != submessage_arena) {
      create_asset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_asset, submessage_arena);
    }
    set_has_create_asset();
    command_.create_asset_ = create_asset;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Command.create_asset)
}
void Command::set_allocated_create_domain(::iroha::protocol::CreateDomain* create_domain) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_command();
  if (create_domain) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(create_domain);
    if (message_arena != submessage_arena) {
      create_domain = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_domain, submessage_arena);
    }
    set_has_create_domain();
    command_.create_domain_ = create_domain;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Command.create_domain)
}
void Command::set_allocated_create_role(::iroha::protocol::CreateRole* create_role) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_command();
  if (create_role) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(create_role);
    if (message_arena != submessage_arena) {
      create_role = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_role, submessage_arena);
    }
    set_has_create_role();
    command_.create_role_ = create_role;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Command.create_role)
}
void Command::set_allocated_detach_role(::iroha::protocol::DetachRole* detach_role) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_command();
  if (detach_role) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(detach_role);
    if (message_arena != submessage_arena) {
      detach_role = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detach_role, submessage_arena);
    }
    set_has_detach_role();
    command_.detach_role_ = detach_role;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Command.detach_role)
}
void Command::set_allocated_grant_permission(::iroha::protocol::GrantPermission* grant_permission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_command();
  if (grant_permission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(grant_permission);
    if (message_arena != submessage_arena) {
      grant_permission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, grant_permission, submessage_arena);
    }
    set_has_grant_permission();
    command_.grant_permission_ = grant_permission;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Command.grant_permission)
}
void Command::set_allocated_remove_signatory(::iroha::protocol::RemoveSignatory* remove_signatory) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_command();
  if (remove_signatory) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(remove_signatory);
    if (message_arena != submessage_arena) {
      remove_signatory = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remove_signatory, submessage_arena);
    }
    set_has_remove_signatory();
    command_.remove_signatory_ = remove_signatory;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Command.remove_signatory)
}
void Command::set_allocated_revoke_permission(::iroha::protocol::RevokePermission* revoke_permission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_command();
  if (revoke_permission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(revoke_permission);
    if (message_arena != submessage_arena) {
      revoke_permission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, revoke_permission, submessage_arena);
    }
    set_has_revoke_permission();
    command_.revoke_permission_ = revoke_permission;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Command.revoke_permission)
}
void Command::set_allocated_set_account_detail(::iroha::protocol::SetAccountDetail* set_account_detail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_command();
  if (set_account_detail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(set_account_detail);
    if (message_arena != submessage_arena) {
      set_account_detail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_account_detail, submessage_arena);
    }
    set_has_set_account_detail();
    command_.set_account_detail_ = set_account_detail;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Command.set_account_detail)
}
void Command::set_allocated_set_account_quorum(::iroha::protocol::SetAccountQuorum* set_account_quorum) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_command();
  if (set_account_quorum) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(set_account_quorum);
    if (message_arena != submessage_arena) {
      set_account_quorum = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_account_quorum, submessage_arena);
    }
    set_has_set_account_quorum();
    command_.set_account_quorum_ = set_account_quorum;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Command.set_account_quorum)
}
void Command::set_allocated_subtract_asset_quantity(::iroha::protocol::SubtractAssetQuantity* subtract_asset_quantity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_command();
  if (subtract_asset_quantity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(subtract_asset_quantity);
    if (message_arena != submessage_arena) {
      subtract_asset_quantity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subtract_asset_quantity, submessage_arena);
    }
    set_has_subtract_asset_quantity();
    command_.subtract_asset_quantity_ = subtract_asset_quantity;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Command.subtract_asset_quantity)
}
void Command::set_allocated_transfer_asset(::iroha::protocol::TransferAsset* transfer_asset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_command();
  if (transfer_asset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transfer_asset);
    if (message_arena != submessage_arena) {
      transfer_asset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transfer_asset, submessage_arena);
    }
    set_has_transfer_asset();
    command_.transfer_asset_ = transfer_asset;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Command.transfer_asset)
}
void Command::set_allocated_remove_peer(::iroha::protocol::RemovePeer* remove_peer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_command();
  if (remove_peer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(remove_peer);
    if (message_arena != submessage_arena) {
      remove_peer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remove_peer, submessage_arena);
    }
    set_has_remove_peer();
    command_.remove_peer_ = remove_peer;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Command.remove_peer)
}
void Command::set_allocated_compare_and_set_account_detail(::iroha::protocol::CompareAndSetAccountDetail* compare_and_set_account_detail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_command();
  if (compare_and_set_account_detail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(compare_and_set_account_detail);
    if (message_arena != submessage_arena) {
      compare_and_set_account_detail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, compare_and_set_account_detail, submessage_arena);
    }
    set_has_compare_and_set_account_detail();
    command_.compare_and_set_account_detail_ = compare_and_set_account_detail;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Command.compare_and_set_account_detail)
}
void Command::set_allocated_set_setting_value(::iroha::protocol::SetSettingValue* set_setting_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_command();
  if (set_setting_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(set_setting_value);
    if (message_arena != submessage_arena) {
      set_setting_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_setting_value, submessage_arena);
    }
    set_has_set_setting_value();
    command_.set_setting_value_ = set_setting_value;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Command.set_setting_value)
}
void Command::set_allocated_call_engine(::iroha::protocol::CallEngine* call_engine) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_command();
  if (call_engine) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(call_engine);
    if (message_arena != submessage_arena) {
      call_engine = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call_engine, submessage_arena);
    }
    set_has_call_engine();
    command_.call_engine_ = call_engine;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Command.call_engine)
}
Command::Command(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.Command)
}
Command::Command(const Command& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_command();
  switch (from.command_case()) {
    case kAddAssetQuantity: {
      _internal_mutable_add_asset_quantity()->::iroha::protocol::AddAssetQuantity::MergeFrom(from._internal_add_asset_quantity());
      break;
    }
    case kAddPeer: {
      _internal_mutable_add_peer()->::iroha::protocol::AddPeer::MergeFrom(from._internal_add_peer());
      break;
    }
    case kAddSignatory: {
      _internal_mutable_add_signatory()->::iroha::protocol::AddSignatory::MergeFrom(from._internal_add_signatory());
      break;
    }
    case kAppendRole: {
      _internal_mutable_append_role()->::iroha::protocol::AppendRole::MergeFrom(from._internal_append_role());
      break;
    }
    case kCreateAccount: {
      _internal_mutable_create_account()->::iroha::protocol::CreateAccount::MergeFrom(from._internal_create_account());
      break;
    }
    case kCreateAsset: {
      _internal_mutable_create_asset()->::iroha::protocol::CreateAsset::MergeFrom(from._internal_create_asset());
      break;
    }
    case kCreateDomain: {
      _internal_mutable_create_domain()->::iroha::protocol::CreateDomain::MergeFrom(from._internal_create_domain());
      break;
    }
    case kCreateRole: {
      _internal_mutable_create_role()->::iroha::protocol::CreateRole::MergeFrom(from._internal_create_role());
      break;
    }
    case kDetachRole: {
      _internal_mutable_detach_role()->::iroha::protocol::DetachRole::MergeFrom(from._internal_detach_role());
      break;
    }
    case kGrantPermission: {
      _internal_mutable_grant_permission()->::iroha::protocol::GrantPermission::MergeFrom(from._internal_grant_permission());
      break;
    }
    case kRemoveSignatory: {
      _internal_mutable_remove_signatory()->::iroha::protocol::RemoveSignatory::MergeFrom(from._internal_remove_signatory());
      break;
    }
    case kRevokePermission: {
      _internal_mutable_revoke_permission()->::iroha::protocol::RevokePermission::MergeFrom(from._internal_revoke_permission());
      break;
    }
    case kSetAccountDetail: {
      _internal_mutable_set_account_detail()->::iroha::protocol::SetAccountDetail::MergeFrom(from._internal_set_account_detail());
      break;
    }
    case kSetAccountQuorum: {
      _internal_mutable_set_account_quorum()->::iroha::protocol::SetAccountQuorum::MergeFrom(from._internal_set_account_quorum());
      break;
    }
    case kSubtractAssetQuantity: {
      _internal_mutable_subtract_asset_quantity()->::iroha::protocol::SubtractAssetQuantity::MergeFrom(from._internal_subtract_asset_quantity());
      break;
    }
    case kTransferAsset: {
      _internal_mutable_transfer_asset()->::iroha::protocol::TransferAsset::MergeFrom(from._internal_transfer_asset());
      break;
    }
    case kRemovePeer: {
      _internal_mutable_remove_peer()->::iroha::protocol::RemovePeer::MergeFrom(from._internal_remove_peer());
      break;
    }
    case kCompareAndSetAccountDetail: {
      _internal_mutable_compare_and_set_account_detail()->::iroha::protocol::CompareAndSetAccountDetail::MergeFrom(from._internal_compare_and_set_account_detail());
      break;
    }
    case kSetSettingValue: {
      _internal_mutable_set_setting_value()->::iroha::protocol::SetSettingValue::MergeFrom(from._internal_set_setting_value());
      break;
    }
    case kCallEngine: {
      _internal_mutable_call_engine()->::iroha::protocol::CallEngine::MergeFrom(from._internal_call_engine());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.Command)
}

void Command::SharedCtor() {
clear_has_command();
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:iroha.protocol.Command)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Command::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_command()) {
    clear_command();
  }
}

void Command::ArenaDtor(void* object) {
  Command* _this = reinterpret_cast< Command* >(object);
  (void)_this;
}
void Command::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Command::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Command::clear_command() {
// @@protoc_insertion_point(one_of_clear_start:iroha.protocol.Command)
  switch (command_case()) {
    case kAddAssetQuantity: {
      if (GetArena() == nullptr) {
        delete command_.add_asset_quantity_;
      }
      break;
    }
    case kAddPeer: {
      if (GetArena() == nullptr) {
        delete command_.add_peer_;
      }
      break;
    }
    case kAddSignatory: {
      if (GetArena() == nullptr) {
        delete command_.add_signatory_;
      }
      break;
    }
    case kAppendRole: {
      if (GetArena() == nullptr) {
        delete command_.append_role_;
      }
      break;
    }
    case kCreateAccount: {
      if (GetArena() == nullptr) {
        delete command_.create_account_;
      }
      break;
    }
    case kCreateAsset: {
      if (GetArena() == nullptr) {
        delete command_.create_asset_;
      }
      break;
    }
    case kCreateDomain: {
      if (GetArena() == nullptr) {
        delete command_.create_domain_;
      }
      break;
    }
    case kCreateRole: {
      if (GetArena() == nullptr) {
        delete command_.create_role_;
      }
      break;
    }
    case kDetachRole: {
      if (GetArena() == nullptr) {
        delete command_.detach_role_;
      }
      break;
    }
    case kGrantPermission: {
      if (GetArena() == nullptr) {
        delete command_.grant_permission_;
      }
      break;
    }
    case kRemoveSignatory: {
      if (GetArena() == nullptr) {
        delete command_.remove_signatory_;
      }
      break;
    }
    case kRevokePermission: {
      if (GetArena() == nullptr) {
        delete command_.revoke_permission_;
      }
      break;
    }
    case kSetAccountDetail: {
      if (GetArena() == nullptr) {
        delete command_.set_account_detail_;
      }
      break;
    }
    case kSetAccountQuorum: {
      if (GetArena() == nullptr) {
        delete command_.set_account_quorum_;
      }
      break;
    }
    case kSubtractAssetQuantity: {
      if (GetArena() == nullptr) {
        delete command_.subtract_asset_quantity_;
      }
      break;
    }
    case kTransferAsset: {
      if (GetArena() == nullptr) {
        delete command_.transfer_asset_;
      }
      break;
    }
    case kRemovePeer: {
      if (GetArena() == nullptr) {
        delete command_.remove_peer_;
      }
      break;
    }
    case kCompareAndSetAccountDetail: {
      if (GetArena() == nullptr) {
        delete command_.compare_and_set_account_detail_;
      }
      break;
    }
    case kSetSettingValue: {
      if (GetArena() == nullptr) {
        delete command_.set_setting_value_;
      }
      break;
    }
    case kCallEngine: {
      if (GetArena() == nullptr) {
        delete command_.call_engine_;
      }
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COMMAND_NOT_SET;
}


void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.Command)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_command();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .iroha.protocol.AddAssetQuantity add_asset_quantity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_asset_quantity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.AddPeer add_peer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_peer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.AddSignatory add_signatory = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_signatory(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.AppendRole append_role = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_append_role(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.CreateAccount create_account = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.CreateAsset create_asset = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_asset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.CreateDomain create_domain = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_domain(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.CreateRole create_role = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_role(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.DetachRole detach_role = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_detach_role(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.GrantPermission grant_permission = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_grant_permission(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.RemoveSignatory remove_signatory = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_remove_signatory(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.RevokePermission revoke_permission = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_revoke_permission(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.SetAccountDetail set_account_detail = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_account_detail(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.SetAccountQuorum set_account_quorum = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_account_quorum(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.SubtractAssetQuantity subtract_asset_quantity = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_subtract_asset_quantity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.TransferAsset transfer_asset = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_transfer_asset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.RemovePeer remove_peer = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_remove_peer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.CompareAndSetAccountDetail compare_and_set_account_detail = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_compare_and_set_account_detail(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.SetSettingValue set_setting_value = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_setting_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.CallEngine call_engine = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_call_engine(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Command::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.Command)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .iroha.protocol.AddAssetQuantity add_asset_quantity = 1;
  if (_internal_has_add_asset_quantity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::add_asset_quantity(this), target, stream);
  }

  // .iroha.protocol.AddPeer add_peer = 2;
  if (_internal_has_add_peer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::add_peer(this), target, stream);
  }

  // .iroha.protocol.AddSignatory add_signatory = 3;
  if (_internal_has_add_signatory()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::add_signatory(this), target, stream);
  }

  // .iroha.protocol.AppendRole append_role = 4;
  if (_internal_has_append_role()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::append_role(this), target, stream);
  }

  // .iroha.protocol.CreateAccount create_account = 5;
  if (_internal_has_create_account()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::create_account(this), target, stream);
  }

  // .iroha.protocol.CreateAsset create_asset = 6;
  if (_internal_has_create_asset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::create_asset(this), target, stream);
  }

  // .iroha.protocol.CreateDomain create_domain = 7;
  if (_internal_has_create_domain()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::create_domain(this), target, stream);
  }

  // .iroha.protocol.CreateRole create_role = 8;
  if (_internal_has_create_role()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::create_role(this), target, stream);
  }

  // .iroha.protocol.DetachRole detach_role = 9;
  if (_internal_has_detach_role()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::detach_role(this), target, stream);
  }

  // .iroha.protocol.GrantPermission grant_permission = 10;
  if (_internal_has_grant_permission()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::grant_permission(this), target, stream);
  }

  // .iroha.protocol.RemoveSignatory remove_signatory = 11;
  if (_internal_has_remove_signatory()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::remove_signatory(this), target, stream);
  }

  // .iroha.protocol.RevokePermission revoke_permission = 12;
  if (_internal_has_revoke_permission()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::revoke_permission(this), target, stream);
  }

  // .iroha.protocol.SetAccountDetail set_account_detail = 13;
  if (_internal_has_set_account_detail()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::set_account_detail(this), target, stream);
  }

  // .iroha.protocol.SetAccountQuorum set_account_quorum = 14;
  if (_internal_has_set_account_quorum()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::set_account_quorum(this), target, stream);
  }

  // .iroha.protocol.SubtractAssetQuantity subtract_asset_quantity = 15;
  if (_internal_has_subtract_asset_quantity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::subtract_asset_quantity(this), target, stream);
  }

  // .iroha.protocol.TransferAsset transfer_asset = 16;
  if (_internal_has_transfer_asset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::transfer_asset(this), target, stream);
  }

  // .iroha.protocol.RemovePeer remove_peer = 17;
  if (_internal_has_remove_peer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::remove_peer(this), target, stream);
  }

  // .iroha.protocol.CompareAndSetAccountDetail compare_and_set_account_detail = 18;
  if (_internal_has_compare_and_set_account_detail()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::compare_and_set_account_detail(this), target, stream);
  }

  // .iroha.protocol.SetSettingValue set_setting_value = 19;
  if (_internal_has_set_setting_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::set_setting_value(this), target, stream);
  }

  // .iroha.protocol.CallEngine call_engine = 20;
  if (_internal_has_call_engine()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::call_engine(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.Command)
  return target;
}

size_t Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.Command)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (command_case()) {
    // .iroha.protocol.AddAssetQuantity add_asset_quantity = 1;
    case kAddAssetQuantity: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.add_asset_quantity_);
      break;
    }
    // .iroha.protocol.AddPeer add_peer = 2;
    case kAddPeer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.add_peer_);
      break;
    }
    // .iroha.protocol.AddSignatory add_signatory = 3;
    case kAddSignatory: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.add_signatory_);
      break;
    }
    // .iroha.protocol.AppendRole append_role = 4;
    case kAppendRole: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.append_role_);
      break;
    }
    // .iroha.protocol.CreateAccount create_account = 5;
    case kCreateAccount: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.create_account_);
      break;
    }
    // .iroha.protocol.CreateAsset create_asset = 6;
    case kCreateAsset: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.create_asset_);
      break;
    }
    // .iroha.protocol.CreateDomain create_domain = 7;
    case kCreateDomain: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.create_domain_);
      break;
    }
    // .iroha.protocol.CreateRole create_role = 8;
    case kCreateRole: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.create_role_);
      break;
    }
    // .iroha.protocol.DetachRole detach_role = 9;
    case kDetachRole: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.detach_role_);
      break;
    }
    // .iroha.protocol.GrantPermission grant_permission = 10;
    case kGrantPermission: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.grant_permission_);
      break;
    }
    // .iroha.protocol.RemoveSignatory remove_signatory = 11;
    case kRemoveSignatory: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.remove_signatory_);
      break;
    }
    // .iroha.protocol.RevokePermission revoke_permission = 12;
    case kRevokePermission: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.revoke_permission_);
      break;
    }
    // .iroha.protocol.SetAccountDetail set_account_detail = 13;
    case kSetAccountDetail: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.set_account_detail_);
      break;
    }
    // .iroha.protocol.SetAccountQuorum set_account_quorum = 14;
    case kSetAccountQuorum: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.set_account_quorum_);
      break;
    }
    // .iroha.protocol.SubtractAssetQuantity subtract_asset_quantity = 15;
    case kSubtractAssetQuantity: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.subtract_asset_quantity_);
      break;
    }
    // .iroha.protocol.TransferAsset transfer_asset = 16;
    case kTransferAsset: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.transfer_asset_);
      break;
    }
    // .iroha.protocol.RemovePeer remove_peer = 17;
    case kRemovePeer: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.remove_peer_);
      break;
    }
    // .iroha.protocol.CompareAndSetAccountDetail compare_and_set_account_detail = 18;
    case kCompareAndSetAccountDetail: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.compare_and_set_account_detail_);
      break;
    }
    // .iroha.protocol.SetSettingValue set_setting_value = 19;
    case kSetSettingValue: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.set_setting_value_);
      break;
    }
    // .iroha.protocol.CallEngine call_engine = 20;
    case kCallEngine: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.call_engine_);
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Command::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.Command)
  GOOGLE_DCHECK_NE(&from, this);
  const Command* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Command>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.Command)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.Command)
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.Command)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.command_case()) {
    case kAddAssetQuantity: {
      _internal_mutable_add_asset_quantity()->::iroha::protocol::AddAssetQuantity::MergeFrom(from._internal_add_asset_quantity());
      break;
    }
    case kAddPeer: {
      _internal_mutable_add_peer()->::iroha::protocol::AddPeer::MergeFrom(from._internal_add_peer());
      break;
    }
    case kAddSignatory: {
      _internal_mutable_add_signatory()->::iroha::protocol::AddSignatory::MergeFrom(from._internal_add_signatory());
      break;
    }
    case kAppendRole: {
      _internal_mutable_append_role()->::iroha::protocol::AppendRole::MergeFrom(from._internal_append_role());
      break;
    }
    case kCreateAccount: {
      _internal_mutable_create_account()->::iroha::protocol::CreateAccount::MergeFrom(from._internal_create_account());
      break;
    }
    case kCreateAsset: {
      _internal_mutable_create_asset()->::iroha::protocol::CreateAsset::MergeFrom(from._internal_create_asset());
      break;
    }
    case kCreateDomain: {
      _internal_mutable_create_domain()->::iroha::protocol::CreateDomain::MergeFrom(from._internal_create_domain());
      break;
    }
    case kCreateRole: {
      _internal_mutable_create_role()->::iroha::protocol::CreateRole::MergeFrom(from._internal_create_role());
      break;
    }
    case kDetachRole: {
      _internal_mutable_detach_role()->::iroha::protocol::DetachRole::MergeFrom(from._internal_detach_role());
      break;
    }
    case kGrantPermission: {
      _internal_mutable_grant_permission()->::iroha::protocol::GrantPermission::MergeFrom(from._internal_grant_permission());
      break;
    }
    case kRemoveSignatory: {
      _internal_mutable_remove_signatory()->::iroha::protocol::RemoveSignatory::MergeFrom(from._internal_remove_signatory());
      break;
    }
    case kRevokePermission: {
      _internal_mutable_revoke_permission()->::iroha::protocol::RevokePermission::MergeFrom(from._internal_revoke_permission());
      break;
    }
    case kSetAccountDetail: {
      _internal_mutable_set_account_detail()->::iroha::protocol::SetAccountDetail::MergeFrom(from._internal_set_account_detail());
      break;
    }
    case kSetAccountQuorum: {
      _internal_mutable_set_account_quorum()->::iroha::protocol::SetAccountQuorum::MergeFrom(from._internal_set_account_quorum());
      break;
    }
    case kSubtractAssetQuantity: {
      _internal_mutable_subtract_asset_quantity()->::iroha::protocol::SubtractAssetQuantity::MergeFrom(from._internal_subtract_asset_quantity());
      break;
    }
    case kTransferAsset: {
      _internal_mutable_transfer_asset()->::iroha::protocol::TransferAsset::MergeFrom(from._internal_transfer_asset());
      break;
    }
    case kRemovePeer: {
      _internal_mutable_remove_peer()->::iroha::protocol::RemovePeer::MergeFrom(from._internal_remove_peer());
      break;
    }
    case kCompareAndSetAccountDetail: {
      _internal_mutable_compare_and_set_account_detail()->::iroha::protocol::CompareAndSetAccountDetail::MergeFrom(from._internal_compare_and_set_account_detail());
      break;
    }
    case kSetSettingValue: {
      _internal_mutable_set_setting_value()->::iroha::protocol::SetSettingValue::MergeFrom(from._internal_set_setting_value());
      break;
    }
    case kCallEngine: {
      _internal_mutable_call_engine()->::iroha::protocol::CallEngine::MergeFrom(from._internal_call_engine());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
}

void Command::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  return true;
}

void Command::InternalSwap(Command* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(command_, other->command_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Command::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
}  // namespace iroha
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::iroha::protocol::AddAssetQuantity* Arena::CreateMaybeMessage< ::iroha::protocol::AddAssetQuantity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::AddAssetQuantity >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::AddPeer* Arena::CreateMaybeMessage< ::iroha::protocol::AddPeer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::AddPeer >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::RemovePeer* Arena::CreateMaybeMessage< ::iroha::protocol::RemovePeer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::RemovePeer >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::AddSignatory* Arena::CreateMaybeMessage< ::iroha::protocol::AddSignatory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::AddSignatory >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::CreateAsset* Arena::CreateMaybeMessage< ::iroha::protocol::CreateAsset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::CreateAsset >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::CreateAccount* Arena::CreateMaybeMessage< ::iroha::protocol::CreateAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::CreateAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::SetAccountDetail* Arena::CreateMaybeMessage< ::iroha::protocol::SetAccountDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::SetAccountDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::CreateDomain* Arena::CreateMaybeMessage< ::iroha::protocol::CreateDomain >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::CreateDomain >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::RemoveSignatory* Arena::CreateMaybeMessage< ::iroha::protocol::RemoveSignatory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::RemoveSignatory >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::SetAccountQuorum* Arena::CreateMaybeMessage< ::iroha::protocol::SetAccountQuorum >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::SetAccountQuorum >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::TransferAsset* Arena::CreateMaybeMessage< ::iroha::protocol::TransferAsset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::TransferAsset >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::AppendRole* Arena::CreateMaybeMessage< ::iroha::protocol::AppendRole >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::AppendRole >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::DetachRole* Arena::CreateMaybeMessage< ::iroha::protocol::DetachRole >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::DetachRole >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::CreateRole* Arena::CreateMaybeMessage< ::iroha::protocol::CreateRole >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::CreateRole >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::GrantPermission* Arena::CreateMaybeMessage< ::iroha::protocol::GrantPermission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::GrantPermission >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::RevokePermission* Arena::CreateMaybeMessage< ::iroha::protocol::RevokePermission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::RevokePermission >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::SubtractAssetQuantity* Arena::CreateMaybeMessage< ::iroha::protocol::SubtractAssetQuantity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::SubtractAssetQuantity >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::CompareAndSetAccountDetail* Arena::CreateMaybeMessage< ::iroha::protocol::CompareAndSetAccountDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::CompareAndSetAccountDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::SetSettingValue* Arena::CreateMaybeMessage< ::iroha::protocol::SetSettingValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::SetSettingValue >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::CallEngine* Arena::CreateMaybeMessage< ::iroha::protocol::CallEngine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::CallEngine >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::Command* Arena::CreateMaybeMessage< ::iroha::protocol::Command >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::Command >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
