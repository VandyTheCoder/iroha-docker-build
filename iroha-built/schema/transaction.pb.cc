// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transaction.proto

#include "transaction.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace iroha {
namespace protocol {
constexpr Transaction_Payload_BatchMeta::Transaction_Payload_BatchMeta(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reduced_hashes_()
  , type_(0)
{}
struct Transaction_Payload_BatchMetaDefaultTypeInternal {
  constexpr Transaction_Payload_BatchMetaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Transaction_Payload_BatchMetaDefaultTypeInternal() {}
  union {
    Transaction_Payload_BatchMeta _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Transaction_Payload_BatchMetaDefaultTypeInternal _Transaction_Payload_BatchMeta_default_instance_;
constexpr Transaction_Payload_ReducedPayload::Transaction_Payload_ReducedPayload(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : commands_()
  , creator_account_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , created_time_(PROTOBUF_ULONGLONG(0))
  , quorum_(0u){}
struct Transaction_Payload_ReducedPayloadDefaultTypeInternal {
  constexpr Transaction_Payload_ReducedPayloadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Transaction_Payload_ReducedPayloadDefaultTypeInternal() {}
  union {
    Transaction_Payload_ReducedPayload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Transaction_Payload_ReducedPayloadDefaultTypeInternal _Transaction_Payload_ReducedPayload_default_instance_;
constexpr Transaction_Payload::Transaction_Payload(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reduced_payload_(nullptr)
  , _oneof_case_{}{}
struct Transaction_PayloadDefaultTypeInternal {
  constexpr Transaction_PayloadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Transaction_PayloadDefaultTypeInternal() {}
  union {
    Transaction_Payload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Transaction_PayloadDefaultTypeInternal _Transaction_Payload_default_instance_;
constexpr Transaction::Transaction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signatures_()
  , payload_(nullptr){}
struct TransactionDefaultTypeInternal {
  constexpr TransactionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionDefaultTypeInternal() {}
  union {
    Transaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionDefaultTypeInternal _Transaction_default_instance_;
}  // namespace protocol
}  // namespace iroha
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_transaction_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_transaction_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_transaction_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_transaction_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Transaction_Payload_BatchMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Transaction_Payload_BatchMeta, type_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Transaction_Payload_BatchMeta, reduced_hashes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Transaction_Payload_ReducedPayload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Transaction_Payload_ReducedPayload, commands_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Transaction_Payload_ReducedPayload, creator_account_id_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Transaction_Payload_ReducedPayload, created_time_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Transaction_Payload_ReducedPayload, quorum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Transaction_Payload, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Transaction_Payload, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Transaction_Payload, reduced_payload_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Transaction_Payload, optional_batch_meta_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Transaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Transaction, payload_),
  PROTOBUF_FIELD_OFFSET(::iroha::protocol::Transaction, signatures_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::iroha::protocol::Transaction_Payload_BatchMeta)},
  { 7, -1, sizeof(::iroha::protocol::Transaction_Payload_ReducedPayload)},
  { 16, -1, sizeof(::iroha::protocol::Transaction_Payload)},
  { 24, -1, sizeof(::iroha::protocol::Transaction)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_Transaction_Payload_BatchMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_Transaction_Payload_ReducedPayload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_Transaction_Payload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::iroha::protocol::_Transaction_default_instance_),
};

const char descriptor_table_protodef_transaction_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021transaction.proto\022\016iroha.protocol\032\016com"
  "mands.proto\032\017primitive.proto\"\264\004\n\013Transac"
  "tion\0224\n\007payload\030\001 \001(\0132#.iroha.protocol.T"
  "ransaction.Payload\022-\n\nsignatures\030\002 \003(\0132\031"
  ".iroha.protocol.Signature\032\277\003\n\007Payload\022K\n"
  "\017reduced_payload\030\001 \001(\01322.iroha.protocol."
  "Transaction.Payload.ReducedPayload\022>\n\005ba"
  "tch\030\005 \001(\0132-.iroha.protocol.Transaction.P"
  "ayload.BatchMetaH\000\032\220\001\n\tBatchMeta\022E\n\004type"
  "\030\001 \001(\01627.iroha.protocol.Transaction.Payl"
  "oad.BatchMeta.BatchType\022\026\n\016reduced_hashe"
  "s\030\002 \003(\t\"$\n\tBatchType\022\n\n\006ATOMIC\020\000\022\013\n\007ORDE"
  "RED\020\001\032}\n\016ReducedPayload\022)\n\010commands\030\001 \003("
  "\0132\027.iroha.protocol.Command\022\032\n\022creator_ac"
  "count_id\030\002 \001(\t\022\024\n\014created_time\030\003 \001(\004\022\016\n\006"
  "quorum\030\004 \001(\rB\025\n\023optional_batch_metaB\032Z\030i"
  "roha.generated/protocolb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_transaction_2eproto_deps[2] = {
  &::descriptor_table_commands_2eproto,
  &::descriptor_table_primitive_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_transaction_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transaction_2eproto = {
  false, false, 671, descriptor_table_protodef_transaction_2eproto, "transaction.proto", 
  &descriptor_table_transaction_2eproto_once, descriptor_table_transaction_2eproto_deps, 2, 4,
  schemas, file_default_instances, TableStruct_transaction_2eproto::offsets,
  file_level_metadata_transaction_2eproto, file_level_enum_descriptors_transaction_2eproto, file_level_service_descriptors_transaction_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_transaction_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_transaction_2eproto);
  return descriptor_table_transaction_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_transaction_2eproto(&descriptor_table_transaction_2eproto);
namespace iroha {
namespace protocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Transaction_Payload_BatchMeta_BatchType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_transaction_2eproto);
  return file_level_enum_descriptors_transaction_2eproto[0];
}
bool Transaction_Payload_BatchMeta_BatchType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Transaction_Payload_BatchMeta_BatchType Transaction_Payload_BatchMeta::ATOMIC;
constexpr Transaction_Payload_BatchMeta_BatchType Transaction_Payload_BatchMeta::ORDERED;
constexpr Transaction_Payload_BatchMeta_BatchType Transaction_Payload_BatchMeta::BatchType_MIN;
constexpr Transaction_Payload_BatchMeta_BatchType Transaction_Payload_BatchMeta::BatchType_MAX;
constexpr int Transaction_Payload_BatchMeta::BatchType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class Transaction_Payload_BatchMeta::_Internal {
 public:
};

Transaction_Payload_BatchMeta::Transaction_Payload_BatchMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  reduced_hashes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.Transaction.Payload.BatchMeta)
}
Transaction_Payload_BatchMeta::Transaction_Payload_BatchMeta(const Transaction_Payload_BatchMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      reduced_hashes_(from.reduced_hashes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.Transaction.Payload.BatchMeta)
}

void Transaction_Payload_BatchMeta::SharedCtor() {
type_ = 0;
}

Transaction_Payload_BatchMeta::~Transaction_Payload_BatchMeta() {
  // @@protoc_insertion_point(destructor:iroha.protocol.Transaction.Payload.BatchMeta)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Transaction_Payload_BatchMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Transaction_Payload_BatchMeta::ArenaDtor(void* object) {
  Transaction_Payload_BatchMeta* _this = reinterpret_cast< Transaction_Payload_BatchMeta* >(object);
  (void)_this;
}
void Transaction_Payload_BatchMeta::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transaction_Payload_BatchMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Transaction_Payload_BatchMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.Transaction.Payload.BatchMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reduced_hashes_.Clear();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transaction_Payload_BatchMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .iroha.protocol.Transaction.Payload.BatchMeta.BatchType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::iroha::protocol::Transaction_Payload_BatchMeta_BatchType>(val));
        } else goto handle_unusual;
        continue;
      // repeated string reduced_hashes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_reduced_hashes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.Transaction.Payload.BatchMeta.reduced_hashes"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transaction_Payload_BatchMeta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.Transaction.Payload.BatchMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .iroha.protocol.Transaction.Payload.BatchMeta.BatchType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // repeated string reduced_hashes = 2;
  for (int i = 0, n = this->_internal_reduced_hashes_size(); i < n; i++) {
    const auto& s = this->_internal_reduced_hashes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.Transaction.Payload.BatchMeta.reduced_hashes");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.Transaction.Payload.BatchMeta)
  return target;
}

size_t Transaction_Payload_BatchMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.Transaction.Payload.BatchMeta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string reduced_hashes = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(reduced_hashes_.size());
  for (int i = 0, n = reduced_hashes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      reduced_hashes_.Get(i));
  }

  // .iroha.protocol.Transaction.Payload.BatchMeta.BatchType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transaction_Payload_BatchMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.Transaction.Payload.BatchMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const Transaction_Payload_BatchMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transaction_Payload_BatchMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.Transaction.Payload.BatchMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.Transaction.Payload.BatchMeta)
    MergeFrom(*source);
  }
}

void Transaction_Payload_BatchMeta::MergeFrom(const Transaction_Payload_BatchMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.Transaction.Payload.BatchMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reduced_hashes_.MergeFrom(from.reduced_hashes_);
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void Transaction_Payload_BatchMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.Transaction.Payload.BatchMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction_Payload_BatchMeta::CopyFrom(const Transaction_Payload_BatchMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.Transaction.Payload.BatchMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction_Payload_BatchMeta::IsInitialized() const {
  return true;
}

void Transaction_Payload_BatchMeta::InternalSwap(Transaction_Payload_BatchMeta* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reduced_hashes_.InternalSwap(&other->reduced_hashes_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction_Payload_BatchMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Transaction_Payload_ReducedPayload::_Internal {
 public:
};

void Transaction_Payload_ReducedPayload::clear_commands() {
  commands_.Clear();
}
Transaction_Payload_ReducedPayload::Transaction_Payload_ReducedPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  commands_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.Transaction.Payload.ReducedPayload)
}
Transaction_Payload_ReducedPayload::Transaction_Payload_ReducedPayload(const Transaction_Payload_ReducedPayload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      commands_(from.commands_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  creator_account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_creator_account_id().empty()) {
    creator_account_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_creator_account_id(), 
      GetArena());
  }
  ::memcpy(&created_time_, &from.created_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&quorum_) -
    reinterpret_cast<char*>(&created_time_)) + sizeof(quorum_));
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.Transaction.Payload.ReducedPayload)
}

void Transaction_Payload_ReducedPayload::SharedCtor() {
creator_account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&created_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&quorum_) -
    reinterpret_cast<char*>(&created_time_)) + sizeof(quorum_));
}

Transaction_Payload_ReducedPayload::~Transaction_Payload_ReducedPayload() {
  // @@protoc_insertion_point(destructor:iroha.protocol.Transaction.Payload.ReducedPayload)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Transaction_Payload_ReducedPayload::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  creator_account_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Transaction_Payload_ReducedPayload::ArenaDtor(void* object) {
  Transaction_Payload_ReducedPayload* _this = reinterpret_cast< Transaction_Payload_ReducedPayload* >(object);
  (void)_this;
}
void Transaction_Payload_ReducedPayload::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transaction_Payload_ReducedPayload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Transaction_Payload_ReducedPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.Transaction.Payload.ReducedPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  commands_.Clear();
  creator_account_id_.ClearToEmpty();
  ::memset(&created_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quorum_) -
      reinterpret_cast<char*>(&created_time_)) + sizeof(quorum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transaction_Payload_ReducedPayload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .iroha.protocol.Command commands = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_commands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string creator_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_creator_account_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "iroha.protocol.Transaction.Payload.ReducedPayload.creator_account_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 created_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          created_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 quorum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          quorum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transaction_Payload_ReducedPayload::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.Transaction.Payload.ReducedPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .iroha.protocol.Command commands = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_commands_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_commands(i), target, stream);
  }

  // string creator_account_id = 2;
  if (this->creator_account_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_creator_account_id().data(), static_cast<int>(this->_internal_creator_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "iroha.protocol.Transaction.Payload.ReducedPayload.creator_account_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_creator_account_id(), target);
  }

  // uint64 created_time = 3;
  if (this->created_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_created_time(), target);
  }

  // uint32 quorum = 4;
  if (this->quorum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_quorum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.Transaction.Payload.ReducedPayload)
  return target;
}

size_t Transaction_Payload_ReducedPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.Transaction.Payload.ReducedPayload)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iroha.protocol.Command commands = 1;
  total_size += 1UL * this->_internal_commands_size();
  for (const auto& msg : this->commands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string creator_account_id = 2;
  if (this->creator_account_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_creator_account_id());
  }

  // uint64 created_time = 3;
  if (this->created_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_created_time());
  }

  // uint32 quorum = 4;
  if (this->quorum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_quorum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transaction_Payload_ReducedPayload::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.Transaction.Payload.ReducedPayload)
  GOOGLE_DCHECK_NE(&from, this);
  const Transaction_Payload_ReducedPayload* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transaction_Payload_ReducedPayload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.Transaction.Payload.ReducedPayload)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.Transaction.Payload.ReducedPayload)
    MergeFrom(*source);
  }
}

void Transaction_Payload_ReducedPayload::MergeFrom(const Transaction_Payload_ReducedPayload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.Transaction.Payload.ReducedPayload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  commands_.MergeFrom(from.commands_);
  if (from.creator_account_id().size() > 0) {
    _internal_set_creator_account_id(from._internal_creator_account_id());
  }
  if (from.created_time() != 0) {
    _internal_set_created_time(from._internal_created_time());
  }
  if (from.quorum() != 0) {
    _internal_set_quorum(from._internal_quorum());
  }
}

void Transaction_Payload_ReducedPayload::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.Transaction.Payload.ReducedPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction_Payload_ReducedPayload::CopyFrom(const Transaction_Payload_ReducedPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.Transaction.Payload.ReducedPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction_Payload_ReducedPayload::IsInitialized() const {
  return true;
}

void Transaction_Payload_ReducedPayload::InternalSwap(Transaction_Payload_ReducedPayload* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  commands_.InternalSwap(&other->commands_);
  creator_account_id_.Swap(&other->creator_account_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transaction_Payload_ReducedPayload, quorum_)
      + sizeof(Transaction_Payload_ReducedPayload::quorum_)
      - PROTOBUF_FIELD_OFFSET(Transaction_Payload_ReducedPayload, created_time_)>(
          reinterpret_cast<char*>(&created_time_),
          reinterpret_cast<char*>(&other->created_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction_Payload_ReducedPayload::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Transaction_Payload::_Internal {
 public:
  static const ::iroha::protocol::Transaction_Payload_ReducedPayload& reduced_payload(const Transaction_Payload* msg);
  static const ::iroha::protocol::Transaction_Payload_BatchMeta& batch(const Transaction_Payload* msg);
};

const ::iroha::protocol::Transaction_Payload_ReducedPayload&
Transaction_Payload::_Internal::reduced_payload(const Transaction_Payload* msg) {
  return *msg->reduced_payload_;
}
const ::iroha::protocol::Transaction_Payload_BatchMeta&
Transaction_Payload::_Internal::batch(const Transaction_Payload* msg) {
  return *msg->optional_batch_meta_.batch_;
}
void Transaction_Payload::set_allocated_batch(::iroha::protocol::Transaction_Payload_BatchMeta* batch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_optional_batch_meta();
  if (batch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(batch);
    if (message_arena != submessage_arena) {
      batch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, batch, submessage_arena);
    }
    set_has_batch();
    optional_batch_meta_.batch_ = batch;
  }
  // @@protoc_insertion_point(field_set_allocated:iroha.protocol.Transaction.Payload.batch)
}
Transaction_Payload::Transaction_Payload(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.Transaction.Payload)
}
Transaction_Payload::Transaction_Payload(const Transaction_Payload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_reduced_payload()) {
    reduced_payload_ = new ::iroha::protocol::Transaction_Payload_ReducedPayload(*from.reduced_payload_);
  } else {
    reduced_payload_ = nullptr;
  }
  clear_has_optional_batch_meta();
  switch (from.optional_batch_meta_case()) {
    case kBatch: {
      _internal_mutable_batch()->::iroha::protocol::Transaction_Payload_BatchMeta::MergeFrom(from._internal_batch());
      break;
    }
    case OPTIONAL_BATCH_META_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.Transaction.Payload)
}

void Transaction_Payload::SharedCtor() {
reduced_payload_ = nullptr;
clear_has_optional_batch_meta();
}

Transaction_Payload::~Transaction_Payload() {
  // @@protoc_insertion_point(destructor:iroha.protocol.Transaction.Payload)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Transaction_Payload::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete reduced_payload_;
  if (has_optional_batch_meta()) {
    clear_optional_batch_meta();
  }
}

void Transaction_Payload::ArenaDtor(void* object) {
  Transaction_Payload* _this = reinterpret_cast< Transaction_Payload* >(object);
  (void)_this;
}
void Transaction_Payload::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transaction_Payload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Transaction_Payload::clear_optional_batch_meta() {
// @@protoc_insertion_point(one_of_clear_start:iroha.protocol.Transaction.Payload)
  switch (optional_batch_meta_case()) {
    case kBatch: {
      if (GetArena() == nullptr) {
        delete optional_batch_meta_.batch_;
      }
      break;
    }
    case OPTIONAL_BATCH_META_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPTIONAL_BATCH_META_NOT_SET;
}


void Transaction_Payload::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.Transaction.Payload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && reduced_payload_ != nullptr) {
    delete reduced_payload_;
  }
  reduced_payload_ = nullptr;
  clear_optional_batch_meta();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transaction_Payload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .iroha.protocol.Transaction.Payload.ReducedPayload reduced_payload = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reduced_payload(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .iroha.protocol.Transaction.Payload.BatchMeta batch = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_batch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transaction_Payload::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.Transaction.Payload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .iroha.protocol.Transaction.Payload.ReducedPayload reduced_payload = 1;
  if (this->has_reduced_payload()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::reduced_payload(this), target, stream);
  }

  // .iroha.protocol.Transaction.Payload.BatchMeta batch = 5;
  if (_internal_has_batch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::batch(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.Transaction.Payload)
  return target;
}

size_t Transaction_Payload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.Transaction.Payload)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .iroha.protocol.Transaction.Payload.ReducedPayload reduced_payload = 1;
  if (this->has_reduced_payload()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reduced_payload_);
  }

  switch (optional_batch_meta_case()) {
    // .iroha.protocol.Transaction.Payload.BatchMeta batch = 5;
    case kBatch: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *optional_batch_meta_.batch_);
      break;
    }
    case OPTIONAL_BATCH_META_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transaction_Payload::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.Transaction.Payload)
  GOOGLE_DCHECK_NE(&from, this);
  const Transaction_Payload* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transaction_Payload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.Transaction.Payload)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.Transaction.Payload)
    MergeFrom(*source);
  }
}

void Transaction_Payload::MergeFrom(const Transaction_Payload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.Transaction.Payload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_reduced_payload()) {
    _internal_mutable_reduced_payload()->::iroha::protocol::Transaction_Payload_ReducedPayload::MergeFrom(from._internal_reduced_payload());
  }
  switch (from.optional_batch_meta_case()) {
    case kBatch: {
      _internal_mutable_batch()->::iroha::protocol::Transaction_Payload_BatchMeta::MergeFrom(from._internal_batch());
      break;
    }
    case OPTIONAL_BATCH_META_NOT_SET: {
      break;
    }
  }
}

void Transaction_Payload::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.Transaction.Payload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction_Payload::CopyFrom(const Transaction_Payload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.Transaction.Payload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction_Payload::IsInitialized() const {
  return true;
}

void Transaction_Payload::InternalSwap(Transaction_Payload* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(reduced_payload_, other->reduced_payload_);
  swap(optional_batch_meta_, other->optional_batch_meta_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction_Payload::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Transaction::_Internal {
 public:
  static const ::iroha::protocol::Transaction_Payload& payload(const Transaction* msg);
};

const ::iroha::protocol::Transaction_Payload&
Transaction::_Internal::payload(const Transaction* msg) {
  return *msg->payload_;
}
void Transaction::clear_signatures() {
  signatures_.Clear();
}
Transaction::Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  signatures_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:iroha.protocol.Transaction)
}
Transaction::Transaction(const Transaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      signatures_(from.signatures_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_payload()) {
    payload_ = new ::iroha::protocol::Transaction_Payload(*from.payload_);
  } else {
    payload_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:iroha.protocol.Transaction)
}

void Transaction::SharedCtor() {
payload_ = nullptr;
}

Transaction::~Transaction() {
  // @@protoc_insertion_point(destructor:iroha.protocol.Transaction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Transaction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete payload_;
}

void Transaction::ArenaDtor(void* object) {
  Transaction* _this = reinterpret_cast< Transaction* >(object);
  (void)_this;
}
void Transaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Transaction::Clear() {
// @@protoc_insertion_point(message_clear_start:iroha.protocol.Transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signatures_.Clear();
  if (GetArena() == nullptr && payload_ != nullptr) {
    delete payload_;
  }
  payload_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .iroha.protocol.Transaction.Payload payload = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_payload(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .iroha.protocol.Signature signatures = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_signatures(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:iroha.protocol.Transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .iroha.protocol.Transaction.Payload payload = 1;
  if (this->has_payload()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::payload(this), target, stream);
  }

  // repeated .iroha.protocol.Signature signatures = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_signatures_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_signatures(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iroha.protocol.Transaction)
  return target;
}

size_t Transaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iroha.protocol.Transaction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iroha.protocol.Signature signatures = 2;
  total_size += 1UL * this->_internal_signatures_size();
  for (const auto& msg : this->signatures_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .iroha.protocol.Transaction.Payload payload = 1;
  if (this->has_payload()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *payload_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transaction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iroha.protocol.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  const Transaction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transaction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iroha.protocol.Transaction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iroha.protocol.Transaction)
    MergeFrom(*source);
  }
}

void Transaction::MergeFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iroha.protocol.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signatures_.MergeFrom(from.signatures_);
  if (from.has_payload()) {
    _internal_mutable_payload()->::iroha::protocol::Transaction_Payload::MergeFrom(from._internal_payload());
  }
}

void Transaction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iroha.protocol.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction::CopyFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iroha.protocol.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction::IsInitialized() const {
  return true;
}

void Transaction::InternalSwap(Transaction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  signatures_.InternalSwap(&other->signatures_);
  swap(payload_, other->payload_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
}  // namespace iroha
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::iroha::protocol::Transaction_Payload_BatchMeta* Arena::CreateMaybeMessage< ::iroha::protocol::Transaction_Payload_BatchMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::Transaction_Payload_BatchMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::Transaction_Payload_ReducedPayload* Arena::CreateMaybeMessage< ::iroha::protocol::Transaction_Payload_ReducedPayload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::Transaction_Payload_ReducedPayload >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::Transaction_Payload* Arena::CreateMaybeMessage< ::iroha::protocol::Transaction_Payload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::Transaction_Payload >(arena);
}
template<> PROTOBUF_NOINLINE ::iroha::protocol::Transaction* Arena::CreateMaybeMessage< ::iroha::protocol::Transaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::iroha::protocol::Transaction >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
